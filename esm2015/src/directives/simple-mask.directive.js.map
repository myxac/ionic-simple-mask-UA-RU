{"version":3,"file":"simple-mask.directive.js","sourceRoot":"","sources":["../../package/src/directives/simple-mask.directive.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC5F,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAQ9C,MAAM,OAAO,mBAAoB,SAAQ,UAAU;;;;;IAIjD,YACU,QAAmB,EACZ,SAAqB;QAEpC,KAAK,EAAE,CAAC;QAHA,aAAQ,GAAR,QAAQ,CAAW;QACZ,cAAS,GAAT,SAAS,CAAY;IAGtC,CAAC;;;;;IAGD,OAAO,CAAC,KAAoB;;cACpB,EAAE,GAAqB,mBAAkB,KAAK,CAAC,MAAM,EAAA;;cACrD,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;;;;;IAGD,MAAM,CAAC,KAAY;;cACX,EAAE,GAAqB,mBAAkB,KAAK,CAAC,MAAM,EAAA;QAC3D,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE;YACjE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;SACrC;IACH,CAAC;;;;;IAGD,WAAW,CAAC,KAAY;QACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;;;;;IAED,IACI,WAAW,CAAC,MAAW;QACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;;;;;IAED,IACI,WAAW,CAAC,MAAW;QACzB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;;;;;;;IAOO,UAAU,CAAC,KAAoB,EAAE,MAAW;QAClD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAClD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;SACjD;IACH,CAAC;;;;;;IAOO,SAAS,CAAC,KAAa;;;cAEvB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,MAAM;QACtD,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAEjC,OAAO,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC9C,CAAC;;;YAzEF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;aACzB;YAGA,UAAU;;;;YATgD,SAAS;YAC3D,SAAS,uBAeb,IAAI;;;mBALN,KAAK,SAAC,YAAY;8BAClB,KAAK;sBASL,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;qBAOhC,YAAY,SAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;0BAQ/B,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;0BAKlC,KAAK,SAAC,aAAa;0BAKnB,KAAK,SAAC,aAAa;;;;IAnCpB,mCAAkC;;IAClC,8CAAkC;;IAGhC,uCAA2B;;IAC3B,wCAAoC","sourcesContent":["import { Directive, HostListener, Input, Injectable, Self, Renderer2 } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SimpleMask } from './../simple-mask';\n\n@Directive({\n  selector: '[simpleMask]'\n})\n\n/** Mask used on answer component */\n@Injectable()\nexport class SimpleMaskDirective extends SimpleMask {\n  @Input('simpleMask') mask: string;\n  @Input() clearIfNotMatch: boolean;\n\n  constructor(\n    private renderer: Renderer2,\n    @Self() public ngControl?: NgControl\n  ) { \n    super();\n  }\n\n  @HostListener('input', ['$event'])\n  onInput(event: KeyboardEvent): void {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    const value = this.fitToMask(el.value);\n    this.writeValue(value, event.target);\n  }\n\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event) {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    if (el.value && !this.matchMask(el.value) && this.clearIfNotMatch) {\n      this.writeValue(null, event.target);\n    }\n  }\n\n  @HostListener('ionBlur', ['$event'])\n  inputOnblur(event: Event): void {\n    this.onBlur(event);\n  }\n\n  @Input('addPatterns')\n  set addPatterns(values: any) {\n    this.setPatterns(values);\n  }\n\n  @Input('newPatterns')\n  set newPatterns(values: any) {\n    this.setPatterns(values, true);\n  }\n\n  /**\n   * write the new value on input element and form control\n   * @param value value to write\n   * @param target input element\n   */\n  private writeValue(value: string | null, target: any): void {\n    target.value = value;\n    this.renderer.setProperty(target, 'value', value);\n    if (this.ngControl && this.ngControl.control) {\n      this.ngControl.control.setValue(value);\n      this.ngControl.control.markAsDirty();\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Checks if the value matches with the mask and is completed\n   * @param value value to check\n   * @returns true if match, false if not match\n   */\n  private matchMask(value: string): boolean {\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    return value.length === size ? true : false;\n  }\n}\n"]}