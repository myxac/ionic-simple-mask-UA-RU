{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/rxjs/src/internal/util/isFunction.ts","../../node_modules/rxjs/src/internal/config.ts","../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../node_modules/rxjs/src/internal/Observer.ts","../../node_modules/rxjs/src/internal/util/isObject.ts","../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../node_modules/rxjs/src/internal/Subscription.ts","../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../node_modules/rxjs/src/internal/Subscriber.ts","../../node_modules/rxjs/src/internal/Observable.ts","../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../node_modules/rxjs/src/internal/util/canReportError.ts","../../node_modules/rxjs/src/internal/util/pipe.ts","../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../node_modules/rxjs/src/internal/Subject.ts","../../node_modules/rxjs/src/internal/operators/refCount.ts","../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../node_modules/rxjs/src/internal/observable/empty.ts","../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../node_modules/rxjs/src/internal/operators/map.ts","../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../node_modules/rxjs/src/internal/util/isPromise.ts","../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../node_modules/rxjs/src/internal/observable/from.ts","../../node_modules/rxjs/src/internal/util/isInteropObservable.ts","../../node_modules/rxjs/src/internal/observable/fromObservable.ts","../../node_modules/rxjs/src/internal/observable/fromPromise.ts","../../node_modules/rxjs/src/internal/util/isIterable.ts","../../node_modules/rxjs/src/internal/observable/fromIterable.ts","../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../node_modules/rxjs/src/internal/operators/windowToggle.ts","../../../../packages/platform-browser/src/dom/dom_adapter.ts","../../../../packages/platform-browser/src/browser/browser_adapter.ts","../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../../../packages/platform-browser/src/dom/dom_tokens.ts","../../../../packages/platform-browser/src/browser/location/history.ts","../../../../packages/platform-browser/src/browser/location/browser_platform_location.ts","../../../../packages/platform-browser/src/browser/server-transition.ts","../../../../packages/platform-browser/src/browser/testability.ts","../../../../packages/platform-browser/src/dom/util.ts","../../../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../../../packages/platform-browser/src/dom/events/event_manager.ts","../../../../packages/platform-browser/src/dom/shared_styles_host.ts","../../../../packages/platform-browser/src/dom/dom_renderer.ts","../../../../packages/platform-browser/src/dom/events/dom_events.ts","../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../../../packages/platform-browser/src/dom/events/key_events.ts","../../../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../../../packages/platform-browser/src/browser.ts","../../../../packages/platform-browser/src/browser/meta.ts","../../../../packages/platform-browser/src/browser/title.ts","../../../../packages/platform-browser/src/browser/transfer_state.ts","../../../../packages/platform-browser/src/version.ts","../../../../packages/forms/src/directives/abstract_control_directive.ts","../../../../packages/forms/src/directives/control_container.ts","../../../../packages/forms/src/validators.ts","../../../../packages/forms/src/directives/control_value_accessor.ts","../../../../packages/forms/src/directives/checkbox_value_accessor.ts","../../../../packages/forms/src/directives/default_value_accessor.ts","../../../../packages/forms/src/directives/normalize_validator.ts","../../../../packages/forms/src/directives/number_value_accessor.ts","../../../../packages/forms/src/directives/ng_control.ts","../../../../packages/forms/src/directives/radio_control_value_accessor.ts","../../../../packages/forms/src/directives/range_value_accessor.ts","../../../../packages/forms/src/directives/error_examples.ts","../../../../packages/forms/src/directives/reactive_errors.ts","../../../../packages/forms/src/directives/select_control_value_accessor.ts","../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts","../../../../packages/forms/src/directives/shared.ts","../../../../packages/forms/src/directives/abstract_form_group_directive.ts","../../../../packages/forms/src/directives/ng_control_status.ts","../../../../packages/forms/src/model.ts","../../../../packages/forms/src/directives/ng_form.ts","../../../../packages/forms/src/directives/template_driven_errors.ts","../../../../packages/forms/src/directives/ng_form_selector_warning.ts","../../../../packages/forms/src/directives/ng_model_group.ts","../../../../packages/forms/src/directives/ng_model.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts","../../../../packages/forms/src/directives/validators.ts","../../../../packages/forms/src/form_builder.ts","../../../../packages/forms/src/directives.ts","../../../../packages/forms/src/version.ts","../../../../packages/forms/src/directives/ng_no_validate_directive.ts","../package/src/simple-mask.ts","../../../../packages/forms/src/form_providers.ts","../package/src/directives/simple-mask.directive.ts","../package/src/pipes/simple-mask.pipe.ts","../package/src/modules/simple-mask.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","Error","setTimeout","err","empty","closed","useDeprecatedSynchronousErrorHandling","isObject","tryCatchTarget","errorObject","fn","tryCatcher","UnsubscriptionErrorImpl","errors","message","map","toString","join","name","Subscription","_parent","_parents","_subscriptions","unsubscribe","hasErrors","_unsubscribe","index","len","remove","isFunction","tryCatch","UnsubscriptionError","isArray","sub","add","teardown","EMPTY","subscription","tmp","_addParent","subscriptions","subscriptionIndex","indexOf","parent","flattenUnsubscriptionErrors","reduce","errs","Math","random","Subscriber","_super","_this","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","destinationOrNext","SafeSubscriber","complete","tslib_1.__extends","rxSubscriber","subscriber","_next","_error","_complete","_parentSubscriber","context","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","hostReportError","Observable","_isScalar","subscribe","lift","operator","observable$$1","observable","source","sink","nextOrObserver","toSubscriber","_subscribe","observer","_a","closed_1","canReportError","forEach","promiseCtor","getPromiseCtor","reject","fns","operations","input","toPromise","SubjectSubscriber","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","refCount","connection","sharedConnection","_connection","connectableProto","subjectFactory","getSubject","subject","_subject","connect","_isComplete","ConnectableSubscriber","ConnectableObservable","array","fromArray","scheduler","schedule","project","thisArg","MapOperator","MapSubscriber","count","result","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","InnerSubscriber","notifyComplete","subscribeToPromise","promise","then","getSymbolIterator","subscribeToIterable","iterable","Symbol_iterator","item","iterator$$1","return","subscribeToObservable","obj","obs","isPromise","subscribeTo","Symbol_observable","subscribeToResult","outerSubscriber","from","isInteropObservable","TypeError","ForkJoinSubscriber","sources","completed","haveValues","values","innerSubscription","_hasValue","_DOM","getDOM","nodeContains","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","createElement","document","getStyle","domPrefixes","toLowerCase","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","keys","getDistributedNodes","el","resolveAndSetHref","baseUrl","href","supportsDOMEvents","supportsNativeShadowDOM","body","createShadowRoot","getAnimationPrefix","getTransitionEnd","supportsAnimation","DomAdapter","resourceLoaderType","_attrToPropMap","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","¬ê","global","contains","node","compareDocumentPosition","urlParsingNode","BrowserDomAdapter","parse","templateHtml","makeCurrent","adapter","hasProperty","element","setProperty","getProperty","invoke","methodName","args","apply","logError","window","console","log","logGroup","group","logGroupEnd","groupEnd","nodeA","nodeB","querySelector","selector","querySelectorAll","on","evt","listener","addEventListener","onAndCancel","removeEventListener","dispatchEvent","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","returnValue","isPrevented","defaultPrevented","getInnerHTML","innerHTML","getTemplateContent","isTemplateElement","content","getOuterHTML","outerHTML","nodeName","nodeValue","type","firstChild","nextSibling","parentElement","parentNode","childNodes","childNodesAsList","res","clearNodes","removeChild","appendChild","replaceChild","newChild","oldChild","insertBefore","ref","insertAllBefore","nodes","insertAfter","setInnerHTML","getText","textContent","setText","getValue","setValue","getChecked","checked","setChecked","createComment","text","createTemplate","html","tagName","doc","createElementNS","ns","createTextNode","createScriptTag","attrName","attrValue","setAttribute","createStyleElement","css","style","getShadowRoot","shadowRoot","getHost","host","clone","cloneNode","getElementsByClassName","getElementsByTagName","classList","slice","addClass","className","removeClass","hasClass","setStyle","styleName","styleValue","removeStyle","stylename","hasStyle","attributeMap","Map","elAttrs","attributes","attrib","set","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttribute","removeAttributeNS","templateAwareRoot","createHtmlDocument","implementation","createHTMLDocument","getBoundingClientRect","top","bottom","left","right","width","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","matches","msMatchesSelector","webkitMatchesSelector","isTextNode","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","ELEMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","getEventKey","event","keyIdentifier","startsWith","String","fromCharCode","parseInt","substring","location","getGlobalEventTarget","getHistory","history","getLocation","getBaseHref","baseElement","getBaseElementHref","url","pathname","charAt","relativePath","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","Date","getTime","supportsCookies","getCookie","parseCookieValue","cookie","setCookie","encodeURIComponent","DOCUMENT","commonDOCUMENT","supportsState","pushState","BrowserPlatformLocation","_doc","_init","_history","getBaseHrefFromDOM","onPopState","onHashChange","newPath","search","hash","state","replaceState","forward","back","Injectable","tslib_1.__param","Inject","PlatformLocation","TRANSITION_ID","InjectionToken","SERVER_TRANSITION_PROVIDERS","provide","APP_INITIALIZER","useFactory","transitionId","injector","get","ApplicationInitStatus","donePromise","dom","filter","deps","Injector","multi","BrowserGetTestability","init","setTestabilityGetter","addToWindow","registry","elem","findInAncestors","testability","findTestabilityInTree","getAllTestabilities","getAllRootElements","callback","testabilities","didWork","decrement","didWork_","whenStable","getTestability","exportNgVar","COMPILED","CORE_TOKENS","ApplicationRef","core.ApplicationRef","NgZone","core.NgZone","inspectNativeElement","core.getDebugNode","ELEMENT_PROBE_PROVIDERS","core.APP_INITIALIZER","coreTokens","prev","token","core.NgProbeToken","core.Optional","EVENT_MANAGER_PLUGINS","EventManager","plugins","_zone","_eventNameToPlugin","manager","_plugins","reverse","eventName","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","supports","EventManagerPlugin","SharedStylesHost","_stylesSet","Set","addStyles","styles","additions","has","onStylesAdded","getAllStyles","DomSharedStylesHost","_hostNodes","_styleNodes","head","_addStylesToHost","styleEl","addHost","hostNode","removeHost","delete","ngOnDestroy","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","replace","decoratePreventDefault","eventHandler","DomRendererFactory2","eventManager","sharedStylesHost","rendererByCompId","defaultRenderer","DefaultDomRenderer2","createRenderer","encapsulation","ViewEncapsulation","Emulated","renderer","id","EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDom","ShadowDomRenderer","begin","end","data","destroy","namespace","createText","refChild","selectRootElement","selectorOrNode","preserveContent","namespaceUri","flags","RendererStyleFlags2","DashCase","Important","removeProperty","checkNoSyntheticProp","listen","AT_CHARCODE","charCodeAt","nameKind","blackListedMap","component","componentShortId","contentAttr","hostAttr","shimHostAttribute","hostEl","attachShadow","mode","nodeOrShadowRoot","__symbol__","Zone","v","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","stopSymbol","blackListedEvents","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","zone","current","run","copiedTasks","DomEventsPlugin","ngZone","platformId","isPlatformServer","patchEvent","Event","delegate","stopImmediatePropagation","zoneJsLoaded","isInAngularZone","globalListenerRegistered","root","callbackRegistered","underlyingRemove","found","splice","Optional","PLATFORM_ID","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","events","overrides","buildHammer","mc","Hammer","options","enable","HammerGesturesPlugin","_config","loader","isCustomEvent","warn","runOutsideAngular","eventObj","runGuarded","off","cancelRegistration_1","deregister_1","catch","Console","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","meta","metaKey","shift","shiftKey","KeyEventsPlugin","KeyEventsPlugin_1","parseEventName","parsedEvent","outsideHandler","eventCallback","parts","split","domEventName","_normalizeKey","pop","fullKey","modifierName","getEventFullKey","modifierGetter","keyName","DomSanitizer","DomSanitizerImpl","sanitize","ctx","SecurityContext","NONE","HTML","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","_sanitizeHtml","STYLE","SafeStyleImpl","_sanitizeStyle","SCRIPT","SafeScriptImpl","URL","SafeResourceUrlImpl","SafeUrlImpl","_sanitizeUrl","RESOURCE_URL","expectedType","SafeValueImpl","getTypeName","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","INTERNAL_BROWSER_PLATFORM_PROVIDERS","useValue","PLATFORM_BROWSER_ID","PLATFORM_INITIALIZER","useClass","BROWSER_SANITIZATION_PROVIDERS","Sanitizer","useExisting","createPlatformFactory","platformCore","BROWSER_MODULE_PROVIDERS","APP_ROOT","ErrorHandler","RendererFactory2","Testability","BrowserModule","parentModule","withServerTransition","params","ngModule","BrowserModule_1","providers","APP_ID","appId","NgModule","exports","CommonModule","ApplicationModule","SkipSelf","createMeta","Meta","inject","_dom","addTag","tag","forceCreation","_getOrCreateElement","addTags","tags","getTag","attrSelector","getTags","list","updateTag","_parseSelector","_setMetaElementAttributes","removeTag","removeTagElement","_containsAttributes","prop","attr","every","providedIn","createTitle","Title","TransferState","store","onSerializeCallbacks","initState","transferState","TransferState_1","defaultValue","hasKey","onSerialize","toJson","JSON","stringify","initTransferState","unescapedText","script","getElementById","initialState","&a;","&q;","&s;","&l;","&g;","BrowserTransferStateModule","Version","AbstractControlDirective","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","reset","hasError","errorCode","path","getError","ControlContainer","isEmptyInputValue","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","parseFloat","isNaN","actual","max","required","requiredTrue","email","test","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","regex","regexStr","RegExp","requiredPattern","actualValue","nullValidator","compose","validators","presentValidators","isPresent","_mergeErrors","_executeValidators","composeAsync","forkJoin","resultSelector","_i","_executeAsyncValidators","toObservable","pipe","isObservable","arrayOfErrors","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","forwardRef","CheckboxControlValueAccessor","_renderer","_elementRef","onChange","_","onTouched","writeValue","nativeElement","registerOnChange","registerOnTouched","setDisabledState","isDisabled","Directive","(change)","(blur)","Renderer2","ElementRef","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","COMPOSITION_BUFFER_MODE","_compositionMode","_composing","normalizedValue","_handleInput","_compositionStart","_compositionEnd","(input)","(compositionstart)","(compositionend)","Boolean","normalizeValidator","validator","validate","normalizeAsyncValidator","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","unimplemented","NgControl","valueAccessor","_rawValidators","_rawAsyncValidators","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","accessor","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","ngOnInit","_checkName","_state","_fn","formControlName","_throwNameError","tslib_1.__decorate","Input","RANGE_VALUE_ACCESSOR","RangeValueAccessor","FormErrorExamples","ReactiveErrors","controlParentException","Examples","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","ngModelWarning","directiveName","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_buildValueString","_optionMap","_idCounter","_compareWith","looseIdentical","_getOptionId","valueString","_getOptionValue","_registerOption","_b","tslib_1.__values","_c","_extractId","NgSelectOption","_element","_select","_setElementValue","Host","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","selectedOptions","val","_value","NgSelectMultipleOption","controlPath","setUpControl","dir","_throwError","asyncValidator","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","setUpModelChangePipeline","_pendingTouched","markAsTouched","setUpBlurPipeline","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","markAsDirty","emitModelToViewChange","setUpFormContainer","_noControlError","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","some","a","removeDir","_ngModelWarning","instance","warningConfig","isDevMode","_ngModelWarningSentOnce","_ngModelWarningSent","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","NgControlStatus","Self","NgControlStatusGroup","coerceToValidator","validatorOrOpts","isOptionsObj","coerceToAsyncValidator","origAsyncValidator","asyncValidators","AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","opts","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","emitEvent","emit","disable","_updateValue","_updateAncestors","changeFn","setParent","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","setErrors","_updateControlsErrors","delimiter","FormGroup","controls","FormArray","at","_find","_initObservables","EventEmitter","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","_setUpdateStrategy","FormControl","_onChange","_applyFormState","emitViewToModelChange","patchValue","condition","_clearChangeFns","cb","_setUpControls","registerControl","addControl","removeControl","setControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","subtreeUpdated","updated","child","k","_reduceValue","initValue","_registerControl","insert","removeAt","formDirectiveProvider","NgForm","resolvedPromise","resolve","submitted","_directives","ngSubmit","ngAfterViewInit","container","_findContainer","getControl","updateModel","onSubmit","$event","onReset","resetForm","(submit)","(reset)","outputs","exportAs","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","ngFormWarning","NG_FORM_SELECTOR_WARNING","NgFormSelectorWarning","NgFormSelectorWarning_1","_ngFormWarning","modelGroupProvider","NgModelGroup","NgModelGroup_1","formControlBinding","NgModel","_registered","update","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","Output","NG_MODEL_WITH_FORM_CONTROL_WARNING","FormControlDirective","_ngModelWarningConfig","_isControlChanged","FormControlDirective_1","FormGroupDirective","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","cleanUpControl","_oldForm","sync","async","formGroupNameProvider","FormGroupName","_hasInvalidParent","formArrayNameProvider","FormArrayName","controlNameBinding","FormControlName","_added","FormControlName_1","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","EMAIL_VALIDATOR","EmailValidator","_enabled","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","_createControl","controlConfig","SHARED_FORM_DIRECTIVES","NgNoValidate","novalidate","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","declarations","SimpleMask","FormsModule","withConfig","FormsModule_1","warnOnDeprecatedNgFormSelector","ReactiveFormsModule","ReactiveFormsModule_1","warnOnNgModelWithFormControl","patterns","9","*","~","setPatterns","clear","isPattern","char","fitToMask","size","mask","j","SimpleMaskDirective","ngControl","onInput","onBlur","matchMask","clearIfNotMatch","inputOnblur","HostListener","SimpleMaskPipe","transform","Pipe","SimpleMaskModule"],"mappings":"0ZAgBA,IAAIA,cAAgBC,OAAOC,gBACtB,CAAEC,UAAW,cAAgBC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,KAElE,SAASE,UAAUJ,EAAGC,GAEzB,SAASI,KAAOC,KAAKC,YAAcP,EADnCL,cAAcK,EAAGC,GAEjBD,EAAEQ,UAAkB,OAANP,EAAaL,OAAOa,OAAOR,IAAMI,GAAGG,UAAYP,EAAEO,UAAW,IAAIH,IAG5E,IAAIK,SAAWd,OAAOe,QAAU,SAAkBC,GACrD,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOlB,OAAOY,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,GAaJ,SAASO,WAAWC,WAAYC,OAAQC,IAAKC,MAChD,IAA2HvB,EAAvHwB,EAAIR,UAAUC,OAAQQ,EAAID,EAAI,EAAIH,OAAkB,OAATE,KAAgBA,KAAO3B,OAAO8B,yBAAyBL,OAAQC,KAAOC,KACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,WAAYC,OAAQC,IAAKC,WACpH,IAAK,IAAIT,EAAIM,WAAWH,OAAS,EAAQ,GAALH,EAAQA,KAASd,EAAIoB,WAAWN,MAAIW,GAAKD,EAAI,EAAIxB,EAAEyB,GAAS,EAAJD,EAAQxB,EAAEqB,OAAQC,IAAKG,GAAKzB,EAAEqB,OAAQC,OAASG,GAChJ,OAAW,EAAJD,GAASC,GAAK7B,OAAOiC,eAAeR,OAAQC,IAAKG,GAAIA,EAGzD,SAASK,QAAQC,WAAYC,WAChC,OAAO,SAAUX,OAAQC,KAAOU,UAAUX,OAAQC,IAAKS,aAGpD,SAASE,WAAWC,YAAaC,eACpC,GAAuB,iBAAZR,SAAoD,mBAArBA,QAAQS,SAAyB,OAAOT,QAAQS,SAASF,YAAaC,eA4C7G,SAASE,SAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAW3B,EAAI,EAChE,OAAIyB,EAAUA,EAAErB,KAAKoB,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKxB,GAAKwB,EAAErB,SAAQqB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAExB,KAAM8B,MAAON,KAKzC,SAASO,OAAOP,EAAGvB,GACtB,IAAIwB,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBb,EAAYqB,EAA3BhC,EAAIyB,EAAErB,KAAKoB,GAAOS,GAAK,GAC3B,IACI,WAAc,IAANhC,GAAsB,EAANA,QAAcU,EAAIX,EAAE4B,QAAQE,MAAMG,GAAGC,KAAKvB,EAAEkB,OAExE,MAAOM,OAASH,EAAI,CAAEG,MAAOA,OACjC,QACQ,IACQxB,IAAMA,EAAEmB,OAASL,EAAIzB,EAAU,SAAIyB,EAAErB,KAAKJ,GAE1D,QAAkB,GAAIgC,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,GAGJ,SAASG,WACZ,IAAK,IAAIH,GAAK,GAAIjC,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiC,GAAKA,GAAGI,OAAON,OAAO7B,UAAUF,KACpC,OAAOiC,0BCjIX,MAAA,mBAAAK,ECIA,IAAAC,qDAAA,EAKSC,OAAA,CAUPC,aAAAC,4CACEb,OACEA,QACA,IAAAc,+MCjBNC,WAAA,WAAA,MAAAC,MCLA,IAAAC,MAGc,CACZC,QAAA,EACAnB,KAAA,SAAAC,gCAEIW,OAAMQ,8KCREC,SAAQX,GACtB,OAAA,MAAAA,GAAA,iBAAAA,MCEAY,wHAKIC,YAAAnB,EAAAA,iCAKkBoB,IAEtB,OADEF,eAAsBE,GACxBC,oBCPOC,wBAAAC,QAOP,OANEZ,MAAKvC,KAAAZ,WACFgE,QAAAD,OAECA,OAAApD,OAAA,4CAAAoD,OAAAE,IAAA,SAAAZ,IAAA7C,GAAA,OAAAA,EAAA,EAAA,KAAA6C,IAAAa,aAAAC,KAAA,QAAA,GACJnE,KAAKoE,KAAA,sBACLpE,KAAA+D,OAAWA,OACb/D,KAQA8D,wBAAA5D,UAA4DZ,OAA+Ba,OAAAgD,MAAAjD,2DCoBzFmE,aAAA,8CAVUrE,KAAAuD,QAAA,EAEAvD,KAAAsE,QAAA,KAEFtE,KAAAuE,SAAA,KAONvE,KAAIwE,eAAA,KACKC,4GAYT,IAEIV,OAFAW,WAAA,MAGF1E,KAAAuD,QAKF,IAAIe,QAAAtE,KAAAsE,QAAAC,SAAAvE,KAAAuE,SAAAI,aAAA3E,KAAA2E,aAAAH,eAAAxE,KAAAwE,eACJxE,KAAKuD,QAAA,EACLvD,KAAKsE,QAAA,KAGLtE,KAAKuE,SAAA,KAELvE,KAAIwE,eAAA,SACJ,IAAII,OAAA,EAIJC,IAAON,SAAAA,SAAA5D,OAAA,WAIL2D,QAAOQ,OAAA9E,oDAIP+E,WAAAJ,cACSK,SAAAL,cAAA/D,KAAAZ,QACP2D,cACAe,WAAS,8BAEuBlC,aAAayC,2FAO/CC,QAAQV,oBACRI,OAAA,EAEAC,IAAAL,eAAoB7D,eACNkE,KAAA,CACZ,IAAIM,IAAAX,eAAAI,UACFnB,SAAS0B,QACAH,SAAAG,IAAgBV,aAAA7D,KAAAuE,OACvBxB,YAAA,CACAe,WAAS,EACTX,OAAAA,QAAA,GACA,IAAIV,IAAGM,YAAAnB,EACLa,eAAe4B,uGAUvBP,yEAuBgBU,IAAA,SAAAC,cAChBA,UAAAA,WAAAhB,aAAAiB,mCAIAD,WAAArF,iBAKF,IAAAuF,aAAAF,wGAKME,aAAAhC,QAAmB,mBAAAgC,aAAAd,sDAGnBc,aAAAd,0EAGA,IAAAe,IAAAD,cACAA,aAAY,IAAAlB,qIASlBrE,KAAAwE,iBAAAxE,KAAAwE,eAAA,KACa9B,KAAA6C,cAEbA,aAAAE,WAAAzF,kDAU2B,SAAAuF,cAC3B,IAAIG,cAAa1F,KAAAwE,kBACfkB,cAAA,CACA,IAAIC,kBAAiBD,cAAAE,QAAAL,eACnB,IAAAI,kHAQJ,IAAIrB,QAAAtE,KAAwBsE,QAAAC,SAAxBvE,KAAwBuE,SAG1BD,SAAYA,UAAAuB,OAIPtB,UAGiB,aAARqB,QAAQC,wHAzLxBtC,QAAY,sBAoBd,GA0KF,SAAAuC,4BAAA/B,QAEA,OAAAA,OAAAgC,OAAA,SAAAC,KAAA3C,KAAA,OAAA2C,KAAAnD,OAAAQ,eAAA4B,oBAAA5B,IAAAU,OAAAV,MAAA,sDCpN0B,gBAKpB,kBAAoC4C,KAAAC,SCSPC,WAAA,SAAYC,8DAwB5B,IAAAC,MAAAD,OAAAxF,KAAsBZ,OAAKA,YAC3BqG,MAAAC,eAAA,KACAD,MAAAE,iBAAkB,EAEzBF,MAAAG,oBAA2B,EAG7BH,MAAAI,WAAA,EAeNJ,MAAAK,oBAAA,8BAGIL,MAAMM,YAAArD,uBAGJsD,kBAAmB,CACnBP,MAAMM,YAAArD,eAGN,iBAAAsD,kBAAA,CACEA,6BAAAT,YACAE,MAAKG,mBAAAI,kBAAAJ,oBACLH,MAAAM,YAAiBC,gCAGjBP,MAAKG,oBAAkB,+EAM3BH,MAAKG,oBAAkB,EACvBH,MAAMM,YAAA,IAAAE,eAAAR,MAAAO,kBAAAjE,MAAAmE,uBA+Ed,OA3GEC,UAAAA,WAAAA,QAzBOZ,WAAAjG,UAAP8G,cAEiB,WAAA,OAAAhH,sCACmB2C,MAAAmE,UAClC,IAAAG,WAAA,IAAAd,WAAgC/D,KAAMO,MAAAmE,iBACtCG,WAAAT,oBAAA,wCA4DqB,SAAAnE,OACnBrC,KAAKyG,uEAaLzG,KAAKyG,YACLzG,KAAKyG,WAAY,8DAYjBzG,KAAKyG,YACLzG,KAAKyG,WAAY,0CAKFhC,YAAA,WACfzE,KAAAuD,SAGFvD,KAAAyG,WAAM,iEAIWS,MAAK,SAAA7E,0DAIL8E,OAAS,SAAA9D,KAC1BrD,KAAK2G,YAAWhE,MAAAU,8CAIC+D,UAAA,WACjBpH,KAAK2G,YAAWG,sFAMhB,IAAexC,QAAXtE,KAAWsE,QAAAC,SAAXvE,KAAWuE,gBACfvE,KAAKsE,QAAA,KACLtE,KAAKuE,SAAW,KAChBvE,KAAKyE,cACLzE,KAAKuD,QAAS,EACdvD,KAAKyG,WAAA,EACLzG,KAAKsE,QAAAA,QACLtE,KAAKuE,SAAAA,SACLvE,KAAA0G,oBAAA,WAEJP,WApJmC,eA2JIU,eAAA,SAAaT,iFAI9B,IAOdhE,KAPciE,MAAAD,OAAAxF,KAAiBZ,OAAAA,KAMnCqG,MAAAgB,kBAAAA,kBAGA,IAAIC,QAAUjB,aACZtB,WAAAwC,qDAGAnF,KAAAmF,eAA6CnF,KAC7CO,MAAQ4E,eAAA5E,MACRmE,SAAAS,eAAAT,SACES,iBAAAjE,QAEEyB,YADFuC,QAAAhI,OAAAa,OAAuBoH,iBACS9C,+GAOpC4B,MAAKmB,SAAQF,QACbjB,MAAKa,MAAA9E,KACLiE,MAAKc,OAASxE,qCAsGlB,OAjIEoE,UAAAA,eAAAA,uBA+BY7G,UAAAkC,KAAkB,SAAAC,WAClBrC,KAAAyG,WAAAzG,KAAAkH,MAAA,CACR,IAAIG,kBAAArH,KAAAqH,kBACFrE,OAAAQ,uCAAA6D,kBAAAb,mBAEKxG,KAAAyH,gBAAAJ,kBAAArH,KAAAkH,MAAA7E,gFAMCnC,UAAWyC,MAAA,SAAAU,SACXrD,KAAAyG,UAAA,CACA,IAAAY,kBAAArH,KAAAqH,kBACJ7D,sCAAAR,OAAAQ,yCACFxD,KAAKmH,OACH3D,uCAAA6D,kBAAAb,mBAIAxG,KAAKyH,gBAAAJ,kBAAArH,KAAAmH,OAAA9D,KAHLrD,KAAK0H,aAAa1H,KAAAmH,OAAA9D,gCAMfgE,kBAAAb,mBAOHhD,uCACA6D,kBAAkBf,eAAAjD,sFARf,IACLrD,KAAIyE,cACFjB,qHAgBN,IAAI6C,MAAKrG,SACCA,KAAAyG,UAAA,CACR,IAAIY,kBAAArH,KAAAqH,qBACFrH,KAAMoH,UAAA,CAEN,IAAIO,gBAAA,WAAA,OAAAtB,MAA6Ce,UAAAxG,KAAAyF,MAAAmB,WAC/CxE,OAAAQ,uCAAA6D,kBAAAb,mBAIAxG,KAAKyH,gBAAAJ,kBAAAM,iBAHL3H,KAAK0H,aAAaC,sKAgBtB3H,KAAIyE,cACFzB,OAAMQ,sFAQCtD,UAAAuH,gBAAA,SAAsC5B,OAAAjC,GAAAvB,WAC/CW,OAAAQ,qHAMER,OAAOQ,uCACPqC,OAAOS,eAAAjD,IACPwC,OAAOU,iBAAA,IAGPqB,gBAAAvE,oEASJ,IAAIgE,kBAAiBrH,KAAAqH,kBACrBrH,KAAKwH,SAAA,KACLxH,KAAAqH,kBAAA,sCAEJR,eArIuC,0GCxKvC,IA+BEgB,WAAA,0CACE7H,KAAI8H,WAAA,EACFC,mEA2BiBC,KAAI,SAAgBC,UACvC,IAAAC,cAAiB,IAAAL,kBACjBM,cAAWC,OAAApI,KACXmI,cAAAA,SAAAA,uDA+H0B,SAAAZ,eAAA5E,MAAAmE,UAC1B,IAAMmB,SAAAjI,KAAAiI,SAEFI,KCrMR,SAAAC,eAAA3F,MAAAmE,aAUIwB,eAAA,IACEA,0BAAAnC,oCAIAmC,eAAAtB,2DAKFsB,gBAAA3F,OAAAmE,SAIJ,IAAAX,WAAAmC,eAAA3F,MAAAmE,gCD6KQyB,CAAAhB,eAAA5E,MAAAmE,aACFmB,8CAIE7C,IAAKpF,KAAAoI,QAAgBpF,OAAAQ,wCAAA6E,KAAA7B,mBACrBxG,KAAKwI,WAAAH,gCAKPrF,OAAAQ,uCACE6E,KAAK7B,qBACL6B,KAAI7B,oBAAsB,EACxB6B,KAAA9B,sJAcFvD,OAAAQ,wCACA6E,KAAK9B,iBAAA,4BE1Nb,SAAAkC,0BAGI,IAAIC,GAAAD,SAAAE,SAAqBD,GAAAnF,OAAAoD,YAAA+B,GAAA/B,YAAAF,UAAAiC,GAAAjC,aACvBkC,UAAYlC,4FAQlB,OAAA,EFiNQmC,CAAeP,+DAgCpBQ,QAAA,SAAAzG,KAAA0G,aAjBC,IAAAzC,MAAArG,gBAEA8I,YAAWC,eAAAD,uCAIT,IAAAvD,qFAKIyD,OAAA3F,KACEkC,mHAUR,IAAA6C,OAAapI,KAAIoI,+DAsBVlI,UAAAiI,YAAA,qEGhRXc,eHoTO,qEAEiB,IAAlBC,WAAkBvI,cGtTxBsI,gBAWc,IAAVA,IAAAtI,uBAIkBwI,sGH0TnBC,UAAA,SAAAN,aANC,IAAAzC,MAAArG,gBAEA8I,YAAWC,eAAAD,uCAET,IAAAzG,qIAlSKlC,OAAA,SAAA4H,wDAlBT,GAgUF,SACOgB,eAAAD,gBACHA,oDAIAA,qDAIJ,OAAAA,YIrVoE3F,MAAAjD,cCb1BmJ,kBAAA,SAAajD,gDAC/B,IAAAC,MAAAD,OAAAxF,KAAAZ,KAAA2G,cAAA3G,gDAGxB,OAHE+G,UAAAA,kBAAAA,QAGFsC,kBAJ0C,iBCExCC,iBAAA,+EAgBF,mEAXW,IAAAC,YAAAvJ,KAAwBuJ,YAE/BA,YAAAC,YACA,IAAMC,WAAA,IAAAC,mBAAAzC,WAAAsC,aAEFhE,aAAY6C,OAAAL,UAAA0B,mBACPA,WAAYlG,oEAKzB+F,iBAhBE,GAkBkCI,mBAAA,SAAatD,6DAK3B,IAAAC,MAAAD,OAAAxF,KAAAZ,KAAA2G,cAAA3G,gDAyDtB,OA1DE+G,UAAAA,mBAAAA,6DAQE,IAAIwC,YAAcvJ,KAAAuJ,eAChBA,aAKFvJ,KAAMuJ,YAAA,KACN,IAAII,SAAQJ,YAAAC,aACVG,UAAA,EACA3J,KAAA4J,WAAA,aAIFL,YAAYC,UAAAG,SAAA,EACV,EAAAA,SACA3J,KAAA4J,WAAA,UA4BF,IAAMA,WAAA5J,KAAA4J,WACFC,iBAAmBN,YAAAO,YAEvB9J,KAAI4J,WAAA,MACFC,kBAAgBD,YAAAC,mBAAAD,iDA7ChB5J,KAAA4J,WAAA,MAgDNF,mBA9DoC,aC6BpCK,iBAlD8C,SAAa3D,8DAQtC,IAAAC,MAAMD,OAAAxF,KAAAZ,OAAAA,YACHqG,MAAA+B,OAAAA,OANZ/B,MAAA2D,eAAsBA,eAGhC3D,MAAAmD,UAAA,6BAwCF,OAtCEzC,UAAAA,sBACsBX,8IAUAlG,UAAU+J,WAAA,WAC9B,IAAIC,QAAAlK,KAAAmK,gBACFD,UAAAA,QAAoBzD,sFAMLvG,UAAAkK,QAAA,WACjB,IAAIR,WAAa5J,KAAA8J,mBACfF,aACA5J,KAAAqK,aAAA,GACAT,WAAU5J,KAAA8J,YAAA,IAAAzF,kBACGrE,KAAIoI,iBACF,IAAAkC,sBAAAtK,KAAAiK,aAAAjK,QACb4J,WAAArG,QACAvD,KAAA8J,YAAA,6GASwBH,SAAA,8EAEhCY,sBA9C8C,aAkDwBrK,UAY/BoK,uBANrCP,iBAAsCvB,WACtCuB,iBAAsCM,YACtCN,iBAAAE,WACAF,iBAAmCK,kCAGE,SAAoBhE,gEAErC,IAAAC,MAAAD,OAAAxF,KAAAZ,KAAA2G,cAAA3G,gDAyBtB,OA1BE+G,UAAAA,sBAAAA,8BAKmB7G,UAAAiH,OAAA,SAAA9D,KACjBrD,KAAA2E,6EAGiBzE,UAAWkH,UAAA,WAC5BpH,KAAKuJ,YAAYc,aAAA,EACjBrK,KAAA2E,4EAGyBzE,UAAAyE,aAAA,WACzB,IAAI4E,YAAWvJ,KAAAuJ,eACbA,YAAA,CACAvJ,KAAMuJ,YAAA,KACN,IAAAK,WAAAL,YAAAO,YACAP,YAAYC,UAAA,EACZD,YAAYY,SAAW,KACvBZ,YAAAO,YAAA,KACEF,uCAIRU,sBA3BuC,CA6BvCjB,oBC/FA/D,MAmDgB,IAAAuC,WAAA,SAAAZ,YAAA,OAAAA,WAAAH,2CCnDsB0D,8GAGZA,MAAAhK,uBAG1ByG,WAAAH,aCXA,SAAA2D,UAAAtB,MAAAuB,sBAQe7C,WAHX6C,UAGW,SAAqBzD,YAC9B,IAAI9B,IAAM,IAAAd,aACN7D,EAAI,aACN4E,IAAIsF,UAAAC,SAAkB,WACpBnK,IAAA2I,MAAWxI,QAIbsG,WAAA7E,KAAgB+G,MAAM3I,MACpByG,WAAY1D,kCAJZ0D,WAAAH,4CCWgC3D,MAAAjD,UCzB1C,SAAA+D,IAyCkB2G,QAAAC,oCAEO,mBAAnBD,oJAOJE,YAAA,iDAAqE9K,KAAA4K,QAAAA,6BAMvE,mBAFW1K,UAAAU,KAAA,SAAAqG,WAAAmB,0FAEX0C,YANE,GAagCC,cAAA,SAAa3E,2CAOrCwE,QAAWC,SAFC,IAAAxE,MAAAD,OAAAxF,KAAuCZ,KAAA2G,cAAA3G,YAJ3DqG,MAAAuE,QAAkBA,QAOhBvE,MAAK2E,MAAA,qCAeT,OAnBEjE,UAAAA,cAAAA,sBAUiB7G,UAAAgH,MAAA,SAAA7E,OACf,IAAI4I,4FAIFjL,KAAA2G,YAAAhE,MAAAU,oCAIN0H,cAvBkC,aCxDSG,gBAAA,SAAa9E,4FAcxD,OAdAW,UAAAA,gBAAAA,kCAI0BoE,WAAU,SAAAC,WAAAC,WAAAC,WAAAC,WAAAC,uEAIVC,YAAA,SAAA9I,MAAA6I,kIAM1BN,gBAd2C,aCAAQ,gBAAA,SAAatF,wCAI7CgF,WAAAE,YADW,IAAAjF,MAAMD,OAAAxF,KAAAZ,OAAAA,YAAgCqG,MAAAR,OAAAA,OAAsBQ,MAAA+E,WAAAA,WAFxE/E,MAAAiF,WAAUA,+BAmBpB,OAjBEvE,UAAAA,gBAA0DX,wBAK5ClG,UAAUgH,MAAK,SAAa7E,wGAI5BnC,UAAAiH,OAAmB,SAAAxE,OAC/B3C,KAAK6F,OAAA4F,YAAA9I,MAAA3C,0CAIOE,UAAAkH,UAAmB,WAC/BpH,KAAK6F,OAAA8F,eAAA3L,0BAET0L,gBApB2C,aCJlCE,mBACC,SAAAC,yEAGF5E,WAAA1D,wDAMC,SAAUF,KAAA,OAAA4D,WAAAtE,MAAAU,OACnByI,KAAA,KAAAlE,iECbW,mBAAA1F,QAAAA,OAAAC,SAIXD,OAAAC,sBAOO,IAAMA,SAAA4J,oBCVbC,oBAAA,SAC2CC,UACzC,OAAA,SAAAhF,YAEE,IADA,IAAM9E,YAAAA,SAAoB+J,cAC1B,CACE,IAAAC,KAAWhK,YAAQC,OACnB,GAAA+J,KAAA7J,KAAA,gCAIA2E,WAAA7E,KAAA+J,KAAA9J,qCAOA,mBAAA+J,YAAAC,0FCXKC,sBAAwB,SAAAC,KACjC,OAAA,SAAAtF,YAEE,IAAAuF,IAAUD,IAAApE,wIAId,OAAAqE,IAAAzE,UAAAd,0GCfcwF,UAAApK,OACd,OAAAA,OAAA,mBAAAA,MAAA0F,WAAA,mBAAA1F,MAAAyJ,KCAA,IAAAY,YAAA,SAAAzB,WAaIA,kBAAApD,8CAEIoD,OAAAnD,WACAb,WAAW7E,KAAA6I,OAAW5I,YACtB4E,WAAAH,qDAMyB6F,0BAAAA,iPAS7B,IAAMtK,MAAAoB,SAAAwH,QAAsB,oBAAA,IAAAA,OAAA,4IC7BhC,SAAA2B,kBAcEC,gBAAA5B,OAAAG,WAAAE,WAAkE3E,aAKlE,QAHe,IAAXA,cACFA,YAAA,IAAA+E,gBAAAmB,gBAAAzB,WAAAE,cAEF3E,YAAApD,+CCvBF,SAAAuJ,KAkGkB3D,MAAAuB,eACdA,iBACEvB,iBAAAtB,uDAMF,MAAAsB,MAAA,ICvGJ,SACcA,OACd,OAAAA,OAAA,mBAAAA,MAAAhB,YDsGM4E,CAAA5D,cE3GN,SAAAA,MAAAuB,sBAUe7C,WAHX6C,UAGW,SAAqBzD,YAC9B,IAAI9B,IAAG,IAAAd,wBACLe,IAAMsF,UAAUC,SAA0B,WAC1C,IAAIxC,cAAAA,MAAAA,kBACF/C,IAAI+C,cAAAA,UAAU,CACd/F,KAAA,SAAAC,OAAA8C,IAAiBC,IAAIsF,UAAUC,SAAS,WAAA,OAAA1D,WAAiB7E,KAAMC,WAC/DM,MAAA,SAAAU,KAAa8B,IAAIC,IAAIsF,UAAUC,SAAS,WAAM,OAAA1D,WAAWtE,MAAAU,SACvDyD,SAAA,WAAA3B,IAAAC,IAAAsF,UAAAC,SAAA,WAAA,OAAA1D,WAAAH,qGChBZ,SAAAqC,MAAAuB,sBAQe7C,WAHX6C,UAGW,SAAqBzD,YAC9B,IAAI9B,IAAG,IAAAd,aAcb,WAZUe,IAAIsF,UAAAC,SAAA,6CAEFxF,IAAIC,IAAIsF,UAAUC,SAAS,sCAG5BvF,IAAAsF,UAAAC,SAAA,WAAA,OAAA1D,WAAAH,kBAGF,SAAAzD,SACQ+B,IAAAsF,UAAAC,SAAA,WAAA,OAAA1D,WAAAtE,MAAAU,aAGjB8B,iEHuFuBgE,4CI7GvB,SACyBA,OACzB,OAAAA,OAAA,mBAAAA,MAAAhH,mBJ6G4C,8BKhH5C,SAKcgH,MAAAuB,eACVvB,4DAMWtB,WAHX6C,UAGW,SAAqBzD,YAC9B,IACI9E,YADAgD,IAAA,IAAAd,wBAGFe,IAAI,WACFjD,aAAQ,mBAAAiK,YAAAC,mCAIVjH,IAAAsF,UAAAC,SAAA,WACAxI,YAAQgH,MAAS+C,gBACf9G,IAAIsF,UAAUC,SAAS,eACrB1D,WAAA1D,QAGF,IAAIlB,MACAC,SAEF,IAAA2I,OAAAmB,YAAqBhK,OACrBC,MAAA4I,OAAc5I,8CAGd4E,WAAAtE,MAAAU,KAGAf,4BAGA2E,WAAA7E,KAAgBC,kFL6E5B,MAAA,IAAA2K,WAAA,OAAA7D,cAAAA,OAAAA,OAAA,0BM0DuC8D,mBAAA,SAAqB7G,yDAMtC,IAAAC,MAAAD,OAAAxF,KAAkCZ,KAAA2G,cAAA3G,KAL9CqG,MAAA6G,QAAAA,QAEA7G,MAAA8G,UAAA,EAMN9G,MAAA+G,WAAA,EACA,IAAAvI,IAAAqI,QAAAvM,OAEA0F,MAAKgH,OAAA,IAAA5N,MAAoBoF,iBACXrE,EAAGqE,IAAQrE,IAAG,CAC1B,IAEI8M,kBAAiBV,kBAAAvG,MAFf6G,QAAiB1M,GAEF,KAAAA,GACnB8M,6DAoCR,OAhDEvG,UAAAA,mBAAAA,+GAqBE/G,KAAMqN,OAAA/B,YAA0BD,WAC7BG,SAAiB+B,YAClB/B,SAAA+B,WAAkB,yCAKZrN,UAAAyL,eAAA,SAAAH,UACR,IAAM7E,YAAA3G,KAAA2G,YAAAyG,WAAApN,KAAAoN,WAAAC,OAAArN,KAAAqN,OAEFxI,IAAAwI,OAAA1M,OACF6K,SAAA+B,WAMFvN,KAAImN,YACFnN,KAAAmN,YAAAtI,MAIAuI,aAAAvI,uDAVA8B,YAAAG,YAeNmG,mBArDuC,kBC9KvC,ICOIO,KAAmB,KAEvB,SAAgBC,SACd,OAAOD,KAoBT,ICgCIE,aC/CJC,yBAAA,SAAAvH,QAGE,SAAAuH,2BAAA,IAAAtH,MACED,OAAAxF,KAAAZ,OAAOA,KAHDqG,MAAAuH,iBAAgC,KAChCvH,MAAAwH,eAA8B,KAGpC,IACE,IAAMC,UAAUzH,MAAK0H,cAAc,MAAOC,UAC1C,GAA+C,MAA3C3H,MAAK4H,SAASH,UAAS,iBACzBzH,MAAKuH,iBAAmB,QAIxB,IAFA,IAAMM,YAAc,CAAC,SAAU,MAAO,IAAK,MAElC1N,EAAI,EAAGA,EAAI0N,YAAYvN,OAAQH,IACtC,GAAgE,MAA5D6F,MAAK4H,SAASH,UAASI,YAAY1N,GAAK,iBAA0B,CACpE6F,MAAKuH,iBAAmB,IAAMM,YAAY1N,GAAG2N,cAAgB,IAC7D,MAKN,IAAMC,qBAA8C,CAClDC,iBAAkB,sBAClBC,cAAe,gBACfC,YAAa,gCACbC,WAAY,iBAGdlP,OAAOmP,KAAKL,sBAAoBvF,QAAQ,SAAC7H,KACJ,MAA/BqF,MAAK4H,SAASH,UAAS9M,OACzBqF,MAAKwH,eAAiBO,qBAAmBpN,QAG7C,MAAOwB,GACP6D,MAAKuH,iBAAmB,KACxBvH,MAAKwH,eAAiB,kBAiB5B,OAnDuD9G,UAAAA,yBAAAA,QAsCrD4G,yBAAAzN,UAAAwO,oBAAA,SAAoBC,IAA2B,OAAaA,GAAID,uBAChEf,yBAAAzN,UAAA0O,kBAAA,SAAkBD,GAAuBE,QAAiBC,MACxDH,GAAGG,KAAe,MAARA,KAAeD,QAAUA,QAAU,OAASC,MAExDnB,yBAAAzN,UAAA6O,kBAAA,WAA+B,OAAO,GACtCpB,yBAAAzN,UAAA8O,wBAAA,WACE,MAAuD,mBAApChB,SAASiB,KAAMC,kBAEpCvB,yBAAAzN,UAAAiP,mBAAA,WAA+B,OAAOnP,KAAK4N,iBAAmB5N,KAAK4N,iBAAmB,IACtFD,yBAAAzN,UAAAkP,iBAAA,WAA6B,OAAOpP,KAAK6N,eAAiB7N,KAAK6N,eAAiB,IAChFF,yBAAAzN,UAAAmP,kBAAA,WACE,OAAgC,MAAzBrP,KAAK4N,kBAAmD,MAAvB5N,KAAK6N,gBAEjDF,yBAnDA,CFeA,WAAA,SAAA2B,aACStP,KAAAuP,mBAAgC,KAkIzC,OAnHEjQ,OAAAiC,eAAI+N,WAAApP,UAAA,gBAAa,KAAjB,WAA+C,OAAOF,KAAKwP,oBAC3D,SAAkBnN,OAAkCrC,KAAKwP,eAAiBnN,uCAkH5EiN,WAnIA,IClBME,eAAiB,CACrBC,MAAS,YACTC,UAAa,YACbC,SAAY,WACZC,SAAY,YAMRC,QAAiC,CAGrCC,KAAM,YACNC,KAAM,MACNC,IAAQ,SACRC,IAAQ,SACRC,IAAO,SACPC,IAAO,SACPC,KAAQ,YACRC,MAAS,aACTC,GAAM,UACNC,KAAQ,YACRC,KAAQ,cACRC,OAAU,aACVC,IAAO,MAMHC,oBAAsB,CAC1BC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,IAAQ,IACRC,IAAQ;;;;;;;OAKNC,KAAAA,QAAa,OACflE,aAAekE,KAAAA,QAAa,KAAE1R,UAAU2R,UAAY,SAASC,MAC3D,SAA+C,GAArC9R,KAAK+R,wBAAwBD,SAW3C,IA0UIE,eA1UJC,kBAAA,SAAA7L,QAAA,SAAA6L,6EA4TA,OA5TuClL,UAAAA,kBAAAA,QACrCkL,kBAAA/R,UAAAgS,MAAA,SAAMC,cAAwB,MAAM,IAAIhP,MAAM,0BACvC8O,kBAAAG,YAAP,WDlEF,IAIkCC,QAAAA,QC8DS,IAAIJ,kBD7DxCzE,OACHA,KAAO6E,UC6DTJ,kBAAA/R,UAAAoS,YAAA,SAAYC,QAAenO,MAAyB,OAAOA,QAAQmO,SACnEN,kBAAA/R,UAAAsS,YAAA,SAAY7D,GAAUvK,KAAc/B,OAAoBsM,GAAIvK,MAAQ/B,OACpE4P,kBAAA/R,UAAAuS,YAAA,SAAY9D,GAAUvK,MAAqB,OAAauK,GAAIvK,OAC5D6N,kBAAA/R,UAAAwS,OAAA,SAAO/D,GAAUgE,WAAoBC,cAAoBlK,GAAMiG,IAAIgE,YAAWE,MAAAnK,GAAA9F,SAAIgQ,QAGlFX,kBAAA/R,UAAA4S,SAAA,SAASnQ,OACHoQ,OAAOC,UACLA,QAAQrQ,MACVqQ,QAAQrQ,MAAMA,OAEdqQ,QAAQC,IAAItQ,SAKlBsP,kBAAA/R,UAAA+S,IAAA,SAAItQ,OACEoQ,OAAOC,SACTD,OAAOC,QAAQC,KAAOF,OAAOC,QAAQC,IAAItQ,QAI7CsP,kBAAA/R,UAAAgT,SAAA,SAASvQ,OACHoQ,OAAOC,SACTD,OAAOC,QAAQG,OAASJ,OAAOC,QAAQG,MAAMxQ,QAIjDsP,kBAAA/R,UAAAkT,YAAA,WACML,OAAOC,SACTD,OAAOC,QAAQK,UAAYN,OAAOC,QAAQK,YAI9C/T,OAAAiC,eAAI0Q,kBAAA/R,UAAA,gBAAa,KAAjB,WAA2B,OAAOsP,gDAElCyC,kBAAA/R,UAAA2R,SAAA,SAASyB,MAAYC,OAAuB,OAAO7F,aAAa9M,KAAK0S,MAAOC,QAC5EtB,kBAAA/R,UAAAsT,cAAA,SAAc7E,GAAiB8E,UAAyB,OAAO9E,GAAG6E,cAAcC,WAChFxB,kBAAA/R,UAAAwT,iBAAA,SAAiB/E,GAAS8E,UAA2B,OAAO9E,GAAG+E,iBAAiBD,WAChFxB,kBAAA/R,UAAAyT,GAAA,SAAGhF,GAAUiF,IAAUC,UAAiBlF,GAAGmF,iBAAiBF,IAAKC,UAAU,IAC3E5B,kBAAA/R,UAAA6T,YAAA,SAAYpF,GAAUiF,IAAUC,UAI9B,OAHAlF,GAAGmF,iBAAiBF,IAAKC,UAAU,GAG5B,WAAQlF,GAAGqF,oBAAoBJ,IAAKC,UAAU,KAEvD5B,kBAAA/R,UAAA+T,cAAA,SAActF,GAAUiF,KAAYjF,GAAGsF,cAAcL,MACrD3B,kBAAA/R,UAAAgU,iBAAA,SAAiBC,WACf,IAAMP,IAAkB5T,KAAKoU,qBAAqBC,YAAY,cAE9D,OADAT,IAAIU,UAAUH,WAAW,GAAM,GACxBP,KAET3B,kBAAA/R,UAAAmU,YAAA,SAAYF,WACV,IAAMP,IAAa5T,KAAKoU,qBAAqBC,YAAY,SAEzD,OADAT,IAAIU,UAAUH,WAAW,GAAM,GACxBP,KAET3B,kBAAA/R,UAAAqU,eAAA,SAAeX,KACbA,IAAIW,iBACJX,IAAIY,aAAc,GAEpBvC,kBAAA/R,UAAAuU,YAAA,SAAYb,KACV,OAAOA,IAAIc,kBAAuC,MAAnBd,IAAIY,cAAwBZ,IAAIY,aAEjEvC,kBAAA/R,UAAAyU,aAAA,SAAahG,IAA2B,OAAOA,GAAGiG,WAClD3C,kBAAA/R,UAAA2U,mBAAA,SAAmBlG,IACjB,MAAO,YAAaA,IAAM3O,KAAK8U,kBAAkBnG,IAAYA,GAAIoG,QAAU,MAE7E9C,kBAAA/R,UAAA8U,aAAA,SAAarG,IAA2B,OAAOA,GAAGsG,WAClDhD,kBAAA/R,UAAAgV,SAAA,SAASpD,MAAsB,OAAOA,KAAKoD,UAC3CjD,kBAAA/R,UAAAiV,UAAA,SAAUrD,MAA2B,OAAOA,KAAKqD,WACjDlD,kBAAA/R,UAAAkV,KAAA,SAAKtD,MAAkC,OAAOA,KAAKsD,MACnDnD,kBAAA/R,UAAA6U,QAAA,SAAQjD,MACN,OAAI9R,KAAKsS,YAAYR,KAAM,WACZA,KAAMiD,QAEZjD,MAGXG,kBAAA/R,UAAAmV,WAAA,SAAW1G,IAAuB,OAAOA,GAAG0G,YAC5CpD,kBAAA/R,UAAAoV,YAAA,SAAY3G,IAAuB,OAAOA,GAAG2G,aAC7CrD,kBAAA/R,UAAAqV,cAAA,SAAc5G,IAAuB,OAAOA,GAAG6G,YAC/CvD,kBAAA/R,UAAAuV,WAAA,SAAW9G,IAAmB,OAAOA,GAAG8G,YACxCxD,kBAAA/R,UAAAwV,iBAAA,SAAiB/G,IAGf,IAFA,IAAM8G,WAAa9G,GAAG8G,WAChBE,IAAM,IAAIlW,MAAMgW,WAAW9U,QACxBH,EAAI,EAAGA,EAAIiV,WAAW9U,OAAQH,IACrCmV,IAAInV,GAAKiV,WAAWjV,GAEtB,OAAOmV,KAET1D,kBAAA/R,UAAA0V,WAAA,SAAWjH,IACT,KAAOA,GAAG0G,YACR1G,GAAGkH,YAAYlH,GAAG0G,aAGtBpD,kBAAA/R,UAAA4V,YAAA,SAAYnH,GAAUmD,MAAcnD,GAAGmH,YAAYhE,OACnDG,kBAAA/R,UAAA2V,YAAA,SAAYlH,GAAUmD,MAAcnD,GAAGkH,YAAY/D,OACnDG,kBAAA/R,UAAA6V,aAAA,SAAapH,GAAUqH,SAAgBC,UAAkBtH,GAAGoH,aAAaC,SAAUC,WACnFhE,kBAAA/R,UAAA4E,OAAA,SAAOgN,MAIL,OAHIA,KAAK0D,YACP1D,KAAK0D,WAAWK,YAAY/D,MAEvBA,MAETG,kBAAA/R,UAAAgW,aAAA,SAAarQ,OAAcsQ,IAAWrE,MAAcjM,OAAOqQ,aAAapE,KAAMqE,MAC9ElE,kBAAA/R,UAAAkW,gBAAA,SAAgBvQ,OAAcsQ,IAAWE,OACvCA,MAAMxN,QAAQ,SAACpI,GAAW,OAAAoF,OAAOqQ,aAAazV,EAAG0V,QAEnDlE,kBAAA/R,UAAAoW,YAAA,SAAYzQ,OAAcsQ,IAAWrE,MAAajM,OAAOqQ,aAAapE,KAAMqE,IAAIb,cAChFrD,kBAAA/R,UAAAqW,aAAA,SAAa5H,GAAatM,OAAiBsM,GAAGiG,UAAYvS,OAC1D4P,kBAAA/R,UAAAsW,QAAA,SAAQ7H,IAAyB,OAAOA,GAAG8H,aAC3CxE,kBAAA/R,UAAAwW,QAAA,SAAQ/H,GAAUtM,OAAiBsM,GAAG8H,YAAcpU,OACpD4P,kBAAA/R,UAAAyW,SAAA,SAAShI,IAAmB,OAAOA,GAAGtM,OACtC4P,kBAAA/R,UAAA0W,SAAA,SAASjI,GAAStM,OAAiBsM,GAAGtM,MAAQA,OAC9C4P,kBAAA/R,UAAA2W,WAAA,SAAWlI,IAAoB,OAAOA,GAAGmI,SACzC7E,kBAAA/R,UAAA6W,WAAA,SAAWpI,GAAStM,OAAkBsM,GAAGmI,QAAUzU,OACnD4P,kBAAA/R,UAAA8W,cAAA,SAAcC,MAAyB,OAAOjX,KAAKoU,qBAAqB4C,cAAcC,OACtFhF,kBAAA/R,UAAAgX,eAAA,SAAeC,MACb,IAAM7W,EAAIN,KAAKoU,qBAAqBrG,cAAc,YAElD,OADAzN,EAAEsU,UAAYuC,KACP7W,GAET2R,kBAAA/R,UAAA6N,cAAA,SAAcqJ,QAAiBC,KAE7B,OADAA,IAAMA,KAAOrX,KAAKoU,sBACPrG,cAAcqJ,UAE3BnF,kBAAA/R,UAAAoX,gBAAA,SAAgBC,GAAYH,QAAiBC,KAE3C,OADAA,IAAMA,KAAOrX,KAAKoU,sBACPkD,gBAAgBC,GAAIH,UAEjCnF,kBAAA/R,UAAAsX,eAAA,SAAeP,KAAcI,KAE3B,OADAA,IAAMA,KAAOrX,KAAKoU,sBACPoD,eAAeP,OAE5BhF,kBAAA/R,UAAAuX,gBAAA,SAAgBC,SAAkBC,UAAmBN,KAEnD,IAAM1I,IADN0I,IAAMA,KAAOrX,KAAKoU,sBACgBrG,cAAc,UAEhD,OADAY,GAAGiJ,aAAaF,SAAUC,WACnBhJ,IAETsD,kBAAA/R,UAAA2X,mBAAA,SAAmBC,IAAaT,KAE9B,IAAMU,OADNV,IAAMA,KAAOrX,KAAKoU,sBACkBrG,cAAc,SAElD,OADA/N,KAAK8V,YAAYiC,MAAO/X,KAAKwX,eAAeM,IAAKT,MAC1CU,OAET9F,kBAAA/R,UAAAgP,iBAAA,SAAiBP,IAAqC,OAAaA,GAAIO,oBACvE+C,kBAAA/R,UAAA8X,cAAA,SAAcrJ,IAAqC,OAAaA,GAAIsJ,YACpEhG,kBAAA/R,UAAAgY,QAAA,SAAQvJ,IAAgC,OAAaA,GAAIwJ,MACzDlG,kBAAA/R,UAAAkY,MAAA,SAAMtG,MAAoB,OAAOA,KAAKuG,WAAU,IAChDpG,kBAAA/R,UAAAoY,uBAAA,SAAuB/F,QAAcnO,MACnC,OAAOmO,QAAQ+F,uBAAuBlU,OAExC6N,kBAAA/R,UAAAqY,qBAAA,SAAqBhG,QAAcnO,MACjC,OAAOmO,QAAQgG,qBAAqBnU,OAEtC6N,kBAAA/R,UAAAsY,UAAA,SAAUjG,SAAuB,OAAO9S,MAAMS,UAAUuY,MAAM7X,KAAK2R,QAAQiG,UAAW,IACtFvG,kBAAA/R,UAAAwY,SAAA,SAASnG,QAAcoG,WAAqBpG,QAAQiG,UAAUpT,IAAIuT,YAClE1G,kBAAA/R,UAAA0Y,YAAA,SAAYrG,QAAcoG,WAAqBpG,QAAQiG,UAAU1T,OAAO6T,YACxE1G,kBAAA/R,UAAA2Y,SAAA,SAAStG,QAAcoG,WACrB,OAAOpG,QAAQiG,UAAU3G,SAAS8G,YAEpC1G,kBAAA/R,UAAA4Y,SAAA,SAASvG,QAAcwG,UAAmBC,YACxCzG,QAAQwF,MAAMgB,WAAaC,YAE7B/G,kBAAA/R,UAAA+Y,YAAA,SAAY1G,QAAc2G,WAGxB3G,QAAQwF,MAAMmB,WAAa,IAE7BjH,kBAAA/R,UAAA+N,SAAA,SAASsE,QAAc2G,WAA6B,OAAO3G,QAAQwF,MAAMmB,YACzEjH,kBAAA/R,UAAAiZ,SAAA,SAAS5G,QAAcwG,UAAmBC,YACxC,IAAM3W,MAAQrC,KAAKiO,SAASsE,QAASwG,YAAc,GACnD,OAAOC,WAAa3W,OAAS2W,WAA4B,EAAf3W,MAAM1B,QAElDsR,kBAAA/R,UAAAkX,QAAA,SAAQ7E,SAAwB,OAAOA,QAAQ6E,SAC/CnF,kBAAA/R,UAAAkZ,aAAA,SAAa7G,SAGX,IAFA,IAAMoD,IAAM,IAAI0D,IACVC,QAAU/G,QAAQgH,WACf/Y,EAAI,EAAGA,EAAI8Y,QAAQ3Y,OAAQH,IAAK,CACvC,IAAMgZ,OAASF,QAAQnN,KAAK3L,GAC5BmV,IAAI8D,IAAID,OAAOpV,KAAMoV,OAAOnX,OAE9B,OAAOsT,KAET1D,kBAAA/R,UAAAwZ,aAAA,SAAanH,QAAkBoH,WAC7B,OAAOpH,QAAQmH,aAAaC,YAE9B1H,kBAAA/R,UAAA0Z,eAAA,SAAerH,QAAkBgF,GAAYoC,WAC3C,OAAOpH,QAAQqH,eAAerC,GAAIoC,YAEpC1H,kBAAA/R,UAAA2Z,aAAA,SAAatH,QAAkBoH,WAC7B,OAAOpH,QAAQsH,aAAaF,YAE9B1H,kBAAA/R,UAAA4Z,eAAA,SAAevH,QAAkBgF,GAAYnT,MAC3C,OAAOmO,QAAQuH,eAAevC,GAAInT,OAEpC6N,kBAAA/R,UAAA0X,aAAA,SAAarF,QAAkBnO,KAAc/B,OAAiBkQ,QAAQqF,aAAaxT,KAAM/B,QACzF4P,kBAAA/R,UAAA6Z,eAAA,SAAexH,QAAkBgF,GAAYnT,KAAc/B,OACzDkQ,QAAQwH,eAAexC,GAAInT,KAAM/B,QAEnC4P,kBAAA/R,UAAA8Z,gBAAA,SAAgBzH,QAAkBoH,WAAqBpH,QAAQyH,gBAAgBL,YAC/E1H,kBAAA/R,UAAA+Z,kBAAA,SAAkB1H,QAAkBgF,GAAYnT,MAC9CmO,QAAQ0H,kBAAkB1C,GAAInT,OAEhC6N,kBAAA/R,UAAAga,kBAAA,SAAkBvL,IAAiB,OAAO3O,KAAK8U,kBAAkBnG,IAAM3O,KAAK+U,QAAQpG,IAAMA,IAC1FsD,kBAAA/R,UAAAia,mBAAA,WACE,OAAOnM,SAASoM,eAAeC,mBAAmB,cAEpDpI,kBAAA/R,UAAAkU,mBAAA,WAAiC,OAAOpG,UACxCiE,kBAAA/R,UAAAoa,sBAAA,SAAsB3L,IACpB,IACE,OAAOA,GAAG2L,wBACV,MAAO9X,GACP,MAAO,CAAC+X,IAAK,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,EAAGC,MAAO,EAAGC,OAAQ,KAGpE3I,kBAAA/R,UAAA2a,SAAA,SAASxD,KAAyB,OAAOA,IAAIyD,OAC7C7I,kBAAA/R,UAAA6a,SAAA,SAAS1D,IAAe2D,UAAoB3D,IAAIyD,MAAQE,UAAY,IACpE/I,kBAAA/R,UAAA+a,eAAA,SAAexa,EAAQgT,UACrB,QAAIzT,KAAKkb,cAAcza,KACdA,EAAE0a,SAAW1a,EAAE0a,QAAQ1H,WAC1BhT,EAAE2a,mBAAqB3a,EAAE2a,kBAAkB3H,WAC3ChT,EAAE4a,uBAAyB5a,EAAE4a,sBAAsB5H,YAK3DxB,kBAAA/R,UAAA4U,kBAAA,SAAkBnG,IAChB,OAAO3O,KAAKkb,cAAcvM,KAAuB,aAAhBA,GAAGuG,UAEtCjD,kBAAA/R,UAAAob,WAAA,SAAWxJ,MAAuB,OAAOA,KAAKyJ,WAAaC,KAAKC,WAChExJ,kBAAA/R,UAAAwb,cAAA,SAAc5J,MAAuB,OAAOA,KAAKyJ,WAAaC,KAAKG,cACnE1J,kBAAA/R,UAAAgb,cAAA,SAAcpJ,MAAuB,OAAOA,KAAKyJ,WAAaC,KAAKI,cACnE3J,kBAAA/R,UAAA2b,cAAA,SAAc/J,MACZ,OAA0B,MAAnBA,KAAKmG,YAAsBnG,gBAAgBgK,aAEpD7J,kBAAA/R,UAAA6b,aAAA,SAAajK,MAAsB,OAAOA,gBAAgBkK,kBAC1D/J,kBAAA/R,UAAA+b,cAAA,SAAcnK,MAAmB,OAAO9D,SAASkO,WAAWlc,KAAKka,kBAAkBpI,OAAO,IAC1FG,kBAAA/R,UAAAic,UAAA,SAAUrK,MAAmB,OAAO9D,SAASmO,UAAUrK,OACvDG,kBAAA/R,UAAAkc,QAAA,SAAQzN,IAAuB,OAAOA,GAAGkL,aAAa,SAEtD5H,kBAAA/R,UAAAmc,YAAA,SAAYC,OACV,IAAItb,IAAMsb,MAAMtb,IAChB,GAAW,MAAPA,IAAa,CAKf,GAAW,OAJXA,IAAMsb,MAAMC,eAKV,MAAO,eAELvb,IAAIwb,WAAW,QACjBxb,IAAMyb,OAAOC,aAAaC,SAAS3b,IAAI4b,UAAU,GAAI,KA3T7B,IA4TpBN,MAAMO,UAAwClM,oBAAoB9Q,eAAemB,OAInFA,IAAO2P,oBAA4B3P,OAKzC,OAAO6O,QAAQ7O,MAAQA,KAEzBiR,kBAAA/R,UAAA4c,qBAAA,SAAqBzF,IAAetW,QAClC,MAAe,WAAXA,OACKgS,OAEM,aAAXhS,OACKsW,IAEM,SAAXtW,OACKsW,IAAIpI,KAEN,MAETgD,kBAAA/R,UAAA6c,WAAA,WAAwB,OAAOhK,OAAOiK,SACtC/K,kBAAA/R,UAAA+c,YAAA,WAA0B,OAAOlK,OAAO8J,UACxC5K,kBAAA/R,UAAAgd,YAAA,SAAY7F,KACV,IAAMvI,KAmCV,WACE,IAAKqO,eACHA,YAAcnP,SAASwF,cAAc,SAEnC,OAAO,KAGX,OAAO2J,YAAYtD,aAAa,QA1CjBuD,GACb,OAAe,MAARtO,KAAe,KA8C1B,SAAsBuO,KACfrL,iBACHA,eAAiBhE,SAASD,cAAc,MAG1C,OADAiE,eAAe4F,aAAa,OAAQyF,KACU,MAAtCrL,eAAesL,SAASC,OAAO,GAAcvL,eAAesL,SACf,IAAMtL,eAAesL;;;;;;;OApD3CE,CAAa1O,OAE5CmD,kBAAA/R,UAAAud,iBAAA,WAA2BN,YAAc,MACzClL,kBAAA/R,UAAAwd,aAAA,WAAyB,OAAO3K,OAAO4K,UAAUC,WACjD3L,kBAAA/R,UAAA2d,QAAA,SAAQtL,QAAkBnO,KAAc/B,OACtCrC,KAAK4X,aAAarF,QAAS,QAAUnO,KAAM/B,QAE7C4P,kBAAA/R,UAAA4d,QAAA,SAAQvL,QAAkBnO,MACxB,OAAOpE,KAAK6Z,aAAatH,QAAS,QAAUnO,OAE9C6N,kBAAA/R,UAAA6d,iBAAA,SAAiBxL,SAAqB,OAAOwL,iBAAiBxL,UAE9DN,kBAAA/R,UAAA8d,qBAAA,WACE,MAAqD,mBAAlCC,QAAS/d,UAAmB,SAEjD+R,kBAAA/R,UAAAge,eAAA,WAGE,OAAOnL,OAAOoL,aAAepL,OAAOoL,YAAYC,IAAMrL,OAAOoL,YAAYC,OACnB,IAAIC,MAAOC,WAGnErM,kBAAA/R,UAAAqe,gBAAA,WAA6B,OAAO,GAEpCtM,kBAAA/R,UAAAse,UAAA,SAAUpa,MAA6B,OAAOqa,OAAAA,kBAAiBzQ,SAAS0Q,OAAQta,OAEhF6N,kBAAA/R,UAAAye,UAAA,SAAUva,KAAc/B,OAGtB2L,SAAS0Q,OAASE,mBAAmBxa,MAAQ,IAAMwa,mBAAmBvc,QAE1E4P,kBA5TA,CAAuCtE,0BA8TnCwP,YAAgC,KE1XpC,IAAa0B,WAAWC,OAAAA;;;;;;;OCZxB,SAAgBC,gBACd,QAAShM,OAAOiK,QAAQgC;;;;;;;OCe1B,IAAAC,wBAAA,SAAA7Y,QAME,SAAA6Y,wBAAsCC,MAAtC,IAAA7Y,MACED,OAAAxF,KAAAZ,OAAOA,YAD6BqG,MAAA6Y,KAAAA,KAEpC7Y,MAAK8Y,cA4CT,OApD6CpY,UAAAA,wBAAAA,QAa3CkY,wBAAA/e,UAAAif,MAAA,WACGnf,KAA6B6c,SAAWpP,SAASwP,cAClDjd,KAAKof,SAAW3R,SAASsP,cAG3BkC,wBAAA/e,UAAAmf,mBAAA,WAA+B,OAAO5R,SAASyP,YAAYld,KAAKkf,OAEhED,wBAAA/e,UAAAof,WAAA,SAAW1b,IACT6J,SAASqP,qBAAqB9c,KAAKkf,KAAM,UAAUpL,iBAAiB,WAAYlQ,IAAI,IAGtFqb,wBAAA/e,UAAAqf,aAAA,SAAa3b,IACX6J,SAASqP,qBAAqB9c,KAAKkf,KAAM,UAAUpL,iBAAiB,aAAclQ,IAAI,IAGxFtE,OAAAiC,eAAI0d,wBAAA/e,UAAA,WAAQ,KAAZ,WAAyB,OAAOF,KAAK6c,SAASS,cAG9C,SAAakC,SAAmBxf,KAAK6c,SAASS,SAAWkC,yCAFzDlgB,OAAAiC,eAAI0d,wBAAA/e,UAAA,SAAM,KAAV,WAAuB,OAAOF,KAAK6c,SAAS4C,wCAC5CngB,OAAAiC,eAAI0d,wBAAA/e,UAAA,OAAI,KAAR,WAAqB,OAAOF,KAAK6c,SAAS6C,sCAG1CT,wBAAA/e,UAAA8e,UAAA,SAAUW,MAAY7E,MAAeuC,KAC/B0B,gBACF/e,KAAKof,SAASJ,UAAUW,MAAO7E,MAAOuC,KAEtCrd,KAAK6c,SAAS6C,KAAOrC,KAIzB4B,wBAAA/e,UAAA0f,aAAA,SAAaD,MAAY7E,MAAeuC,KAClC0B,gBACF/e,KAAKof,SAASQ,aAAaD,MAAO7E,MAAOuC,KAEzCrd,KAAK6c,SAAS6C,KAAOrC,KAIzB4B,wBAAA/e,UAAA2f,QAAA,WAAkB7f,KAAKof,SAASS,WAEhCZ,wBAAA/e,UAAA4f,KAAA,WAAe9f,KAAKof,SAASU,QAnDlBb,wBAAuBpe,WAAA,CADnCkf,KAAAA,aAOcC,QAAAA,EAAAC,KAAAA,OAAOpB,uDANTI,yBAAb,CAA6CiB,OAAAA,kBCPhCC,cAAgB,IAAIC,KAAAA,eAAe;;;;;;;OAgBhD,IAAaC,4BAAgD,CAC3D,CACEC,QAASC,KAAAA,gBACTC,WAjBJ,SAAsCC,aAAsBzS,SAAe0S,UACzE,OAAO,WAGLA,SAASC,IAAIC,KAAAA,uBAAuBC,YAAY/U,KAAK,WACnD,IAAMgV,IAAMrT,SAERhO,MAAMS,UAAUuY,MAAM5F,MAAMiO,IAAIpN,iBAAiB1F,SAAU,yBACxD+S,OAAO,SAAApS,IAAM,OAAAmS,IAAIjH,aAAalL,GAAI,mBAAqB8R,eACzD5X,QAAQ,SAAA8F,IAAM,OAAAmS,IAAIhc,OAAO6J,UAShCqS,KAAM,CAACb,cAAetB,WAAUoC,KAAAA,UAChCC,OAAO,IC9BXC,sBAAA,WAIA,SAAAA,yBAsDA,OArDSA,sBAAAC,KAAP,WAAgBC,KAAAA,qBAAqB,IAAIF,wBAEzCA,sBAAAjhB,UAAAohB,YAAA,SAAYC,UACV3P,KAAAA,QAA8B,sBAAI,SAAC4P,KAAWC,sBAAA,IAAAA,kBAAAA,iBAAA,GAC5C,IAAMC,YAAcH,SAASI,sBAAsBH,KAAMC,iBACzD,GAAmB,MAAfC,YACF,MAAM,IAAIve,MAAM,2CAElB,OAAOue,aAGT9P,KAAAA,QAAmC,2BAAI,WAAM,OAAA2P,SAASK,uBAEtDhQ,KAAAA,QAAkC,0BAAI,WAAM,OAAA2P,SAASM,sBAkBhDjQ,KAAAA,QAA6B,uBAChCA,KAAAA,QAA6B,qBAAI,IAEnCA,KAAAA,QAA6B,qBAAElP,KAnBT,SAACof,UACrB,IAAMC,cAAgBnQ,KAAAA,QAAmC,6BACrD5G,MAAQ+W,cAAcphB,OACtBqhB,SAAU,EACRC,UAAY,SAASC,UACzBF,QAAUA,SAAWE,SAER,KADblX,OAEE8W,SAASE,UAGbD,cAAclZ,QAAQ,SAAS6Y,aAC7BA,YAAYS,WAAWF,gBAU7Bd,sBAAAjhB,UAAAyhB,sBAAA,SAAsBJ,SAA+BC,KAAWC,iBAE9D,GAAY,MAARD,KACF,OAAO,KAET,IAAMlhB,EAAIihB,SAASa,eAAeZ,MAClC,OAAS,MAALlhB,EACKA,EACGmhB,gBAGRhU,SAASsO,aAAayF,MACjBxhB,KAAK2hB,sBAAsBJ,SAAU9T,SAASyK,QAAQsJ,OAAO,GAE/DxhB,KAAK2hB,sBAAsBJ,SAAU9T,SAAS8H,cAAciM,OAAO,GALjE,MAObL,sBA1DA;;;;;;;;;;;;;;;ACqBA,SAAgBkB,YAAYje,KAAc/B,OAChB,oBAAbigB,UAA6BA,YAK3B1Q,KAAAA,QAAW,GAAKA,KAAAA,QAAW,IAAyC,IAC5ExN,MAAQ/B;;;;;;;OCzBf,IAAMkgB,YAAc,CAClBC,eAAkBC,KAAAA,eAClBC,OAAUC,KAAAA,QAWZ,SAAgBC,qBAAqBrQ,SACnC,OAAOsQ,KAAAA,aAAkBtQ,SAgB3B,IAAauQ,wBAA2C,CACtD,CACExC,QAASyC,KAAAA,gBACTvC,WAhBJ,SAA+BwC,YAG7B,OAFAX,YAb0B,QAaOO,sBACjCP,YAb8B,aAaKjiB,SAAA,GAAMmiB,aAAoCS,YAAc,IAK7Ejd,OAAO,SAACkd,KAAW3iB,GAAW,OAAC2iB,KAAK3iB,EAAE8D,MAAQ9D,EAAE4iB,MAAOD,MAAO,MAJrE,WAAM,OAAAL,uBAcX5B,KAAM,CACJ,CAACmC,KAAAA,aAAmB,IAAIC,KAAAA,WAE1BlC,OAAO,ICjCEmC,sBACT,IAAIjD,KAAAA,eAAqC,uBAO7CkD,aAAA,WAOE,SAAAA,aAA2CC,QAAuCC,OAAlF,IAAAnd,MAAArG,KAAkFA,KAAAwjB,MAAAA,MAL1ExjB,KAAAyjB,mBAAqB,IAAIpK,IAM/BkK,QAAQ1a,QAAQ,SAAAjJ,GAAK,OAAAA,EAAE8jB,QAAUrd,QACjCrG,KAAK2jB,SAAWJ,QAAQ9K,QAAQmL,UAqDpC,OAzCEN,aAAApjB,UAAA4T,iBAAA,SAAiBvB,QAAsBsR,UAAmBC,SAExD,OADe9jB,KAAK+jB,eAAeF,WACrB/P,iBAAiBvB,QAASsR,UAAWC,UAYrDR,aAAApjB,UAAA8jB,uBAAA,SAAuBjjB,OAAgB8iB,UAAmBC,SAExD,OADe9jB,KAAK+jB,eAAeF,WACrBG,uBAAuBjjB,OAAQ8iB,UAAWC,UAM1DR,aAAApjB,UAAA+jB,QAAA,WAAoB,OAAOjkB,KAAKwjB,OAGhCF,aAAApjB,UAAA6jB,eAAA,SAAeF,WACb,IAAMK,OAASlkB,KAAKyjB,mBAAmB9C,IAAIkD,WAC3C,GAAIK,OACF,OAAOA,OAIT,IADA,IAAMX,QAAUvjB,KAAK2jB,SACZnjB,EAAI,EAAGA,EAAI+iB,QAAQ5iB,OAAQH,IAAK,CACvC,IAAM2jB,SAASZ,QAAQ/iB,GACvB,GAAI2jB,SAAOC,SAASP,WAElB,OADA7jB,KAAKyjB,mBAAmBhK,IAAIoK,UAAWM,UAChCA,SAGX,MAAM,IAAIhhB,MAAM,2CAA2C0gB,YA5DlDP,aAAYziB,WAAA,CADxBkf,KAAAA,aAQcC,QAAAA,EAAAC,KAAAA,OAAOoD,8DAAqEX,KAAAA,UAP9EY,cAAb,iCAiEE,SAAAe,mBAAoBnF,MAAAlf,KAAAkf,KAAAA,KAgBtB,OAPEmF,mBAAAnkB,UAAA8jB,uBAAA,SAAuBzR,QAAiBsR,UAAmBC,SACzD,IAAM/iB,OAAsB0M,SAASqP,qBAAqB9c,KAAKkf,KAAM3M,SACrE,IAAKxR,OACH,MAAM,IAAIoC,MAAM,4BAA4BpC,OAAM,cAAc8iB,WAElE,OAAO7jB,KAAK8T,iBAAiB/S,OAAQ8iB,UAAWC,UAEpDO,kDC5FA,SAAAC,mBAGYtkB,KAAAukB,WAAa,IAAIC,IAgB7B,OAdEF,iBAAApkB,UAAAukB,UAAA,SAAUC,QAAV,IAAAre,MAAArG,KACQ2kB,UAAY,IAAIH,IACtBE,OAAO7b,QAAQ,SAAAkP,OACR1R,MAAKke,WAAWK,IAAI7M,SACvB1R,MAAKke,WAAWnf,IAAI2S,OACpB4M,UAAUvf,IAAI2S,UAGlB/X,KAAK6kB,cAAcF,YAGrBL,iBAAApkB,UAAA2kB,cAAA,SAAcF,aAEdL,iBAAApkB,UAAA4kB,aAAA,WAA2B,OAAOrlB,MAAMqN,KAAK9M,KAAKukB,aAjBvCD,iBAAgBzjB,WAAA,CAD5Bkf,KAAAA,cACYuE,0DAwBX,SAAAS,oBAAsC7F,MAAtC,IAAA7Y,MACED,OAAAxF,KAAAZ,OAAOA,YAD6BqG,MAAA6Y,KAAAA,KAF9B7Y,MAAA2e,WAAa,IAAIR,IACjBne,MAAA4e,YAAc,IAAIT,IAGxBne,MAAK2e,WAAW5f,IAAI8Z,KAAKgG,YAuB7B,OA5ByCne,UAAAA,oBAAAA,QAQ/Bge,oBAAA7kB,UAAAilB,iBAAR,SAAyBT,OAAqBvM,MAA9C,IAAA9R,MAAArG,KACE0kB,OAAO7b,QAAQ,SAACkP,OACd,IAAMqN,QAAU/e,MAAK6Y,KAAKnR,cAAc,SACxCqX,QAAQ3O,YAAcsB,MACtB1R,MAAK4e,YAAY7f,IAAI+S,KAAKrC,YAAYsP,aAI1CL,oBAAA7kB,UAAAmlB,QAAA,SAAQC,UACNtlB,KAAKmlB,iBAAiBnlB,KAAKukB,WAAYe,UACvCtlB,KAAKglB,WAAW5f,IAAIkgB,WAGtBP,oBAAA7kB,UAAAqlB,WAAA,SAAWD,UAAwBtlB,KAAKglB,WAAWQ,OAAOF,WAE1DP,oBAAA7kB,UAAA2kB,cAAA,SAAcF,WAAd,IAAAte,MAAArG,KACEA,KAAKglB,WAAWnc,QAAQ,SAAAyc,UAAY,OAAAjf,MAAK8e,iBAAiBR,UAAWW,aAGvEP,oBAAA7kB,UAAAulB,YAAA,WAAsBzlB,KAAKilB,YAAYpc,QAAQ,SAAA6c,WAAa,OAAAjY,SAAS3I,OAAO4gB,cA3BjEX,oBAAmBlkB,WAAA,CAD/Bkf,KAAAA,aAIcC,QAAAA,EAAAC,KAAAA,OAAOpB,uDAHTkG,sBAA4BT,kBCrB5BqB,eAAyC,CACpDC,IAAO,6BACPC,MAAS,+BACTC,MAAS,+BACTC,IAAO,uCACPC,MAAS,iCAGLC,gBAAkB,UAEXC,UAAY,iBACZC,aAAe;;;;;;;OAU5B,SAAgBC,cACZC,OAAgB3B,OAA0B3jB,QAC5C,IAAK,IAAIP,EAAI,EAAGA,EAAIkkB,OAAO/jB,OAAQH,IAAK,CACtC,IAAIuX,MAAQ2M,OAAOlkB,GAEff,MAAMyF,QAAQ6S,OAChBqO,cAAcC,OAAQtO,MAAOhX,SAE7BgX,MAAQA,MAAMuO,QAAQL,gBAAiBI,QACvCtlB,OAAO2B,KAAKqV,QAGhB,OAAOhX,OAGT,SAASwlB,uBAAuBC,cAC9B,OAAO,SAAClK,QAEuB,IADAkK,aAAalK,SAGxCA,MAAM/H,iBACN+H,MAAM9H,aAAc,IAM1B,IAAAiS,oBAAA,WAIE,SAAAA,oBAAoBC,aAAoCC,kBAApC3mB,KAAA0mB,aAAAA,aAAoC1mB,KAAA2mB,iBAAAA,iBAHhD3mB,KAAA4mB,iBAAmB,IAAIvN,IAI7BrZ,KAAK6mB,gBAAkB,IAAIC,oBAAoBJ,cAkCnD,OA/BED,oBAAAvmB,UAAA6mB,eAAA,SAAexU,QAAc6C,MAC3B,IAAK7C,UAAY6C,KACf,OAAOpV,KAAK6mB,gBAEd,OAAQzR,KAAK4R,eACX,KAAKC,KAAAA,kBAAkBC,SACrB,IAAIC,SAAWnnB,KAAK4mB,iBAAiBjG,IAAIvL,KAAKgS,IAO9C,OANKD,WACHA,SACI,IAAIE,kCAAkCrnB,KAAK0mB,aAAc1mB,KAAK2mB,iBAAkBvR,MACpFpV,KAAK4mB,iBAAiBnN,IAAIrE,KAAKgS,GAAID,WAEDA,SAAUG,YAAY/U,SACnD4U,SAET,KAAKF,KAAAA,kBAAkBM,OACvB,KAAKN,KAAAA,kBAAkBO,UACrB,OAAO,IAAIC,kBAAkBznB,KAAK0mB,aAAc1mB,KAAK2mB,iBAAkBpU,QAAS6C,MAClF,QACE,IAAKpV,KAAK4mB,iBAAiBhC,IAAIxP,KAAKgS,IAAK,CACvC,IAAM1C,OAAS0B,cAAchR,KAAKgS,GAAIhS,KAAKsP,OAAQ,IACnD1kB,KAAK2mB,iBAAiBlC,UAAUC,QAChC1kB,KAAK4mB,iBAAiBnN,IAAIrE,KAAKgS,GAAIpnB,KAAK6mB,iBAE1C,OAAO7mB,KAAK6mB,kBAKlBJ,oBAAAvmB,UAAAwnB,MAAA,aACAjB,oBAAAvmB,UAAAynB,IAAA,aAtCWlB,oBAAmB5lB,WAAA,CAD/Bkf,KAAAA,6CAKmCuD,aAAwCyB,uBAJ/D0B,qBAAb,GAyCAK,oBAAA,WAGE,SAAAA,oBAAoBJ,cAAA1mB,KAAA0mB,aAAAA,aAFpB1mB,KAAA4nB,KAA6BtoB,OAAOa,OAAO,MAqH7C,OAjHE2mB,oBAAA5mB,UAAA2nB,QAAA,aAIAf,oBAAA5mB,UAAA6N,cAAA,SAAc3J,KAAc0jB,WAC1B,OAAIA,UACK9Z,SAASsJ,gBAAgBqO,eAAemC,WAAY1jB,MAGtD4J,SAASD,cAAc3J,OAGhC0iB,oBAAA5mB,UAAA8W,cAAA,SAAc3U,OAAsB,OAAO2L,SAASgJ,cAAc3U,QAElEykB,oBAAA5mB,UAAA6nB,WAAA,SAAW1lB,OAAsB,OAAO2L,SAASwJ,eAAenV,QAEhEykB,oBAAA5mB,UAAA4V,YAAA,SAAYjQ,OAAamQ,UAAuBnQ,OAAOiQ,YAAYE,WAEnE8Q,oBAAA5mB,UAAAgW,aAAA,SAAarQ,OAAamQ,SAAegS,UACnCniB,QACFA,OAAOqQ,aAAaF,SAAUgS,WAIlClB,oBAAA5mB,UAAA2V,YAAA,SAAYhQ,OAAaoQ,UACnBpQ,QACFA,OAAOgQ,YAAYI,WAIvB6Q,oBAAA5mB,UAAA+nB,kBAAA,SAAkBC,eAA4BC,iBAC5C,IAAIxZ,GAAoC,iBAAnBuZ,eAA8Bla,SAASwF,cAAc0U,gBACvBA,eACnD,IAAKvZ,GACH,MAAM,IAAIxL,MAAM,iBAAiB+kB,eAAc,gCAKjD,OAHKC,kBACHxZ,GAAG8H,YAAc,IAEZ9H,IAGTmY,oBAAA5mB,UAAAsV,WAAA,SAAW1D,MAAkB,OAAOA,KAAK0D,YAEzCsR,oBAAA5mB,UAAAoV,YAAA,SAAYxD,MAAkB,OAAOA,KAAKwD,aAE1CwR,oBAAA5mB,UAAA0X,aAAA,SAAajJ,GAASvK,KAAc/B,MAAeylB,WACjD,GAAIA,UAAW,CACb1jB,KAAU0jB,UAAS,IAAI1jB,KACvB,IAAMgkB,aAAezC,eAAemC,WAChCM,aACFzZ,GAAGoL,eAAeqO,aAAchkB,KAAM/B,OAEtCsM,GAAGiJ,aAAaxT,KAAM/B,YAGxBsM,GAAGiJ,aAAaxT,KAAM/B,QAI1BykB,oBAAA5mB,UAAA8Z,gBAAA,SAAgBrL,GAASvK,KAAc0jB,WACrC,GAAIA,UAAW,CACb,IAAMM,aAAezC,eAAemC,WAChCM,aACFzZ,GAAGsL,kBAAkBmO,aAAchkB,MAEnCuK,GAAGqL,gBAAmB8N,UAAS,IAAI1jB,WAGrCuK,GAAGqL,gBAAgB5V,OAIvB0iB,oBAAA5mB,UAAAwY,SAAA,SAAS/J,GAASvK,MAAsBuK,GAAG6J,UAAUpT,IAAIhB,OAEzD0iB,oBAAA5mB,UAAA0Y,YAAA,SAAYjK,GAASvK,MAAsBuK,GAAG6J,UAAU1T,OAAOV,OAE/D0iB,oBAAA5mB,UAAA4Y,SAAA,SAASnK,GAASoJ,MAAe1V,MAAYgmB,OACvCA,MAAQC,KAAAA,oBAAoBC,SAC9B5Z,GAAGoJ,MAAMvF,YACLuF,MAAO1V,MAAUgmB,MAAQC,KAAAA,oBAAoBE,UAAa,YAAc,IAE5E7Z,GAAGoJ,MAAMA,OAAS1V,OAItBykB,oBAAA5mB,UAAA+Y,YAAA,SAAYtK,GAASoJ,MAAesQ,OAC9BA,MAAQC,KAAAA,oBAAoBC,SAC9B5Z,GAAGoJ,MAAM0Q,eAAe1Q,OAIxBpJ,GAAGoJ,MAAMA,OAAS,IAItB+O,oBAAA5mB,UAAAsS,YAAA,SAAY7D,GAASvK,KAAc/B,OACjCqmB,qBAAqBtkB,KAAM,YAC3BuK,GAAGvK,MAAQ/B,OAGbykB,oBAAA5mB,UAAA0W,SAAA,SAAS9E,KAAWzP,OAAuByP,KAAKqD,UAAY9S,OAE5DykB,oBAAA5mB,UAAAyoB,OAAA,SAAO5nB,OAAwCub,MAAewF,UAG5D,OADA4G,qBAAqBpM,MAAO,YACN,iBAAXvb,OACUf,KAAK0mB,aAAa1C,uBACjCjjB,OAAQub,MAAOiK,uBAAuBzE,WAEzB9hB,KAAK0mB,aAAa5S,iBAC1B/S,OAAQub,MAAOiK,uBAAuBzE,YAErDgF,oBAtHA,GAwHM8B,YAAc,IAAIC,WAAW,GACnC,SAASH,qBAAqBtkB,KAAc0kB,UAC1C,GAAI1kB,KAAKykB,WAAW,KAAOD,YACzB,MAAM,IAAIzlB,MACN,uBAAuB2lB,SAAQ,IAAI1kB,KAAI,oGAI/C,IC5LI2kB,eD4LJ1B,kCAAA,SAAAjhB,QAIE,SAAAihB,kCACIX,aAA4BC,iBACpBqC,WAFZ,IAhNmCC,iBAgNnC5iB,MAGED,OAAAxF,KAAAZ,KAAM0mB,eAAa1mB,KACb0kB,OAAS0B,eAFL/f,MAAA2iB,UAAAA,WAE6B5B,GAAI4B,UAAUtE,OAAQ,WAC7DiC,iBAAiBlC,UAAUC,QAE3Bre,MAAK6iB,aAvN4BD,iBAuNOD,UAAU5B,GAtN7CjB,aAAaG,QAAQL,gBAAiBgD,mBAuN3C5iB,MAAK8iB,SApNT,SAAkCF,kBAChC,OAAO/C,UAAUI,QAAQL,gBAAiBgD,kBAmNxBG,CAAkBJ,UAAU5B,UAUhD,OAtBgDrgB,UAAAA,kCAAAA,QAe9CsgB,kCAAAnnB,UAAAonB,YAAA,SAAY/U,SAAgBnM,OAAAlG,UAAM0X,aAAYhX,KAAAZ,KAACuS,QAASvS,KAAKmpB,SAAU,KAEvE9B,kCAAAnnB,UAAA6N,cAAA,SAAclI,OAAazB,MACzB,IAAMuK,GAAKvI,OAAAlG,UAAM6N,cAAanN,KAAAZ,KAAC6F,OAAQzB,MAEvC,OADAgC,OAAAlG,UAAM0X,aAAYhX,KAAAZ,KAAC2O,GAAI3O,KAAKkpB,YAAa,IAClCva,IAEX0Y,kCAtBA,CAAgDP,qBAwBhDW,kBAAA,SAAArhB,QAGE,SAAAqhB,kBACIf,aAAoCC,iBAC5B0C,OAAqBL,WAFjC,IAAA3iB,MAGED,OAAAxF,KAAAZ,KAAM0mB,eAAa1mB,KAFmBqG,MAAAsgB,iBAAAA,iBAC5BtgB,MAAAgjB,OAAAA,QAAqBhjB,MAAA2iB,UAAAA,WAEjBhC,gBAAkBC,KAAAA,kBAAkBO,UAChDnhB,MAAK4R,WAAcoR,OAAeC,aAAa,CAACC,KAAM,SAEtDljB,MAAK4R,WAAcoR,OAAena,mBAEpC7I,MAAKsgB,iBAAiBtB,QAAQhf,MAAK4R,YAEnC,IADA,IAAMyM,OAAS0B,cAAc4C,UAAU5B,GAAI4B,UAAUtE,OAAQ,IACpDlkB,EAAI,EAAGA,EAAIkkB,OAAO/jB,OAAQH,IAAK,CACtC,IAAM4kB,QAAUpX,SAASD,cAAc,SACvCqX,QAAQ3O,YAAciO,OAAOlkB,GAC7B6F,MAAK4R,WAAWnC,YAAYsP,sBAoBlC,OArCgCre,UAAAA,kBAAAA,QAqBtB0gB,kBAAAvnB,UAAAspB,iBAAR,SAAyB1X,MAAkB,OAAOA,OAAS9R,KAAKqpB,OAASrpB,KAAKiY,WAAanG,MAE3F2V,kBAAAvnB,UAAA2nB,QAAA,WAAY7nB,KAAK2mB,iBAAiBpB,WAAWvlB,KAAKiY,aAElDwP,kBAAAvnB,UAAA4V,YAAA,SAAYjQ,OAAamQ,UACvB,OAAO5P,OAAAlG,UAAM4V,YAAWlV,KAAAZ,KAACA,KAAKwpB,iBAAiB3jB,QAASmQ,WAE1DyR,kBAAAvnB,UAAAgW,aAAA,SAAarQ,OAAamQ,SAAegS,UACvC,OAAO5hB,OAAAlG,UAAMgW,aAAYtV,KAAAZ,KAACA,KAAKwpB,iBAAiB3jB,QAASmQ,SAAUgS,WAErEP,kBAAAvnB,UAAA2V,YAAA,SAAYhQ,OAAaoQ,UACvB,OAAO7P,OAAAlG,UAAM2V,YAAWjV,KAAAZ,KAACA,KAAKwpB,iBAAiB3jB,QAASoQ,WAE1DwR,kBAAAvnB,UAAAsV,WAAA,SAAW1D,MACT,OAAO9R,KAAKwpB,iBAAiBpjB,OAAAlG,UAAMsV,WAAU5U,KAAAZ,KAACA,KAAKwpB,iBAAiB1X,SAExE2V,kBArCA,CAAgCX,qBCxO1B2C,WACe,oBAATC,MAA0BA,KAAyB,YAAK,SAASC,GACvE,MAAO,kBAAoBA,GAE3BC,mBAAyCH,WAAW,oBACpDI,sBAA+CJ,WAAW,uBAE1DK,YAAuC,GAQvCC,WAAa,oCAGbC,kBACe,oBAATN,MAA0BA,KAAaD,WAAW,wBAE1DO,oBACFjB,eAAiB,GACjBiB,kBAAkBnhB,QAAQ,SAAAgb,WAAekF,eAAelF,WAAaA,aAGvE,IAAMoG,mBAAqB,SAASpG,WAClC,QAAKkF,gBAGEA,eAAelpB,eAAegkB,YAUjCqG,eAAiB,SAAS5N,OAC9B,IAAM6N,WAAaL,YAAYxN,MAAMlH,MACrC,GAAK+U,WAAL,CAGA,IAAMC,UAAwBpqB,KAAKmqB,YACnC,GAAKC,UAAL,CAGA,IAAMxX,KAAY,CAAC0J,OACnB,GAAyB,IAArB8N,UAAUzpB,OAGZ,OADM0pB,SAAWD,UAAU,IACdE,OAASZ,KAAKa,QAElBF,SAASC,KAAKE,IAAIH,SAASvG,QAAS9jB,KAAM4S,MAE1CyX,SAASvG,QAAQjR,MAAM7S,KAAM4S,MAMtC,IADA,IAAM6X,YAAcL,UAAU3R,QACrBjY,EAAI,EAAGA,EAAIiqB,YAAY9pB,SAGK,IAA9B2b,MAAcyN,YAHmBvpB,IAAK,CAM3C,IAAM6pB,UAAAA,SAAWI,YAAYjqB,IAChB8pB,OAASZ,KAAKa,QAEzBF,SAASC,KAAKE,IAAIH,SAASvG,QAAS9jB,KAAM4S,MAE1CyX,SAASvG,QAAQjR,MAAM7S,KAAM4S,2CAQnC,SAAA8X,gBACsBrT,IAAkBsT,OACHC,YAFrC,IAAAvkB,MAGED,OAAAxF,KAAAZ,KAAMqX,MAAIrX,YAF4BqG,MAAAskB,OAAAA,OAIjCC,YAAeC,OAAAA,iBAAiBD,aACnCvkB,MAAKykB,mBAwHX,OA/HqC/jB,UAAAA,gBAAAA,QAW3B2jB,gBAAAxqB,UAAA4qB,WAAR,WACE,GAAqB,oBAAVC,OAA0BA,OAAUA,MAAM7qB,YAGhD6qB,MAAM7qB,UAAkC,wCAA7C,CAIA,IAAM8qB,SAAYD,MAAM7qB,UAAkC,wCACtD6qB,MAAM7qB,UAAU+qB,yBACpBF,MAAM7qB,UAAU+qB,yBAA2B,WACrCjrB,OACFA,KAAK+pB,aAAc,GAMrBiB,UAAYA,SAASnY,MAAM7S,KAAMU,cAMrCgqB,gBAAAxqB,UAAAkkB,SAAA,SAASP,WAA8B,OAAO,GAE9C6G,gBAAAxqB,UAAA4T,iBAAA,SAAiBvB,QAAsBsR,UAAmBC,SAA1D,IAAAzd,MAAArG,KAeQkrB,aAAe3Y,QAAQqX,oBACzB9H,SAA0BgC,QAG9B,IAAIoH,cAAkBxI,KAAAA,OAAOyI,oBAAqBlB,mBAAmBpG,WA+BnEtR,QAA2B,iBAAEsR,UAAW/B,UAAU,OA/B8B,CAChF,IAAIqI,WAAaL,YAAYjG,WACxBsG,aACHA,WAAaL,YAAYjG,WAAa4F,WAlI9B,UAkImD5F,UAnIrD,UAqIR,IAAIuG,UAAyB7X,QAAgB4X,YACvCiB,yBAA2BhB,WAAgC,EAAnBA,UAAUzpB,OACnDypB,YACHA,UAAa7X,QAAgB4X,YAAc,IAG7C,IAAMG,KAAOL,mBAAmBpG,WAAa6F,KAAK2B,KAAO3B,KAAKa,QAC9D,GAAyB,IAArBH,UAAUzpB,OACZypB,UAAU1nB,KAAK,CAAC4nB,KAAMA,KAAMxG,QAAShC,eAChC,CAEL,IADA,IAAIwJ,oBAAqB,EAChB9qB,EAAI,EAAGA,EAAI4pB,UAAUzpB,OAAQH,IACpC,GAAI4pB,UAAU5pB,GAAGsjB,UAAYhC,SAAU,CACrCwJ,oBAAqB,EACrB,MAGCA,oBACHlB,UAAU1nB,KAAK,CAAC4nB,KAAMA,KAAMxG,QAAShC,WAIpCsJ,0BACH7Y,QAAQqX,oBAAoB/F,UAAWqG,gBAAgB,GAK3D,OAAO,WAAM,OAAA7jB,MAAK2N,oBAAoBzB,QAASsR,UAAW/B,YAG5D4I,gBAAAxqB,UAAA8T,oBAAA,SAAoBjT,OAAa8iB,UAAmB/B,UAClD,IAAIyJ,iBAAmBxqB,OAAO8oB,uBAE9B,IAAK0B,iBACH,OAAOxqB,OAA6B,oBAAE8R,MAAM9R,OAAQ,CAAC8iB,UAAW/B,UAAU,IAE5E,IAAIqI,WAAaL,YAAYjG,WACzBuG,UAAwBD,YAAcppB,OAAOopB,YACjD,IAAKC,UAGH,OAAOrpB,OAA6B,oBAAE8R,MAAM9R,OAAQ,CAAC8iB,UAAW/B,UAAU,IAK5E,IADA,IAAI0J,OAAQ,EACHhrB,EAAI,EAAGA,EAAI4pB,UAAUzpB,OAAQH,IAEpC,GAAI4pB,UAAU5pB,GAAGsjB,UAAYhC,SAAU,CACrC0J,OAAQ,EACRpB,UAAUqB,OAAOjrB,EAAG,GACpB,MAGAgrB,MACuB,IAArBpB,UAAUzpB,QAEZ4qB,iBAAiB1Y,MAAM9R,OAAQ,CAAC8iB,UAAWqG,gBAAgB,IAK7DnpB,OAA6B,oBAAE8R,MAAM9R,OAAQ,CAAC8iB,UAAW/B,UAAU,KA5H5D4I,gBAAe7pB,WAAA,CAD3Bkf,KAAAA,aAGMC,QAAAA,EAAAC,KAAAA,OAAOpB,aACPmB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAO0L,KAAAA,qDADwBjJ,KAAAA,OAAMpjB,UAF3CorB,kBAAwBrG,oBCtF/BuH,YAAc,CAElBC,KAAO,EACPC,UAAY,EACZC,SAAW,EACXC,QAAU,EACVC,WAAa,EACbC,SAAW,EACXC,UAAY,EACZC,OAAS,EACTC,SAAW,EAEXC,OAAS,EACTC,YAAc,EACdC,WAAa,EACbC,UAAY,EACZC,aAAe,EACfC,SAAW,EACXC,UAAY,EAEZC,OAAS,EACTC,SAAW,EAEXC,QAAU,EACVC,aAAe,EACfC,YAAc,EACdC,WAAa,EACbC,cAAgB,EAEhBC,OAAS,EACTC,WAAa,EACbC,YAAc,EACdC,SAAW,EACXC,WAAa,EAEbC,KAAO,GASIC,sBAAwB,IAAItN,KAAAA,eAAoC,uBAOhEuN,cAAgB,IAAIvN,KAAAA,eAA6B,gBAc9DwN,oBAAA,WADA,SAAAA,sBAOE5tB,KAAA6tB,OAAmB,GAkBnB7tB,KAAA8tB,UAAqC,GAoCvC,OAZEF,oBAAA1tB,UAAA6tB,YAAA,SAAYxb,SACV,IAAMyb,GAAK,IAAIC,OAAS1b,QAASvS,KAAKkuB,SAKtC,IAAK,IAAMrK,aAHXmK,GAAGrN,IAAI,SAASlH,IAAI,CAAC0U,QAAQ,IAC7BH,GAAGrN,IAAI,UAAUlH,IAAI,CAAC0U,QAAQ,IAENnuB,KAAK8tB,UAC3BE,GAAGrN,IAAIkD,WAAWpK,IAAIzZ,KAAK8tB,UAAUjK,YAGvC,OAAOmK,IA1DEJ,oBAAmB/sB,WAAA,CAD/Bkf,KAAAA,cACY6N,qBAAb,yCAgEE,SAAAQ,qBACsB/W,IACqBgX,QAAsCrb,QAClCsb,QAH/C,IAAAjoB,MAIED,OAAAxF,KAAAZ,KAAMqX,MAAIrX,YAF+BqG,MAAAgoB,QAAAA,QAAsChoB,MAAA2M,QAAAA,QAClC3M,MAAAioB,OAAAA,aA+EjD,OAnF0CvnB,UAAAA,qBAAAA,QAQxCqnB,qBAAAluB,UAAAkkB,SAAA,SAASP,WACP,SAAK+H,YAAY/rB,eAAegkB,UAAU1V,iBAAmBnO,KAAKuuB,cAAc1K,iBAI1E9Q,OAAekb,SAAWjuB,KAAKsuB,UACnCtuB,KAAKgT,QAAQwb,KACT,QAAQ3K,UAAS,qGAEd,KAMXuK,qBAAAluB,UAAA4T,iBAAA,SAAiBvB,QAAsBsR,UAAmBC,SAA1D,IAAAzd,MAAArG,KACQsqB,KAAOtqB,KAAK0jB,QAAQO,UAK1B,GAJAJ,UAAYA,UAAU1V,cAIhB4E,OAAekb,SAAUjuB,KAAKsuB,OAoCpC,OAAOhE,KAAKmE,kBAAkB,WAE5B,IAAMT,GAAK3nB,MAAKgoB,QAAQN,YAAYxb,SAC9BuP,SAAW,SAAS4M,UACxBpE,KAAKqE,WAAW,WAAa7K,QAAQ4K,aAGvC,OADAV,GAAGra,GAAGkQ,UAAW/B,UACV,WACLkM,GAAGY,IAAI/K,UAAW/B,UAEQ,mBAAfkM,GAAGnG,SACZmG,GAAGnG,aA3CP,IAAIgH,sBAAqB,EACrBC,aAAuB,WAAQD,sBAAqB,GA4BxD,OA1BA7uB,KAAKsuB,SACAxiB,KAAK,WAEJ,IAAMiH,OAAekb,OAInB,OAHA5nB,MAAK2M,QAAQwb,KACT,0EACJM,aAAa,cAIVD,uBAGHC,aAAazoB,MAAKyN,iBAAiBvB,QAASsR,UAAWC,YAG1DiL,MAAM,WACL1oB,MAAK2M,QAAQwb,KACT,QAAQ3K,UAAS,uEAErBiL,aAAa,eAMZ,WAAQA,iBAoBnBV,qBAAAluB,UAAAquB,cAAA,SAAc1K,WAA8B,OAAiD,EAA1C7jB,KAAKquB,QAAQR,OAAOjoB,QAAQie,YAlFpEuK,qBAAoBvtB,WAAA,CADhCkf,KAAAA,aAGMC,QAAAA,EAAAC,KAAAA,OAAOpB,aACPmB,QAAAA,EAAAC,KAAAA,OAAOyN,wBACP1N,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAO0N,uDAD4BC,oBAAsCoB,KAAAA,SAAO1vB,UAHtF8uB,uBAA6B/J,oBC/HpC4K,cAAgB,CAAC,MAAO,UAAW,OAAQ,SAK3CC,qBAA2E,CAC/EC,IAAO,SAAC7S,OAAyB,OAAAA,MAAM8S,QACvCC,QAAW,SAAC/S,OAAyB,OAAAA,MAAMgT,SAC3CC,KAAQ,SAACjT,OAAyB,OAAAA,MAAMkT,SACxCC,MAAS,SAACnT,OAAyB,OAAAA,MAAMoT,WAQ3CC,gBAAA,SAAAvpB,QAKE,SAAAupB,gBAA8BtY,YAAYjR,OAAAxF,KAAAZ,KAAMqX,MAAIrX,2BAyGtD,OA9GqC+G,UAAAA,gBAAAA,2BAAxB4oB,iBAYXzvB,UAAAkkB,SAAA,SAASP,WAA8B,OAAoD,MAA7C+L,kBAAgBC,eAAehM,YAU7E8L,gBAAAzvB,UAAA4T,iBAAA,SAAiBvB,QAAsBsR,UAAmBC,SACxD,IAAMgM,YAAcF,kBAAgBC,eAAehM,WAE7CkM,eACFH,kBAAgBI,cAAcF,YAAqB,QAAGhM,QAAS9jB,KAAK0jB,QAAQO,WAEhF,OAAOjkB,KAAK0jB,QAAQO,UAAUwK,kBAAkB,WAC9C,OAAOhhB,SAASsG,YAAYxB,QAASud,YAA0B,aAAGC,mBAI/DJ,gBAAAE,eAAP,SAAsBhM,WACpB,IAAMoM,MAAkBpM,UAAU1V,cAAc+hB,MAAM,KAEhDC,aAAeF,MAAMR,QAC3B,GAAsB,IAAjBQ,MAAMtvB,QAAoC,YAAjBwvB,cAA+C,UAAjBA,aAC1D,OAAO,KAGT,IAAMnvB,IAAM4uB,kBAAgBQ,cAAcH,MAAMI,OAE5CC,QAAU,GAUd,GATArB,cAAcpmB,QAAQ,SAAA0nB,cACpB,IAAM3rB,MAAgBqrB,MAAMrqB,QAAQ2qB,eACvB,EAAT3rB,QACFqrB,MAAMxE,OAAO7mB,MAAO,GACpB0rB,SAAWC,aAAe,OAG9BD,SAAWtvB,IAES,GAAhBivB,MAAMtvB,QAA8B,IAAfK,IAAIL,OAE3B,OAAO,KAGT,IAAMsK,OAAgC,GAGtC,OAFAA,OAAqB,aAAIklB,aACzBllB,OAAgB,QAAIqlB,QACbrlB,QAGF0kB,gBAAAa,gBAAP,SAAuBlU,OACrB,IAAIgU,QAAU,GACVtvB,IAAMyM,SAAS4O,YAAYC,OAgB/B,MAdY,OADZtb,IAAMA,IAAImN,eAERnN,IAAM,QACW,MAARA,MACTA,IAAM,OAERiuB,cAAcpmB,QAAQ,SAAA0nB,cAChBA,cAAgBvvB,OAEdyvB,EADmBvB,qBAAqBqB,eACzBjU,SACjBgU,SAAWC,aAAe,QAIhCD,SAAWtvB,KAWN2uB,gBAAAK,cAAP,SAAqBM,QAAcxM,QAAmBwG,MACpD,OAAO,SAAChO,OACFsT,kBAAgBY,gBAAgBlU,SAAWgU,SAC7ChG,KAAKqE,WAAW,WAAM,OAAA7K,QAAQxH,WAM7BqT,gBAAAS,cAAP,SAAqBM,SAEnB,OAAQA,SACN,IAAK,MACH,MAAO,SACT,QACE,OAAOA,UA3GFf,gBAAeC,kBAAA/uB,WAAA,CAD3Bkf,KAAAA,aAMcC,QAAAA,EAAAC,KAAAA,OAAOpB,uDALT8Q,iBAAb,CAAqCtL,oBCsDrCsM,aAAA,+CA2DE,SAAAC,iBAAsC1R,MAAtC,IAAA7Y,MAAmDD,OAAAxF,KAAAZ,OAAOA,YAApBqG,MAAA6Y,KAAAA,WAqDxC,OAtDsCnY,UAAAA,iBAAAA,QAGpC6pB,iBAAA1wB,UAAA2wB,SAAA,SAASC,IAAsBzuB,OAC7B,GAAa,MAATA,MAAe,OAAO,KAC1B,OAAQyuB,KACN,KAAKC,KAAAA,gBAAgBC,KACnB,OAAO3uB,MACT,KAAK0uB,KAAAA,gBAAgBE,KACnB,OAAI5uB,iBAAiB6uB,aAAqB7uB,MAAM8uB,uCAChDnxB,KAAKoxB,kBAAkB/uB,MAAO,QACvBgvB,KAAAA,eAAcrxB,KAAKkf,KAAMzC,OAAOpa,SACzC,KAAK0uB,KAAAA,gBAAgBO,MACnB,OAAIjvB,iBAAiBkvB,cAAsBlvB,MAAM8uB,uCACjDnxB,KAAKoxB,kBAAkB/uB,MAAO,SACvBmvB,KAAAA,gBAAenvB,QACxB,KAAK0uB,KAAAA,gBAAgBU,OACnB,GAAIpvB,iBAAiBqvB,eAAgB,OAAOrvB,MAAM8uB,sCAElD,MADAnxB,KAAKoxB,kBAAkB/uB,MAAO,UACxB,IAAIc,MAAM,yCAClB,KAAK4tB,KAAAA,gBAAgBY,IACnB,OAAItvB,iBAAiBuvB,qBAAuBvvB,iBAAiBwvB,YAEpDxvB,MAAM8uB,uCAEfnxB,KAAKoxB,kBAAkB/uB,MAAO,OACvByvB,KAAAA,cAAarV,OAAOpa,SAC7B,KAAK0uB,KAAAA,gBAAgBgB,aACnB,GAAI1vB,iBAAiBuvB,oBACnB,OAAOvvB,MAAM8uB,sCAGf,MADAnxB,KAAKoxB,kBAAkB/uB,MAAO,eACxB,IAAIc,MACN,iFACN,QACE,MAAM,IAAIA,MAAM,8BAA8B2tB,IAAG,wCAI/CF,iBAAA1wB,UAAAkxB,kBAAR,SAA0B/uB,MAAY2vB,cACpC,GAAI3vB,iBAAiB4vB,cACnB,MAAM,IAAI9uB,MACN,mBAAmB6uB,aAAY,WAAW3vB,MAAM6vB,cAAa,uCAKrEtB,iBAAA1wB,UAAAiyB,wBAAA,SAAwB9vB,OAA2B,OAAO,IAAI6uB,aAAa7uB,QAC3EuuB,iBAAA1wB,UAAAkyB,yBAAA,SAAyB/vB,OAA4B,OAAO,IAAIkvB,cAAclvB,QAC9EuuB,iBAAA1wB,UAAAmyB,0BAAA,SAA0BhwB,OAA6B,OAAO,IAAIqvB,eAAervB,QACjFuuB,iBAAA1wB,UAAAoyB,uBAAA,SAAuBjwB,OAA0B,OAAO,IAAIwvB,YAAYxvB,QACxEuuB,iBAAA1wB,UAAAqyB,+BAAA,SAA+BlwB,OAC7B,OAAO,IAAIuvB,oBAAoBvvB,QApDtBuuB,iBAAgB/vB,WAAA,CAD5Bkf,KAAAA,aAEcC,QAAAA,EAAAC,KAAAA,OAAOpB,uDADT+R,mBAAyBD,cAwDtCsB,cAAA,WACE,SAAAA,cAAmBd,uCAAAnxB,KAAAmxB,sCAAAA,sCAUrB,OAJEc,cAAA/xB,UAAAgE,SAAA,WACE,MAAO,0CAA0ClE,KAAKmxB,sCAClD,sCAERc,cAXA,GAaAf,aAAA,SAAA9qB,QAAA,SAAA8qB,wEAEA,OAF2BnqB,UAAAA,aAAAA,QACzBmqB,aAAAhxB,UAAAgyB,YAAA,WAAgB,MAAO,QACzBhB,aAFA,CAA2Be,eAG3BV,cAAA,SAAAnrB,QAAA,SAAAmrB,yEAEA,OAF4BxqB,UAAAA,cAAAA,QAC1BwqB,cAAArxB,UAAAgyB,YAAA,WAAgB,MAAO,SACzBX,cAFA,CAA4BU,eAG5BP,eAAA,SAAAtrB,QAAA,SAAAsrB,0EAEA,OAF6B3qB,UAAAA,eAAAA,QAC3B2qB,eAAAxxB,UAAAgyB,YAAA,WAAgB,MAAO,UACzBR,eAFA,CAA6BO,eAG7BJ,YAAA,SAAAzrB,QAAA,SAAAyrB,uEAEA,OAF0B9qB,UAAAA,YAAAA,QACxB8qB,YAAA3xB,UAAAgyB,YAAA,WAAgB,MAAO,OACzBL,YAFA,CAA0BI,eAG1BL,oBAAA,SAAAxrB,QAAA,SAAAwrB,+EAEA,OAFkC7qB,UAAAA,oBAAAA,QAChC6qB,oBAAA1xB,UAAAgyB,YAAA,WAAgB,MAAO,eACzBN,oBAFA,CAAkCK,eC3MrBO,oCAAwD,CACnE,CAAClS,QAASqL,KAAAA,YAAa8G,SAAUC,OAAAA,sBACjC,CAACpS,QAASqS,KAAAA,qBAAsBF,SAmBlC,WACExgB,kBAAkBG,cAClB+O,sBAAsBC,QArBoCF,OAAO,GACjE,CAACZ,QAASJ,OAAAA,iBAAkB0S,SAAU3T,wBAAyB+B,KAAM,CAACnC,aACtE,CAACyB,QAASzB,WAAU2B,WA0BtB,WACE,OAAOxS,UA3BoCgT,KAAM,KAStC6R,+BAAmD,CAC9D,CAACvS,QAASwS,KAAAA,UAAWC,YAAapC,cAClC,CAACrQ,QAASqQ,aAAciC,SAAUhC,iBAAkB5P,KAAM,CAACnC,cAIzDmU,KAAAA,sBAAsBC,KAAAA,aAAc,UAAWT,qCAenD,IAAaU,yBAA6C,CACxDL,+BACA,CAACvS,QAAS6S,KAAAA,UAAUV,UAAU,GAC9B,CAACnS,QAAS8S,KAAAA,aAAc5S,WAX1B,WACE,OAAO,IAAI4S,KAAAA,cAUuCpS,KAAM,IACxD,CACEV,QAAS+C,sBACTuP,SAAUlI,gBACVxJ,OAAO,EACPF,KAAM,CAACnC,WAAU6D,KAAAA,OAAQiJ,KAAAA,cAE3B,CAACrL,QAAS+C,sBAAuBuP,SAAUjD,gBAAiBzO,OAAO,EAAMF,KAAM,CAACnC,aAChF,CACEyB,QAAS+C,sBACTuP,SAAUxE,qBACVlN,OAAO,EACPF,KAAM,CAACnC,WAAU6O,sBAAuBsB,KAAAA,SAAS,CAAC,IAAItD,KAAAA,SAAYiC,iBAEpE,CAACrN,QAASoN,sBAAuBkF,SAAUhF,oBAAqB5M,KAAM,IACtE,CACEV,QAASmG,oBACTmM,SAAUnM,oBACVzF,KAAM,CAACsC,aAAcyB,sBAEvB,CAACzE,QAAS+S,KAAAA,iBAAkBN,YAAatM,qBACzC,CAACnG,QAASgE,iBAAkByO,YAAahO,qBACzC,CAACzE,QAASyE,oBAAqB6N,SAAU7N,oBAAqB/D,KAAM,CAACnC,aACrE,CAACyB,QAASgT,KAAAA,YAAaV,SAAUU,KAAAA,YAAatS,KAAM,CAAC0B,KAAAA,SACrD,CAACpC,QAASgD,aAAcsP,SAAUtP,aAActC,KAAM,CAACqC,sBAAuBX,KAAAA,SAC9EI,0BAaF,WACE,SAAAyQ,cAA2DC,cACzD,GAAIA,aACF,MAAM,IAAIrwB,MACN,sMAJGowB,eAkBJE,qBAAP,SAA4BC,QAC1B,MAAO,CACLC,SAAUC,gBACVC,UAAW,CACT,CAACvT,QAASwT,KAAAA,OAAQrB,SAAUiB,OAAOK,OACnC,CAACzT,QAASH,cAAe4S,YAAae,KAAAA,QACtCzT,+BAxBKkT,cAAaK,gBAAA/yB,WAAA,CADzBmzB,KAAAA,SAAS,CAACH,UAAWX,yBAA0Be,QAAS,CAACC,OAAAA,aAAcC,KAAAA,qBAEzDnU,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAoU,KAAAA,YAAYpU,QAAAA,EAAAC,KAAAA,OAAO2T,4DADjCL,eAAb,GCjEA,SAAgBc,aACd,OAAO,IAAIC,KAAKC,KAAAA,OAAO1V,aASzB,IAAAyV,KAAA,WAEE,SAAAA,KAAsCpV,MAAAlf,KAAAkf,KAAAA,KAAalf,KAAKw0B,KAAO/mB,gBAE/D6mB,KAAAp0B,UAAAu0B,OAAA,SAAOC,IAAqBC,eAC1B,YAD0B,IAAAA,gBAAAA,eAAA,GACrBD,IACE10B,KAAK40B,oBAAoBF,IAAKC,eADpB,MAInBL,KAAAp0B,UAAA20B,QAAA,SAAQC,KAAwBH,eAAhC,IAAAtuB,MAAArG,KACE,YAD8B,IAAA20B,gBAAAA,eAAA,GACzBG,KACEA,KAAK/uB,OAAO,SAACkF,OAA2BypB,KAI7C,OAHIA,KACFzpB,OAAOvI,KAAK2D,MAAKuuB,oBAAoBF,IAAKC,gBAErC1pB,QACN,IANe,IASpBqpB,KAAAp0B,UAAA60B,OAAA,SAAOC,cACL,OAAKA,cACEh1B,KAAKw0B,KAAKhhB,cAAcxT,KAAKkf,KAAM,QAAQ8V,aAAY,MADpC,MAI5BV,KAAAp0B,UAAA+0B,QAAA,SAAQD,cACN,IAAKA,aAAc,MAAO,GAC1B,IAAME,KAAoBl1B,KAAKw0B,KAAK9gB,iBAAiB1T,KAAKkf,KAAM,QAAQ8V,aAAY,KACpF,OAAOE,KAAO,GAAGzc,MAAM7X,KAAKs0B,MAAQ,IAGtCZ,KAAAp0B,UAAAi1B,UAAA,SAAUT,IAAqBjhB,UAC7B,IAAKihB,IAAK,OAAO,KACjBjhB,SAAWA,UAAYzT,KAAKo1B,eAAeV,KAC3C,IAAMnF,KAAwBvvB,KAAK+0B,OAAOthB,UAC1C,OAAI8b,KACKvvB,KAAKq1B,0BAA0BX,IAAKnF,MAEtCvvB,KAAK40B,oBAAoBF,KAAK,IAGvCJ,KAAAp0B,UAAAo1B,UAAA,SAAUN,cAA8Bh1B,KAAKu1B,iBAAiBv1B,KAAK+0B,OAAOC,gBAE1EV,KAAAp0B,UAAAq1B,iBAAA,SAAiBhG,MACXA,MACFvvB,KAAKw0B,KAAK1vB,OAAOyqB,OAIb+E,KAAAp0B,UAAA00B,oBAAR,SAA4BrF,KAAsBoF,eAEhD,QAFgD,IAAAA,gBAAAA,eAAA,IAE3CA,cAAe,CAClB,IAAMlhB,SAAmBzT,KAAKo1B,eAAe7F,MACvC/N,KAAwBxhB,KAAK+0B,OAAOthB,UAI1C,GAAI+N,MAAQxhB,KAAKw1B,oBAAoBjG,KAAM/N,MAAO,OAAOA,KAE3D,IAAMjP,QAA2BvS,KAAKw0B,KAAKzmB,cAAc,QACzD/N,KAAKq1B,0BAA0B9F,KAAMhd,SACrC,IAAM2S,KAAOllB,KAAKw0B,KAAKjc,qBAAqBvY,KAAKkf,KAAM,QAAQ,GAE/D,OADAlf,KAAKw0B,KAAK1e,YAAYoP,KAAM3S,SACrBA,SAGD+hB,KAAAp0B,UAAAm1B,0BAAR,SAAkCX,IAAqB/lB,IAAvD,IAAAtI,MAAArG,KAEE,OADAV,OAAOmP,KAAKimB,KAAK7rB,QAAQ,SAAC4sB,MAAiB,OAAApvB,MAAKmuB,KAAK5c,aAAajJ,GAAI8mB,KAAMf,IAAIe,SACzE9mB,IAGD2lB,KAAAp0B,UAAAk1B,eAAR,SAAuBV,KACrB,IAAMgB,KAAehB,IAAItwB,KAAO,OAAS,WACzC,OAAUsxB,KAAI,KAAKhB,IAAIgB,MAAK,KAGtBpB,KAAAp0B,UAAAs1B,oBAAR,SAA4Bd,IAAqBlT,MAAjD,IAAAnb,MAAArG,KACE,OAAOV,OAAOmP,KAAKimB,KAAKiB,MAAM,SAAC30B,KAAgB,OAAAqF,MAAKmuB,KAAK3a,aAAa2H,KAAMxgB,OAAS0zB,IAAI1zB,sGA5EhFszB,KAAIzzB,WAAA,CADhBkf,KAAAA,WAAW,CAAC6V,WAAY,OAAQpV,WAAY6T,WAAYrT,KAAM,KAGhDhB,QAAAA,EAAAC,KAAAA,OAAOpB,uDAFTyV,MAAb,GC7BA,SAAgBuB,cACd,OAAO,IAAIC,MAAMvB,KAAAA,OAAO1V,aAc1B,IAAAiX,MAAA,WACE,SAAAA,MAAsC5W,MAAAlf,KAAAkf,KAAAA,YAItC4W,MAAA51B,UAAA2a,SAAA,WAAqB,OAAOpN,SAASoN,SAAS7a,KAAKkf,OAMnD4W,MAAA51B,UAAA6a,SAAA,SAASC,UAAoBvN,SAASsN,SAAS/a,KAAKkf,KAAMlE,4GAX/C8a,MAAKj1B,WAAA,CADjBkf,KAAAA,WAAW,CAAC6V,WAAY,OAAQpV,WAAYqV,YAAa7U,KAAM,KAEjDhB,QAAAA,EAAAC,KAAAA,OAAOpB,uDADTiX,OAAb,GCkDA,IAAAC,cAAA,WADA,SAAAA,gBAEU/1B,KAAAg2B,MAAuC,GACvCh2B,KAAAi2B,qBAA4D,uBAsDtE,uBAxDaF,eAKJ3U,KAAP,SAAY8U,WACV,IAAMC,cAAgB,IAAIC,gBAE1B,OADAD,cAAcH,MAAQE,UACfC,eAMTJ,cAAA71B,UAAAygB,IAAA,SAAO3f,IAAkBq1B,cACvB,YAA2BnzB,IAApBlD,KAAKg2B,MAAMh1B,KAAqBhB,KAAKg2B,MAAMh1B,KAAYq1B,cAMhEN,cAAA71B,UAAAuZ,IAAA,SAAOzY,IAAkBqB,OAAkBrC,KAAKg2B,MAAMh1B,KAAOqB,OAK7D0zB,cAAA71B,UAAA4E,OAAA,SAAU9D,YAAiChB,KAAKg2B,MAAMh1B,MAKtD+0B,cAAA71B,UAAAo2B,OAAA,SAAUt1B,KAAoB,OAAOhB,KAAKg2B,MAAMn2B,eAAemB,MAK/D+0B,cAAA71B,UAAAq2B,YAAA,SAAev1B,IAAkB8gB,UAC/B9hB,KAAKi2B,qBAAqBj1B,KAAO8gB,UAMnCiU,cAAA71B,UAAAs2B,OAAA,WAEE,IAAK,IAAMx1B,OAAOhB,KAAKi2B,qBACrB,GAAIj2B,KAAKi2B,qBAAqBp2B,eAAemB,KAC3C,IACEhB,KAAKg2B,MAAMh1B,KAAOhB,KAAKi2B,qBAAqBj1B,OAC5C,MAAOwB,GACPwQ,QAAQwb,KAAK,sCAAuChsB,GAI1D,OAAOi0B,KAAKC,UAAU12B,KAAKg2B,QAtDlBD,cAAaK,gBAAAv1B,WAAA,CADzBkf,KAAAA,cACYgW,eAAb,YA0DgBY,kBAAkBtf,IAAe0c,OAG/C,IAxH2B9c,KACrB2f,cAuHAC,OAASxf,IAAIyf,eAAe/C,MAAQ,UACtCgD,aAAe,GACnB,GAAIF,QAAUA,OAAOpgB,YACnB,IACEsgB,aAAeN,KAAKvkB,OA5HG+E,KA4HgB4f,OAAOpgB,YA3H5CmgB,cAAuC,CAC3CI,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,KAEFngB,KAAKqP,QAAQ,WAAY,SAAA/lB,GAAK,OAAAq2B,cAAcr2B,OAqH/C,MAAOiC,GACPwQ,QAAQwb,KAAK,mDAAqDuF,MAAOvxB,GAG7E,OAAOuzB,cAAc3U,KAAK2V,eAY5B,WAAA,SAAAM,8BAAaA,2BAA0Bx2B,WAAA,CAHtCmzB,KAAAA,SAAS,CACRH,UAAW,CAAC,CAACvT,QAASyV,cAAevV,WAAYmW,kBAAmB3V,KAAM,CAACnC,WAAUiV,KAAAA,aAE1EuD,6BAAb,GCnJuB,IAAIC,KAAAA,QAAQ;;;;;;;;;;;;;;QDmJnC,IEhJAC,yBAAA,WAAA,SAAAA,4BAmJA,OAtIEj4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,QAAK,KAAT,WAAmB,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQhtB,MAAQ,sCAQ9D/C,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,QAAK,KAAT,WAA4B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQmI,MAAQ,sCAOvEl4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,UAAO,KAAX,WAA8B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQoI,QAAU,sCAQ3En4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,UAAO,KAAX,WAA8B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQqI,QAAU,sCAQ3Ep4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,WAAQ,KAAZ,WAA+B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQsI,SAAW,sCAO7Er4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,UAAO,KAAX,WAA8B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQuI,QAAU,sCAM3Et4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,SAAM,KAAV,WAAsC,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQtrB,OAAS,sCAOlFzE,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,WAAQ,KAAZ,WAA+B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQwI,SAAW,sCAO7Ev4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,QAAK,KAAT,WAA4B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQyI,MAAQ,sCAOvEx4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,UAAO,KAAX,WAA8B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQ0I,QAAU,sCAQ3Ez4B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,SAAM,KAAV,WAA4B,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQ2I,OAAS,sCAOxE14B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,YAAS,KAAb,WAAgC,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQ4I,UAAY,sCAO/E34B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQ6I,cAAgB,sCASrD54B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKqvB,QAAUrvB,KAAKqvB,QAAQ8I,aAAe,sCAQpD74B,OAAAiC,eAAIg2B,yBAAAr3B,UAAA,OAAI,KAAR,WAA4B,OAAO,sCAMnCq3B,yBAAAr3B,UAAAk4B,MAAA,SAAM/1B,YAAA,IAAAA,QAAAA,WAAAa,GACAlD,KAAKqvB,SAASrvB,KAAKqvB,QAAQ+I,MAAM/1B,QASvCk1B,yBAAAr3B,UAAAm4B,SAAA,SAASC,UAAmBC,MAC1B,QAAOv4B,KAAKqvB,SAAUrvB,KAAKqvB,QAAQgJ,SAASC,UAAWC,OAQzDhB,yBAAAr3B,UAAAs4B,SAAA,SAASF,UAAmBC,MAC1B,OAAOv4B,KAAKqvB,QAAUrvB,KAAKqvB,QAAQmJ,SAASF,UAAWC,MAAQ,MAEnEhB,yBAnJA,GCFAkB,iBAAA,SAAAryB,QAAA,SAAAqyB,4EAmBA,OAnB+C1xB,UAAAA,iBAAAA,QAY7CzH,OAAAiC,eAAIk3B,iBAAAv4B,UAAA,gBAAa,KAAjB,WAAiC,OAAO,sCAMxCZ,OAAAiC,eAAIk3B,iBAAAv4B,UAAA,OAAI,KAAR,WAA4B,OAAO,sCACrCu4B,iBAnBA,CAA+ClB;;;;;;;;ACH/C,SAASmB,kBAAkBr2B,OAEzB,OAAgB,MAATA,OAAkC,IAAjBA,MAAM1B,OA6BhC,IAAag4B,cAAgB,IAAIvY,KAAAA,eAA0C,gBAS9DwY,oBACT,IAAIxY,KAAAA,eAA0C,qBAE5CyY,aACF,6LAYJC,WAAA,WAAA,SAAAA,cAsSA,OAlRSA,WAAAC,IAAP,SAAWA,QACT,OAAO,SAAC1J,SACN,GAAIqJ,kBAAkBrJ,QAAQhtB,QAAUq2B,kBAAkBK,QACxD,OAAO,KAET,IAAM12B,MAAQ22B,WAAW3J,QAAQhtB,OAGjC,OAAQ42B,MAAM52B,QAAUA,MAAQ02B,OAAM,CAACA,IAAO,CAACA,IAAOA,OAAKG,OAAU7J,QAAQhtB,QAAU,OAuBpFy2B,WAAAK,IAAP,SAAWA,QACT,OAAO,SAAC9J,SACN,GAAIqJ,kBAAkBrJ,QAAQhtB,QAAUq2B,kBAAkBS,QACxD,OAAO,KAET,IAAM92B,MAAQ22B,WAAW3J,QAAQhtB,OAGjC,OAAQ42B,MAAM52B,QAAkB82B,OAAR92B,MAAc,CAAC82B,IAAO,CAACA,IAAOA,OAAKD,OAAU7J,QAAQhtB,QAAU,OAsBpFy2B,WAAAM,SAAP,SAAgB/J,SACd,OAAOqJ,kBAAkBrJ,QAAQhtB,OAAS,CAAC+2B,UAAY,GAAQ,MAqB1DN,WAAAO,aAAP,SAAoBhK,SAClB,OAAyB,IAAlBA,QAAQhtB,MAAiB,KAAO,CAAC+2B,UAAY,IAqB/CN,WAAAQ,MAAP,SAAajK,SACX,OAAIqJ,kBAAkBrJ,QAAQhtB,OACrB,KAEFw2B,aAAaU,KAAKlK,QAAQhtB,OAAS,KAAO,CAACi3B,OAAS,IA0BtDR,WAAAU,UAAP,SAAiBA,WACf,OAAO,SAACnK,SACN,GAAIqJ,kBAAkBrJ,QAAQhtB,OAC5B,OAAO,KAET,IAAM1B,OAAiB0uB,QAAQhtB,MAAQgtB,QAAQhtB,MAAM1B,OAAS,EAC9D,OAAOA,OAAS64B,UACZ,CAACC,UAAa,CAACC,eAAkBF,UAAWG,aAAgBh5B,SAC5D,OA2BDm4B,WAAAc,UAAP,SAAiBA,WACf,OAAO,SAACvK,SACN,IAAM1uB,OAAiB0uB,QAAQhtB,MAAQgtB,QAAQhtB,MAAM1B,OAAS,EAC9D,OAAgBi5B,UAATj5B,OACH,CAACk5B,UAAa,CAACH,eAAkBE,UAAWD,aAAgBh5B,SAC5D,OA2BDm4B,WAAAgB,QAAP,SAAeA,SACb,OAAKA,SAYHC,MATqB,iBAAZD,SACTE,SAAW,GAEe,MAAtBF,QAAQvc,OAAO,KAAYyc,UAAY,KAE3CA,UAAYF,QAE+B,MAAvCA,QAAQvc,OAAOuc,QAAQn5B,OAAS,KAAYq5B,UAAY,KAEpD,IAAIC,OAAOD,YAEnBA,SAAWF,QAAQ51B,WACX41B,SAEH,SAACzK,SACN,GAAIqJ,kBAAkBrJ,QAAQhtB,OAC5B,OAAO,KAET,IAAMA,MAAgBgtB,QAAQhtB,MAC9B,OAAO03B,MAAMR,KAAKl3B,OAAS,KACA,CAACy3B,QAAW,CAACI,gBAAmBF,SAAUG,YAAe93B,UAvBjEy2B,WAAWsB,cAChC,IAAIL,MACAC,UA6BClB,WAAAsB,cAAP,SAAqB/K,SAAmD,OAAO,MAYxEyJ,WAAAuB,QAAP,SAAeC,YACb,IAAKA,WAAY,OAAO,KACxB,IAAMC,kBAAmCD,WAAWvZ,OAAOyZ,WAC3D,OAAgC,GAA5BD,kBAAkB55B,OAAoB,KAEnC,SAAS0uB,SACd,OAAOoL,aAoCb,SAA4BpL,QAA0BiL,YACpD,OAAOA,WAAWr2B,IAAI,SAAA0lB,GAAK,OAAAA,EAAE0F,WArCLqL,CAAmBrL,QAASkL,sBAY7CzB,WAAA6B,aAAP,SAAoBL,YAClB,IAAKA,WAAY,OAAO,KACxB,IAAMC,kBAAwCD,WAAWvZ,OAAOyZ,WAChE,OAAgC,GAA5BD,kBAAkB55B,OAAoB,KAEnC,SAAS0uB,SAEd,O1BzWN,SAAAuL,mBAkJMC,4CAJmEl6B,OAAAm6B,qCAMvD,mBAAd5tB,QAAcA,QAAAvM,OAAA,mCAMK,IAAnBuM,QAAOvM,QAA0CuE,QAAAgI,QAAA,0BAI1C,IAAPA,QAAOvM,aAKPk6B,yGAMOhzB,WAAA,SAAAZ,gE0BgME2zB,CAqBb,SAAiCvL,QAA0BiL,YACzD,OAAOA,WAAWr2B,IAAI,SAAA0lB,GAAK,OAAAA,EAAE0F,WAvBL0L,CAAwB1L,QAASkL,mBAAmBt2B,IAAI+2B,eAC/CC,KAAKh3B,IAAIw2B,iBAG5C3B,WAtSA,GAwSA,SAAS0B,UAAUx4B,GACjB,OAAY,MAALA,EAGT,SAAgBg5B,aAAa75B,GAC3B,IAAMqL,IAAMC,KAAAA,WAAUtL,GAAK2L,KAAK3L,GAAKA,EACrC,IAAM+5B,KAAAA,cAAa1uB,KACjB,MAAM,IAAIrJ,MAAM,uDAElB,OAAOqJ,IAWT,SAASiuB,aAAaU,eACpB,IAAMxlB,IACFwlB,cAAcp1B,OAAO,SAAC4P,IAA8B5R,QAClD,OAAiB,MAAVA,OAAc3D,SAAA,GAAOuV,IAAU5R,QAAU4R,KAC/C,IACP,OAAmC,IAA5BrW,OAAOmP,KAAKkH,KAAKhV,OAAe,KAAOgV;;;;;;;OC9PhD,IAAaylB,kBAAoB,IAAIhb,KAAAA,eAAqC,mBC7H7Dib,wBAA+B,CAC1C/a,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAAC,+BAC9Bra,OAAO,GAsBTqa,6BAAA,WAIE,SAAAA,6BAAoBC,UAA8BC,aAA9Bz7B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAHlDz7B,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAad,OATEL,6BAAAr7B,UAAA27B,WAAA,SAAWx5B,OACTrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,UAAWz5B,QAExEk5B,6BAAAr7B,UAAA67B,iBAAA,SAAiBn4B,IAA4B5D,KAAK07B,SAAW93B,IAC7D23B,6BAAAr7B,UAAA87B,kBAAA,SAAkBp4B,IAAsB5D,KAAK47B,UAAYh4B,IAEzD23B,6BAAAr7B,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAb9DX,6BAA4B16B,WAAA,CANxCs7B,KAAAA,UAAU,CACT1oB,SACI,wGACJ0E,KAAM,CAACikB,WAAY,kCAAmCC,SAAU,eAChExI,UAAW,CAACwH,2DAMmBiB,KAAAA,UAAgCC,KAAAA,cAJpDhB,8BAAb,GCzBaiB,uBAA8B,CACzClc,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAAmB,uBAC9Bvb,OAAO;;;;;;;OAgBT,IAAawb,wBAA0B,IAAItc,KAAAA,eAAwB,wBA8BnEqc,qBAAA,WAOE,SAAAA,qBACYjB,UAA8BC,YACekB,kBAhD3D,IACQ/e,UA8CM5d,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YACez7B,KAAA28B,iBAAAA,iBARzD38B,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAGJ57B,KAAA48B,YAAa,EAKU,MAAzB58B,KAAK28B,mBACP38B,KAAK28B,kBAjDH/e,UAAYnQ,SAAWA,SAASiQ,eAAiB,IAChD,gBAAgB6b,KAAK3b,UAAUzP,iBA+ExC,OA3BEsuB,qBAAAv8B,UAAA27B,WAAA,SAAWx5B,OACT,IAAMw6B,gBAA2B,MAATx6B,MAAgB,GAAKA,MAC7CrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,QAASe,kBAGtEJ,qBAAAv8B,UAAA67B,iBAAA,SAAiBn4B,IAA8B5D,KAAK07B,SAAW93B,IAC/D64B,qBAAAv8B,UAAA87B,kBAAA,SAAkBp4B,IAAwB5D,KAAK47B,UAAYh4B,IAE3D64B,qBAAAv8B,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAIzEO,qBAAAv8B,UAAA48B,aAAA,SAAaz6B,SACNrC,KAAK28B,kBAAqB38B,KAAK28B,mBAAqB38B,KAAK48B,aAC5D58B,KAAK07B,SAASr5B,QAKlBo6B,qBAAAv8B,UAAA68B,kBAAA,WAA4B/8B,KAAK48B,YAAa,GAG9CH,qBAAAv8B,UAAA88B,gBAAA,SAAgB36B,OACdrC,KAAK48B,YAAa,EAClB58B,KAAK28B,kBAAoB38B,KAAK07B,SAASr5B,QAxC9Bo6B,qBAAoB57B,WAAA,CAdhCs7B,KAAAA,UAAU,CACT1oB,SACI,+MAIJ0E,KAAM,CACJ8kB,UAAW,+CACXZ,SAAU,cACVa,qBAAsB,iCACtBC,mBAAoB,mDAEtBtJ,UAAW,CAAC2I,0BAWPxc,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAOyc,0DADDJ,KAAAA,UAAgCC,KAAAA,WAAUa,WARtDX,sBAAb;;;;;;;;AClDA,SAAgBY,mBAAmBC,WACjC,OAAgBA,UAAWC,SAClB,SAACr8B,GAAuB,OAAYo8B,UAAWC,SAASr8B,IAE3Co8B,UAIxB,SAAgBE,wBAAwBF,WAEtC,OAAqBA,UAAWC,SACvB,SAACr8B,GAAuB,OAAiBo8B,UAAWC,SAASr8B,IAE3Co8B;;;;;;;WCZhBG,sBAA6B,CACxCnd,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAAoC,sBAC9Bxc,OAAO,GA2BTwc,oBAAA,WAIE,SAAAA,oBAAoBlC,UAA8BC,aAA9Bz7B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAHlDz7B,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAkBd,OAdE8B,oBAAAx9B,UAAA27B,WAAA,SAAWx5B,OAET,IAAMw6B,gBAA2B,MAATx6B,MAAgB,GAAKA,MAC7CrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,QAASe,kBAGtEa,oBAAAx9B,UAAA67B,iBAAA,SAAiBn4B,IACf5D,KAAK07B,SAAW,SAACr5B,OAAYuB,GAAY,IAATvB,MAAc,KAAO22B,WAAW32B,UAElEq7B,oBAAAx9B,UAAA87B,kBAAA,SAAkBp4B,IAAwB5D,KAAK47B,UAAYh4B,IAE3D85B,oBAAAx9B,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAlB9DwB,oBAAmB78B,WAAA,CAV/Bs7B,KAAAA,UAAU,CACT1oB,SACI,kGACJ0E,KAAM,CACJikB,WAAY,gCACZa,UAAW,gCACXZ,SAAU,eAEZxI,UAAW,CAAC4J,yDAMmBnB,KAAAA,UAAgCC,KAAAA,cAJpDmB,qBAAb;;;;;;;;AC5BA,SAASC,gBACP,MAAM,IAAIx6B,MAAM,iBAQlB,IAAAy6B,UAAA,SAAAx3B,QAAA,SAAAw3B,YAAA,IAAAv3B,MAAA,OAAAD,QAAAA,OAAAyM,MAAA7S,KAAAU,YAAAV,YAOEqG,MAAA/B,QAAiC,KAMjC+B,MAAAjC,KAAoB,KAMpBiC,MAAAw3B,cAA2C,KAQ3Cx3B,MAAAy3B,eAA+C,GAQ/Cz3B,MAAA03B,oBAA8D,SAyBhE,OA5DwCh3B,UAAAA,UAAAA,QA2CtCzH,OAAAiC,eAAIq8B,UAAA19B,UAAA,YAAS,KAAb,WAAoC,OAAoBy9B,iDAQxDr+B,OAAAiC,eAAIq8B,UAAA19B,UAAA,iBAAc,KAAlB,WAA8C,OAAyBy9B,iDASzEC,UA5DA,CAAwCrG,0BCV3ByG,qBAA4B,CACvC1d,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAA2C,4BAC9B/c,OAAO,GAOTgd,qBAAA,WADA,SAAAA,uBAEUl+B,KAAAm+B,WAAoB,GA8B9B,OA5BED,qBAAAh+B,UAAAkF,IAAA,SAAIiqB,QAAoB+O,UACtBp+B,KAAKm+B,WAAWz7B,KAAK,CAAC2sB,QAAS+O,YAGjCF,qBAAAh+B,UAAA4E,OAAA,SAAOs5B,UACL,IAAK,IAAI59B,EAAIR,KAAKm+B,WAAWx9B,OAAS,EAAQ,GAALH,IAAUA,EACjD,GAAIR,KAAKm+B,WAAW39B,GAAG,KAAO49B,SAE5B,YADAp+B,KAAKm+B,WAAW1S,OAAOjrB,EAAG,IAMhC09B,qBAAAh+B,UAAAm+B,OAAA,SAAOD,UAAP,IAAA/3B,MAAArG,KACEA,KAAKm+B,WAAWt1B,QAAQ,SAAC3H,GACnBmF,MAAKi4B,aAAap9B,EAAGk9B,WAAal9B,EAAE,KAAOk9B,UAC7Cl9B,EAAE,GAAGq9B,YAAYH,SAAS/7B,UAKxB67B,qBAAAh+B,UAAAo+B,aAAR,SACIE,YACAJ,UACF,QAAKI,YAAY,GAAGnP,UACbmP,YAAY,GAAGl6B,UAAY85B,SAASK,SAASn6B,SAChDk6B,YAAY,GAAGp6B,OAASg6B,SAASh6B,OA7B5B85B,qBAAoBr9B,WAAA,CADhCkf,KAAAA,cACYme,sBAAb,GAoEAD,0BAAA,WAoBE,SAAAA,0BACYzC,UAA8BC,YAC9BiD,UAAyCC,WADzC3+B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAC9Bz7B,KAAA0+B,UAAAA,UAAyC1+B,KAAA2+B,UAAAA,UAXrD3+B,KAAA07B,SAAW,aACX17B,KAAA47B,UAAY,aAsDd,OA1CEqC,0BAAA/9B,UAAA0+B,SAAA,WACE5+B,KAAKy+B,SAAWz+B,KAAK2+B,UAAUhe,IAAIid,WACnC59B,KAAK6+B,aACL7+B,KAAK0+B,UAAUt5B,IAAIpF,KAAKy+B,SAAUz+B,OAGpCi+B,0BAAA/9B,UAAAulB,YAAA,WAAsBzlB,KAAK0+B,UAAU55B,OAAO9E,OAE5Ci+B,0BAAA/9B,UAAA27B,WAAA,SAAWx5B,OACTrC,KAAK8+B,OAASz8B,QAAUrC,KAAKqC,MAC7BrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,UAAW97B,KAAK8+B,SAG7Eb,0BAAA/9B,UAAA67B,iBAAA,SAAiBn4B,IAAjB,IAAAyC,MAAArG,KACEA,KAAK++B,IAAMn7B,GACX5D,KAAK07B,SAAW,WACd93B,GAAGyC,MAAKhE,OACRgE,MAAKq4B,UAAUL,OAAOh4B,SAI1B43B,0BAAA/9B,UAAAq+B,YAAA,SAAYl8B,OAAoBrC,KAAK67B,WAAWx5B,QAEhD47B,0BAAA/9B,UAAA87B,kBAAA,SAAkBp4B,IAAsB5D,KAAK47B,UAAYh4B,IAEzDq6B,0BAAA/9B,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAGjE+B,0BAAA/9B,UAAA2+B,WAAR,WACM7+B,KAAKoE,MAAQpE,KAAKg/B,iBAAmBh/B,KAAKoE,OAASpE,KAAKg/B,iBAC1Dh/B,KAAKi/B,mBAEFj/B,KAAKoE,MAAQpE,KAAKg/B,kBAAiBh/B,KAAKoE,KAAOpE,KAAKg/B,kBAGnDf,0BAAA/9B,UAAA++B,gBAAR,WACE,MAAM,IAAI97B,MAAM,8LA9CT+7B,WAAAA,CAARC,KAAAA,6FAEQD,WAAAA,CAARC,KAAAA,wGACQD,WAAAA,CAARC,KAAAA,8FAlBUlB,0BAAyBp9B,WAAA,CANrCs7B,KAAAA,UAAU,CACT1oB,SACI,+FACJ0E,KAAM,CAACikB,WAAY,aAAcC,SAAU,eAC3CxI,UAAW,CAACmK,wDAuBW1B,KAAAA,UAAgCC,KAAAA,WAChC2B,qBAAyCjd,KAAAA,YAtBrDgd,2BAAb,GC/EamB,qBAAuC,CAClD9e,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAA+D,qBAC9Bne,OAAO,GA2BTme,mBAAA,WAIE,SAAAA,mBAAoB7D,UAA8BC,aAA9Bz7B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAHlDz7B,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAiBd,OAbEyD,mBAAAn/B,UAAA27B,WAAA,SAAWx5B,OACTrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,QAAS9C,WAAW32B,SAGjFg9B,mBAAAn/B,UAAA67B,iBAAA,SAAiBn4B,IACf5D,KAAK07B,SAAW,SAACr5B,OAAYuB,GAAY,IAATvB,MAAc,KAAO22B,WAAW32B,UAGlEg9B,mBAAAn/B,UAAA87B,kBAAA,SAAkBp4B,IAAwB5D,KAAK47B,UAAYh4B,IAE3Dy7B,mBAAAn/B,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAjB9DmD,mBAAkBx+B,WAAA,CAV9Bs7B,KAAAA,UAAU,CACT1oB,SACI,+FACJ0E,KAAM,CACJikB,WAAY,gCACZa,UAAW,gCACXZ,SAAU,eAEZxI,UAAW,CAACuL,wDAMmB9C,KAAAA,UAAgCC,KAAAA,cAJpD8C,oBAAb,GClCaC,kCACM,qMADNA,gCAYI,wRAZJA,gCAyBI,iYAzBJA,+BAyCG,6IAzCHA,uCAgDW,qLC/CxBC,eAAA,WAEA,SAAAA,kBA8EA,OA7ESA,eAAAC,uBAAP,WACE,MAAM,IAAIr8B,MACN,+NAKAs8B,oCAGCF,eAAAG,sBAAP,WACE,MAAM,IAAIv8B,MACN,qRAKEs8B,gCAAsB,sGAItBA,iCAEDF,eAAAI,qBAAP,WACE,MAAM,IAAIx8B,MAAM,4FAIXs8B,oCAGAF,eAAAK,qBAAP,WACE,MAAM,IAAIz8B,MACN,4NAKAs8B,kCAGCF,eAAAM,qBAAP,WACE,MAAM,IAAI18B,MACN,iOAKEs8B,kCAGDF,eAAAO,oBAAP,WACE9sB,QAAQwb,KAAK,qiBAaR+Q,eAAAQ,eAAP,SAAsBC,eACpBhtB,QAAQwb,KAAK,sEACkDwR,cAAa,kSAM3B,gBAAlBA,cAAkC,uBAC7D,mBAAiB,4BAGzBT,eAhFA,GCGaU,sBAAwC,CACnD3f,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAA4E,6BAC9Bhf,OAAO;;;;;;;OAGT,SAASif,kBAAkB/Y,GAAmB/kB,OAC5C,OAAU,MAAN+kB,GAAmB,GAAG/kB,OACtBA,OAA0B,iBAAVA,QAAoBA,MAAQ,WACtC+kB,GAAE,KAAK/kB,OAAQoW,MAAM,EAAG,KA4EpC,IAAAynB,2BAAA,WAoBE,SAAAA,2BAAoB1E,UAA8BC,aAA9Bz7B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAjBlDz7B,KAAAogC,WAA+B,IAAI/mB,IAEnCrZ,KAAAqgC,WAAqB,EAErBrgC,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAUJ57B,KAAAsgC,aAA8CC,KAAAA,gBA0CxD,OAjDEjhC,OAAAiC,eAAI2+B,2BAAAhgC,UAAA,cAAW,KAAf,SAAgB0D,IACd,GAAkB,mBAAPA,GACT,MAAM,IAAIT,MAAM,gDAAgDszB,KAAKC,UAAU9yB,KAEjF5D,KAAKsgC,aAAe18B,oCAOtBs8B,2BAAAhgC,UAAA27B,WAAA,SAAWx5B,OACTrC,KAAKqC,MAAQA,MACb,IAAM+kB,GAAkBpnB,KAAKwgC,aAAan+B,OAChC,MAAN+kB,IACFpnB,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,iBAAkB,GAE/E,IAAM2E,YAAcN,kBAAkB/Y,GAAI/kB,OAC1CrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,QAAS2E,cAGtEP,2BAAAhgC,UAAA67B,iBAAA,SAAiBn4B,IAAjB,IAAAyC,MAAArG,KACEA,KAAK07B,SAAW,SAAC+E,aACfp6B,MAAKhE,MAAQgE,MAAKq6B,gBAAgBD,aAClC78B,GAAGyC,MAAKhE,SAGZ69B,2BAAAhgC,UAAA87B,kBAAA,SAAkBp4B,IAAuB5D,KAAK47B,UAAYh4B,IAE1Ds8B,2BAAAhgC,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAIzEgE,2BAAAhgC,UAAAygC,gBAAA,WAA4B,OAAQ3gC,KAAKqgC,cAAcn8B,YAGvDg8B,2BAAAhgC,UAAAsgC,aAAA,SAAan+B,sBACX,IAAiB,IAAAu+B,GAAAC,SAAAphC,MAAMqN,KAAK9M,KAAKogC,WAAW3xB,SAAOqyB,GAAAF,GAAAx+B,QAAA0+B,GAAAx+B,KAAAw+B,GAAAF,GAAAx+B,OAAE,CAAhD,IAAMglB,GAAE0Z,GAAAz+B,MACX,GAAIrC,KAAKsgC,aAAatgC,KAAKogC,WAAWzf,IAAIyG,IAAK/kB,OAAQ,OAAO+kB,yHAEhE,OAAO,MAIT8Y,2BAAAhgC,UAAAwgC,gBAAA,SAAgBD,aACd,IAAMrZ,GAlIV,SAAoBqZ,aAClB,OAAOA,YAAYvQ,MAAM,KAAK,GAiIT6Q,CAAWN,aAC9B,OAAOzgC,KAAKogC,WAAWxb,IAAIwC,IAAMpnB,KAAKogC,WAAWzf,IAAIyG,IAAMqZ,aA/C7DvB,WAAAA,CADCC,KAAAA,gJAVUe,2BAA0Br/B,WAAA,CANtCs7B,KAAAA,UAAU,CACT1oB,SACI,8GACJ0E,KAAM,CAACikB,WAAY,gCAAiCC,SAAU,eAC9DxI,UAAW,CAACoM,yDAsBmB3D,KAAAA,UAAgCC,KAAAA,cApBpD2D,4BAAb,GAyEAc,eAAA,WAIE,SAAAA,eACYC,SAA8BzF,UACV0F,SADpBlhC,KAAAihC,SAAAA,SAA8BjhC,KAAAw7B,UAAAA,UACVx7B,KAAAkhC,QAAAA,QAC1BlhC,KAAKkhC,UAASlhC,KAAKonB,GAAKpnB,KAAKkhC,QAAQP,mBA4B7C,OAxBErhC,OAAAiC,eAAIy/B,eAAA9gC,UAAA,UAAO,KAAX,SAAYmC,OACU,MAAhBrC,KAAKkhC,UACTlhC,KAAKkhC,QAAQd,WAAW3mB,IAAIzZ,KAAKonB,GAAI/kB,OACrCrC,KAAKmhC,iBAAiBhB,kBAAkBngC,KAAKonB,GAAI/kB,QACjDrC,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,yCAIvC/C,OAAAiC,eAAIy/B,eAAA9gC,UAAA,QAAK,KAAT,SAAUmC,OACRrC,KAAKmhC,iBAAiB9+B,OAClBrC,KAAKkhC,SAASlhC,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,wCAIzD2+B,eAAA9gC,UAAAihC,iBAAA,SAAiB9+B,OACfrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKihC,SAASnF,cAAe,QAASz5B,QAGnE2+B,eAAA9gC,UAAAulB,YAAA,WACMzlB,KAAKkhC,UACPlhC,KAAKkhC,QAAQd,WAAW5a,OAAOxlB,KAAKonB,IACpCpnB,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,SArBzC68B,WAAAA,CADCC,KAAAA,MAAM,+HASPD,WAAAA,CADCC,KAAAA,MAAM,2HAlBI6B,eAAcngC,WAAA,CAD1Bs7B,KAAAA,UAAU,CAAC1oB,SAAU,WAOfuM,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,wCADK7E,KAAAA,WAA+BD,KAAAA,UACZ4D,8BAN9Bc,gBAAb,GC9JaK,+BAAiD,CAC5D/gB,QAAS8a,kBACTrI,YAAauI,KAAAA,WAAW,WAAM,OAAAgG,qCAC9BpgB,OAAO,GAGT,SAASif,oBAAkB/Y,GAAY/kB,OACrC,OAAU,MAAN+kB,GAAmB,GAAG/kB,OACL,iBAAVA,QAAoBA,MAAQ,IAAIA,MAAK,KAC5CA,OAA0B,iBAAVA,QAAoBA,MAAQ,WACtC+kB,GAAE,KAAK/kB,OAAQoW,MAAM,EAAG,KA0DpC,IAAA6oB,mCAAA,WAoBE,SAAAA,mCAAoB9F,UAA8BC,aAA9Bz7B,KAAAw7B,UAAAA,UAA8Bx7B,KAAAy7B,YAAAA,YAjBlDz7B,KAAAogC,WAAkD,IAAI/mB,IAEtDrZ,KAAAqgC,WAAqB,EAErBrgC,KAAA07B,SAAW,SAACC,KACZ37B,KAAA47B,UAAY,aAUJ57B,KAAAsgC,aAA8CC,KAAAA,gBAqExD,OA5EEjhC,OAAAiC,eAAI+/B,mCAAAphC,UAAA,cAAW,KAAf,SAAgB0D,IACd,GAAkB,mBAAPA,GACT,MAAM,IAAIT,MAAM,gDAAgDszB,KAAKC,UAAU9yB,KAEjF5D,KAAKsgC,aAAe18B,oCAOtB09B,mCAAAphC,UAAA27B,WAAA,SAAWx5B,OAAX,IAEMk/B,0BAFNl7B,MAAArG,KAGE,GAFAA,KAAKqC,MAAQA,MAET5C,MAAMyF,QAAQ7C,OAAQ,CAExB,IAAMm/B,MAAMn/B,MAAM4B,IAAI,SAAC0lB,GAAM,OAAAtjB,MAAKm6B,aAAa7W,KAC/C4X,0BAA4B,SAACE,IAAKz/B,GAAQy/B,IAAIC,cAA0C,EAA7BF,MAAI57B,QAAQ5D,EAAEkC,mBAEzEq9B,0BAA4B,SAACE,IAAKz/B,GAAQy/B,IAAIC,cAAa,IAE7D1hC,KAAKogC,WAAWv3B,QAAQ04B,4BAG1BD,mCAAAphC,UAAA67B,iBAAA,SAAiBn4B,IAAjB,IAAAyC,MAAArG,KACEA,KAAK07B,SAAW,SAACC,GACf,IAAMgG,SAAuB,GAC7B,GAAIhG,EAAE97B,eAAe,mBAEnB,IADA,IAAMquB,QAA0ByN,EAAEiG,gBACzBphC,EAAI,EAAGA,EAAI0tB,QAAQvtB,OAAQH,IAAK,CACvC,IAAMihC,IAAWvT,QAAQ/hB,KAAK3L,GACxBqhC,IAAWx7B,MAAKq6B,gBAAgBe,IAAIp/B,OAC1Cs/B,SAASj/B,KAAKm/B,UAMhB,IADM3T,QAA0CyN,EAAEzN,QACzC1tB,EAAI,EAAGA,EAAI0tB,QAAQvtB,OAAQH,IAAK,CAEvC,IADMihC,IAAkBvT,QAAQ/hB,KAAK3L,IAC7BmhC,SAAU,CACVE,IAAWx7B,MAAKq6B,gBAAgBe,IAAIp/B,OAC1Cs/B,SAASj/B,KAAKm/B,MAIpBx7B,MAAKhE,MAAQs/B,SACb/9B,GAAG+9B,YAGPL,mCAAAphC,UAAA87B,kBAAA,SAAkBp4B,IAAuB5D,KAAK47B,UAAYh4B,IAE1D09B,mCAAAphC,UAAA+7B,iBAAA,SAAiBC,YACfl8B,KAAKw7B,UAAUhpB,YAAYxS,KAAKy7B,YAAYK,cAAe,WAAYI,aAIzEoF,mCAAAphC,UAAAygC,gBAAA,SAAgBt+B,OACd,IAAM+kB,IAAcpnB,KAAKqgC,cAAcn8B,WAEvC,OADAlE,KAAKogC,WAAW3mB,IAAI2N,GAAI/kB,OACjB+kB,IAITka,mCAAAphC,UAAAsgC,aAAA,SAAan+B,sBACX,IAAiB,IAAAu+B,GAAAC,SAAAphC,MAAMqN,KAAK9M,KAAKogC,WAAW3xB,SAAOqyB,GAAAF,GAAAx+B,QAAA0+B,GAAAx+B,KAAAw+B,GAAAF,GAAAx+B,OAAE,CAAhD,IAAMglB,GAAE0Z,GAAAz+B,MACX,GAAIrC,KAAKsgC,aAAatgC,KAAKogC,WAAWzf,IAAIyG,IAAM0a,OAAQz/B,OAAQ,OAAO+kB,yHAEzE,OAAO,MAITka,mCAAAphC,UAAAwgC,gBAAA,SAAgBD,aACd,IAAMrZ,GA3IV,SAAoBqZ,aAClB,OAAOA,YAAYvQ,MAAM,KAAK,GA0IT6Q,CAAWN,aAC9B,OAAOzgC,KAAKogC,WAAWxb,IAAIwC,IAAMpnB,KAAKogC,WAAWzf,IAAIyG,IAAM0a,OAASrB,aA1EtEvB,WAAAA,CADCC,KAAAA,wJAVUmC,mCAAkCzgC,WAAA,CAN9Cs7B,KAAAA,UAAU,CACT1oB,SACI,4FACJ0E,KAAM,CAACikB,WAAY,0BAA2BC,SAAU,eACxDxI,UAAW,CAACwN,kEAsBmB/E,KAAAA,UAAgCC,KAAAA,cApBpD+E,oCAAb,GAwGAS,uBAAA,WAME,SAAAA,uBACYd,SAA8BzF,UACV0F,SADpBlhC,KAAAihC,SAAAA,SAA8BjhC,KAAAw7B,UAAAA,UACVx7B,KAAAkhC,QAAAA,QAC1BlhC,KAAKkhC,UACPlhC,KAAKonB,GAAKpnB,KAAKkhC,QAAQP,gBAAgB3gC,OAuC7C,OAlCEV,OAAAiC,eAAIwgC,uBAAA7hC,UAAA,UAAO,KAAX,SAAYmC,OACU,MAAhBrC,KAAKkhC,UACTlhC,KAAK8hC,OAASz/B,MACdrC,KAAKmhC,iBAAiBhB,oBAAkBngC,KAAKonB,GAAI/kB,QACjDrC,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,yCAIvC/C,OAAAiC,eAAIwgC,uBAAA7hC,UAAA,QAAK,KAAT,SAAUmC,OACJrC,KAAKkhC,SACPlhC,KAAK8hC,OAASz/B,MACdrC,KAAKmhC,iBAAiBhB,oBAAkBngC,KAAKonB,GAAI/kB,QACjDrC,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,QAErCrC,KAAKmhC,iBAAiB9+B,wCAK1B0/B,uBAAA7hC,UAAAihC,iBAAA,SAAiB9+B,OACfrC,KAAKw7B,UAAUhpB,YAAYxS,KAAKihC,SAASnF,cAAe,QAASz5B,QAInE0/B,uBAAA7hC,UAAAwhC,aAAA,SAAaC,UACX3hC,KAAKw7B,UAAUhpB,YAAYxS,KAAKihC,SAASnF,cAAe,WAAY6F,WAGtEI,uBAAA7hC,UAAAulB,YAAA,WACMzlB,KAAKkhC,UACPlhC,KAAKkhC,QAAQd,WAAW5a,OAAOxlB,KAAKonB,IACpCpnB,KAAKkhC,QAAQrF,WAAW77B,KAAKkhC,QAAQ7+B,SA/BzC68B,WAAAA,CADCC,KAAAA,MAAM,uIASPD,WAAAA,CADCC,KAAAA,MAAM,mIAtBI4C,uBAAsBlhC,WAAA,CADlCs7B,KAAAA,UAAU,CAAC1oB,SAAU,WASfuM,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,wCADK7E,KAAAA,WAA+BD,KAAAA,UACZgF,sCAR9BS,wBAAb;;;;;;;;SC1JgBC,YAAY59B,KAAcyB,QACxC,OAAAjD,SAAWiD,OAAO0yB,KAAM,CAAEn0B,OAG5B,SAAgB69B,aAAa5S,QAAsB6S,KAC5C7S,SAAS8S,YAAYD,IAAK,4BAC1BA,IAAIrE,eAAesE,YAAYD,IAAK,2CAEzC7S,QAAQiO,UAAYxE,WAAWuB,QAAQ,CAAChL,QAAQiO,UAAa4E,IAAI5E,YACjEjO,QAAQ+S,eAAiBtJ,WAAW6B,aAAa,CAACtL,QAAQ+S,eAAkBF,IAAIE,iBAChFF,IAAIrE,cAAgBhC,WAAWxM,QAAQhtB,OA2CzC,SAAiCgtB,QAAsB6S,KACrDA,IAAIrE,cAAgB9B,iBAAiB,SAACsG,UACpChT,QAAQiT,cAAgBD,SACxBhT,QAAQkT,gBAAiB,EACzBlT,QAAQmT,eAAgB,EAEC,WAArBnT,QAAQoT,UAAuBC,cAAcrT,QAAS6S,OA/C5DS,CAAwBtT,QAAS6S,KAmEnC,SAAkC7S,QAAsB6S,KACtD7S,QAAQ0M,iBAAiB,SAACsG,SAAeO,gBAEvCV,IAAIrE,cAAgBhC,WAAWwG,UAG3BO,gBAAgBV,IAAIW,kBAAkBR,YAxE5CS,CAAyBzT,QAAS6S,KAkDpC,SAA2B7S,QAAsB6S,KAC/CA,IAAIrE,cAAgB7B,kBAAkB,WACpC3M,QAAQ0T,iBAAkB,EAED,SAArB1T,QAAQoT,UAAuBpT,QAAQkT,gBAAgBG,cAAcrT,QAAS6S,KACzD,WAArB7S,QAAQoT,UAAuBpT,QAAQ2T,kBArD7CC,CAAkB5T,QAAS6S,KAEvBA,IAAIrE,cAAgB5B,kBACtB5M,QAAQ6T,yBACJ,SAAChH,YAA0BgG,IAAIrE,cAAgB5B,iBAAmBC,cAIxEgG,IAAIpE,eAAej1B,QAAQ,SAACy0B,WACVA,UAAW6F,2BACb7F,UAAW6F,0BAA4B,WAAM,OAAA9T,QAAQ+T,6BAGrElB,IAAInE,oBAAoBl1B,QAAQ,SAACy0B,WACfA,UAAW6F,2BACb7F,UAAW6F,0BAA4B,WAAM,OAAA9T,QAAQ+T,6BA0CvE,SAASV,cAAcrT,QAAsB6S,KACvC7S,QAAQmT,eAAenT,QAAQgU,cACnChU,QAAQzY,SAASyY,QAAQiT,cAAe,CAACgB,uBAAuB,IAChEpB,IAAIW,kBAAkBxT,QAAQiT,eAC9BjT,QAAQkT,gBAAiB,EAa3B,SAAgBgB,mBACZlU,QAAgC6S,KACnB,MAAX7S,SAAiB8S,YAAYD,IAAK,4BACtC7S,QAAQiO,UAAYxE,WAAWuB,QAAQ,CAAChL,QAAQiO,UAAW4E,IAAI5E,YAC/DjO,QAAQ+S,eAAiBtJ,WAAW6B,aAAa,CAACtL,QAAQ+S,eAAgBF,IAAIE,iBAGhF,SAASoB,gBAAgBtB,KACvB,OAAOC,YAAYD,IAAK,0EAG1B,SAASC,YAAYD,IAA+Bl+B,SAClD,IAAIy/B,WAQJ,MANEA,WADsB,EAApBvB,IAAI3J,KAAO53B,OACA,UAAUuhC,IAAI3J,KAAMp0B,KAAK,QAAO,IACpC+9B,IAAI3J,KAAO,GACP,UAAU2J,IAAI3J,KAAI,IAElB,6BAET,IAAIp1B,MAASa,QAAO,IAAIy/B,YAGhC,SAAgBC,kBAAkBpJ,YAChC,OAAqB,MAAdA,WAAqBxB,WAAWuB,QAAQC,WAAWr2B,IAAIo5B,qBAAuB,KAGvF,SAAgBsG,uBAAuBrJ,YAErC,OAAqB,MAAdA,WAAqBxB,WAAW6B,aAAaL,WAAWr2B,IAAIu5B,0BACvC,KAG9B,SAAgBoG,kBAAkBC,QAA+BC,WAC/D,IAAKD,QAAQhkC,eAAe,SAAU,OAAO,EAC7C,IAAMkkC,OAASF,QAAe,MAE9B,QAAIE,OAAOC,kBACHzD,KAAAA,gBAAeuD,UAAWC,OAAOE,cAG3C,IAAMC,kBAAoB,CACxB3I,6BACA8D,mBACA3B,oBACAwC,2BACAoB,mCACArD,2BAOF,SAAgBkG,oBAAoBC,KAAiBC,YACnDD,KAAKE,uBACLD,WAAWx7B,QAAQ,SAAAq5B,KACjB,IAAM7S,QAAU6S,IAAI7S,QACK,WAArBA,QAAQoT,UAAyBpT,QAAQkT,iBAC3CL,IAAIW,kBAAkBxT,QAAQiT,eAC9BjT,QAAQkT,gBAAiB,KAM/B,SAAgBgC,oBACZrC,IAAgBsC,gBAClB,IAAKA,eAAgB,OAAO,KAEvB/kC,MAAMyF,QAAQs/B,iBACjBrC,YAAYD,IAAK,qEAEnB,IAAIuC,qBAAkDvhC,EAClDwhC,qBAAkDxhC,EAClDyhC,oBAAiDzhC,EAkBrD,OAhBAshC,eAAe37B,QAAQ,SAAC8gB,GA3B1B,IAAkCkU,cA4B1BlU,EAAE1pB,cAAgBw8B,qBACpBgI,gBAAkB9a,GA7BUkU,cA+BDlU,EA9BxBua,kBAAkBU,KAAK,SAAAC,GAAK,OAAAhH,cAAc59B,cAAgB4kC,KA+BzDH,iBACFvC,YAAYD,IAAK,mEACnBwC,gBAAkB/a,IAGdgb,gBACFxC,YAAYD,IAAK,iEACnByC,eAAiBhb,MAIjBgb,iBACAD,kBACAD,kBAEJtC,YAAYD,IAAK,iDACV,QAGT,SAAgB4C,UAAa5P,KAAWvmB,IACtC,IAAM/J,MAAQswB,KAAKtvB,QAAQ+I,KACd,EAAT/J,OAAYswB,KAAKzJ,OAAO7mB,MAAO,GAIrC,SAAgBmgC,gBACZ3gC,KAAcgR,KACd4vB,SAA0CC,eACvCC,KAAAA,aAAiC,UAAlBD,iBAEI,OAAlBA,eAA4C,SAAlBA,eAA8B7vB,KAAK+vB,2BAC5C,WAAlBF,eAA+BD,SAASI,uBAC3C7F,eAAeQ,eAAe37B,MAC9BgR,KAAK+vB,yBAA0B,EAC/BH,SAASI,qBAAsB;;;;;;;OCnNnC,IAAAC,2BAAA,SAAAj/B,QAAA,SAAAi/B,sFAmFA,OAnFgDt+B,UAAAA,2BAAAA,QAiC9Cs+B,2BAAAnlC,UAAA0+B,SAAA,WACE5+B,KAAKslC,mBACLtlC,KAAKulC,cAAgBC,aAAaxlC,OAQpCqlC,2BAAAnlC,UAAAulB,YAAA,WACMzlB,KAAKulC,eACPvlC,KAAKulC,cAAcE,gBAAgBzlC,OAQvCV,OAAAiC,eAAI8jC,2BAAAnlC,UAAA,UAAO,KAAX,WAA2B,OAAOF,KAAKulC,cAAgBG,aAAa1lC,uCAMpEV,OAAAiC,eAAI8jC,2BAAAnlC,UAAA,OAAI,KAAR,WAAuB,OAAO8hC,YAAYhiC,KAAKoE,KAAMpE,KAAKsE,0CAM1DhF,OAAAiC,eAAI8jC,2BAAAnlC,UAAA,gBAAa,KAAjB,WAAiC,OAAOF,KAAKsE,QAAUtE,KAAKsE,QAAQihC,cAAgB,sCAMpFjmC,OAAAiC,eAAI8jC,2BAAAnlC,UAAA,YAAS,KAAb,WAAoC,OAAOwjC,kBAAkB1jC,KAAK2lC,8CAMlErmC,OAAAiC,eAAI8jC,2BAAAnlC,UAAA,iBAAc,KAAlB,WACE,OAAOyjC,uBAAuB3jC,KAAK4lC,mDAIrCP,2BAAAnlC,UAAAolC,iBAAA,aACFD,2BAnFA,CAAgD5M,mDCP9C,SAAAoN,sBAAYC,IAAgC9lC,KAAK+lC,IAAMD,GASzD,OAPExmC,OAAAiC,eAAIskC,sBAAA3lC,UAAA,mBAAgB,KAApB,WAAkC,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQ4I,2CAC7E34B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,iBAAc,KAAlB,WAAgC,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQ0I,yCAC3Ez4B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,kBAAe,KAAnB,WAAiC,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQwI,0CAC5Ev4B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,eAAY,KAAhB,WAA8B,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQyI,uCACzEx4B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,eAAY,KAAhB,WAA8B,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQmI,uCACzEl4B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,iBAAc,KAAlB,WAAgC,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQoI,yCAC3En4B,OAAAiC,eAAIskC,sBAAA3lC,UAAA,iBAAc,KAAlB,WAAgC,QAAOF,KAAK+lC,IAAI1W,SAAUrvB,KAAK+lC,IAAI1W,QAAQqI,yCAC7EmO,yBAEaG,oBAAsB,CACjCC,uBAAwB,mBACxBC,qBAAsB,iBACtBC,sBAAuB,kBACvBC,mBAAoB,eACpBC,mBAAoB,eACpBC,qBAAsB,iBACtBC,qBAAsB,kBAoBxBC,gBAAA,SAAApgC,QACE,SAAAogC,gBAAoBV,WAAiB1/B,OAAAxF,KAAAZ,KAAM8lC,KAAG9lC,KAChD,OAFqC+G,UAAAA,gBAAAA,QAAxBy/B,gBAAe3lC,WAAA,CAD3Bs7B,KAAAA,UAAU,CAAC1oB,SAAU,4CAA6C0E,KAAM6tB,sBAE1DhmB,QAAAA,EAAAymB,KAAAA,wCAAW7I,aADb4I,iBAAb,CAAqCX,uBAgBrCa,qBAAA,SAAAtgC,QACE,SAAAsgC,qBAAoBZ,WAAwB1/B,OAAAxF,KAAAZ,KAAM8lC,KAAG9lC,KACvD,OAF0C+G,UAAAA,qBAAAA,QAA7B2/B,qBAAoB7lC,WAAA,CALhCs7B,KAAAA,UAAU,CACT1oB,SACI,2FACJ0E,KAAM6tB,sBAGOhmB,QAAAA,EAAAymB,KAAAA,wCAAWhO,oBADbiO,sBAAb,CAA0Cb;;;;;;;OCJ1C,SAASc,kBACLC,iBAEF,IAAMtJ,UACDuJ,aAAaD,iBAAoBA,gBAA2CtM,WAC5CsM,gBAGrC,OAAOnnC,MAAMyF,QAAQo4B,WAAaoG,kBAAkBpG,WAAaA,WAAa,KAGhF,SAASwJ,uBACL1E,eAA+DwE,iBAEjE,IAAMG,mBACDF,aAAaD,iBAAoBA,gBAA2CI,gBAC5C5E,eAGrC,OAAO3iC,MAAMyF,QAAQ6hC,oBAAsBpD,uBAAuBoD,oBACvBA,oBAAsB,KA0BnE,SAASF,aACLD,iBACF,OAA0B,MAAnBA,kBAA4BnnC,MAAMyF,QAAQ0hC,kBAClB,iBAApBA,gBAiBb,IAAAK,gBAAA,WAsCE,SAAAA,gBAAmB3J,UAAoC8E,gBAApCpiC,KAAAs9B,UAAAA,UAAoCt9B,KAAAoiC,eAAAA,eA5BvDpiC,KAAAknC,oBAAsB,aAsHNlnC,KAAA63B,UAAoB,EAiBpB73B,KAAA+3B,SAAmB,EA+dnC/3B,KAAAmnC,kBAAgC,GAiBlC,OAtlBE7nC,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,SAAM,KAAV,WAAoC,OAAOF,KAAKsE,yCAyBhDhF,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,QAAK,KAAT,WAAuB,MAtLJ,UAsLWF,KAAKg4B,wCAUnC14B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,UAAO,KAAX,WAAyB,MAzLJ,YAyLWF,KAAKg4B,wCAUrC14B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,UAAO,KAAX,WAAyB,MA1LJ,WA0LWF,KAAKg4B,wCAarC14B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,WAAQ,KAAZ,WAA0B,MA9LJ,aA8LWF,KAAKg4B,wCAWtC14B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,UAAO,KAAX,WAAyB,MAzMH,aAyMUF,KAAKg4B,wCAyBrC14B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,QAAK,KAAT,WAAuB,OAAQF,KAAK63B,0CAgBpCv4B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,YAAS,KAAb,WAA2B,OAAQF,KAAK+3B,yCAsBxCz4B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAKonC,UAAYpnC,KAAKonC,UAAapnC,KAAK6F,OAAS7F,KAAK6F,OAAO48B,SAAW,0CAOjFwE,gBAAA/mC,UAAAmnC,cAAA,SAAcC,cACZtnC,KAAKs9B,UAAYqJ,kBAAkBW,eAOrCL,gBAAA/mC,UAAAqnC,mBAAA,SAAmBD,cACjBtnC,KAAKoiC,eAAiB0E,uBAAuBQ,eAM/CL,gBAAA/mC,UAAAsnC,gBAAA,WAA0BxnC,KAAKs9B,UAAY,MAK3C2J,gBAAA/mC,UAAAunC,qBAAA,WAA+BznC,KAAKoiC,eAAiB,MAWrD6E,gBAAA/mC,UAAA8iC,cAAA,SAAc0E,WAAA,IAAAA,OAAAA,KAAA,IACX1nC,KAA2B+3B,SAAU,EAElC/3B,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ0+B,cAAc0E,OAe/BT,gBAAA/mC,UAAA0nC,gBAAA,SAAgBF,WAAA,IAAAA,OAAAA,KAAA,IACb1nC,KAA2B+3B,SAAU,EACtC/3B,KAAK+iC,iBAAkB,EAEvB/iC,KAAK6nC,cACD,SAACxY,SAA+BA,QAAQuY,gBAAgB,CAACD,UAAU,MAEnE3nC,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQwjC,eAAeJ,OAahCT,gBAAA/mC,UAAAmjC,YAAA,SAAYqE,WAAA,IAAAA,OAAAA,KAAA,IACT1nC,KAA4B63B,UAAW,EAEpC73B,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ++B,YAAYqE,OAgB7BT,gBAAA/mC,UAAA6nC,eAAA,SAAeL,WAAA,IAAAA,OAAAA,KAAA,IACZ1nC,KAA4B63B,UAAW,EACxC73B,KAAKwiC,eAAgB,EAErBxiC,KAAK6nC,cAAc,SAACxY,SAA+BA,QAAQ0Y,eAAe,CAACJ,UAAU,MAEjF3nC,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ0jC,gBAAgBN,OAkBjCT,gBAAA/mC,UAAA+nC,cAAA,SAAcP,WAAA,IAAAA,OAAAA,KAAA,MACX1nC,KAAyBg4B,OA9YP,aAgZf0P,KAAKQ,WACNloC,KAAKk4B,cAAoCiQ,KAAKnoC,KAAKg4B,QAGlDh4B,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ2jC,cAAcP,OAmB/BT,gBAAA/mC,UAAAkoC,QAAA,SAAQV,WAAA,IAAAA,OAAAA,KAAA,IACL1nC,KAAyBg4B,OAhaN,WAianBh4B,KAA0C+D,OAAS,KACpD/D,KAAK6nC,cACD,SAACxY,SAA+BA,QAAQ+Y,QAAOhoC,SAAA,GAAKsnC,KAAI,CAAEC,UAAU,OACxE3nC,KAAKqoC,gBAEkB,IAAnBX,KAAKQ,YACNloC,KAAKm4B,aAAmCgQ,KAAKnoC,KAAKqC,OAClDrC,KAAKk4B,cAAuCiQ,KAAKnoC,KAAKg4B,SAGzDh4B,KAAKsoC,iBAAiBZ,MACtB1nC,KAAKmnC,kBAAkBt+B,QAAQ,SAAC0/B,UAAa,OAAAA,UAAS,MAmBxDtB,gBAAA/mC,UAAAiuB,OAAA,SAAOuZ,WAAA,IAAAA,OAAAA,KAAA,IACJ1nC,KAAyBg4B,OAzdT,QA0djBh4B,KAAK6nC,cACD,SAACxY,SAA+BA,QAAQlB,OAAM/tB,SAAA,GAAKsnC,KAAI,CAAEC,UAAU,OACvE3nC,KAAKojC,uBAAuB,CAACuE,UAAU,EAAMO,UAAWR,KAAKQ,YAE7DloC,KAAKsoC,iBAAiBZ,MACtB1nC,KAAKmnC,kBAAkBt+B,QAAQ,SAAC0/B,UAAa,OAAAA,UAAS,MAGhDtB,gBAAA/mC,UAAAooC,iBAAR,SAAyBZ,MACnB1nC,KAAKsE,UAAYojC,KAAKC,WACxB3nC,KAAKsE,QAAQ8+B,uBAAuBsE,MACpC1nC,KAAKsE,QAAQ0jC,kBACbhoC,KAAKsE,QAAQwjC,mBAOjBb,gBAAA/mC,UAAAsoC,UAAA,SAAU3iC,QAAqC7F,KAAKsE,QAAUuB,QA+B9DohC,gBAAA/mC,UAAAkjC,uBAAA,SAAuBsE,WAAA,IAAAA,OAAAA,KAAA,IACrB1nC,KAAKyoC,oBACLzoC,KAAKqoC,eAEDroC,KAAK43B,UACP53B,KAAK0oC,8BACJ1oC,KAA0C+D,OAAS/D,KAAK2oC,gBACxD3oC,KAAyBg4B,OAASh4B,KAAK4oC,mBAnhBzB,UAqhBX5oC,KAAKg4B,QArgBQ,YAqgBYh4B,KAAKg4B,QAChCh4B,KAAK6oC,mBAAmBnB,KAAKQ,aAIV,IAAnBR,KAAKQ,YACNloC,KAAKm4B,aAAmCgQ,KAAKnoC,KAAKqC,OAClDrC,KAAKk4B,cAAuCiQ,KAAKnoC,KAAKg4B,SAGrDh4B,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ8+B,uBAAuBsE,OAKxCT,gBAAA/mC,UAAA4oC,oBAAA,SAAoBpB,WAAA,IAAAA,OAAAA,KAAA,CAA+BQ,WAAW,IAC5DloC,KAAK6nC,cAAc,SAACkB,MAA0B,OAAAA,KAAKD,oBAAoBpB,QACvE1nC,KAAKojC,uBAAuB,CAACuE,UAAU,EAAMO,UAAWR,KAAKQ,aAGvDjB,gBAAA/mC,UAAAuoC,kBAAR,WACGzoC,KAAyBg4B,OAASh4B,KAAKgpC,uBAlhBpB,WAzBH,SA8iBX/B,gBAAA/mC,UAAAyoC,cAAR,WACE,OAAO3oC,KAAKs9B,UAAYt9B,KAAKs9B,UAAUt9B,MAAQ,MAGzCinC,gBAAA/mC,UAAA2oC,mBAAR,SAA2BX,WAA3B,IAAA7hC,MAAArG,KACE,GAAIA,KAAKoiC,eAAgB,CACtBpiC,KAAyBg4B,OApiBT,UAqiBjB,IAAMxrB,IAAMwuB,aAAah7B,KAAKoiC,eAAepiC,OAC7CA,KAAKipC,6BACDz8B,IAAIzE,UAAU,SAAChE,QAAoC,OAAAsC,MAAK6iC,UAAUnlC,OAAQ,CAACmkC,UAASA,gBAIpFjB,gBAAA/mC,UAAAwoC,4BAAR,WACM1oC,KAAKipC,8BACPjpC,KAAKipC,6BAA6BxkC,eA0BtCwiC,gBAAA/mC,UAAAgpC,UAAA,SAAUnlC,OAA+B2jC,WAAA,IAAAA,OAAAA,KAAA,IACtC1nC,KAA0C+D,OAASA,OACpD/D,KAAKmpC,uBAAyC,IAAnBzB,KAAKQ,YAoBlCjB,gBAAA/mC,UAAAygB,IAAA,SAAI4X,MAA2D,OAllBjE,SAAelJ,QAA0BkJ,KAAoC6Q,WAC3E,OAAY,MAAR7Q,KAAqB,MAEnBA,gBAAgB94B,QACpB84B,KAAgBA,KAAMrI,MAAMkZ,YAE1B7Q,gBAAgB94B,OAA0B,IAAhB84B,KAAK53B,OAAsB,KAE3B43B,KAAMxyB,OAAO,SAAC4jB,EAAoBvlB,MAC9D,OAAIulB,aAAa0f,UACR1f,EAAE2f,SAASzpC,eAAeuE,MAAkBulB,EAAE2f,SAASllC,MAAQ,KAGpEulB,aAAa4f,WACR5f,EAAE6f,GAAWplC,OAGf,MACNirB,UAgkBmEoa,CAAMzpC,KAAMu4B,KAAM,MAYxF0O,gBAAA/mC,UAAAs4B,SAAA,SAASF,UAAmBC,MAC1B,IAAMlJ,QAAUkJ,KAAOv4B,KAAK2gB,IAAI4X,MAAQv4B,KACxC,OAAOqvB,SAAWA,QAAQtrB,OAASsrB,QAAQtrB,OAAOu0B,WAAa,MAWjE2O,gBAAA/mC,UAAAm4B,SAAA,SAASC,UAAmBC,MAA4B,QAASv4B,KAAKw4B,SAASF,UAAWC,OAK1Fj5B,OAAAiC,eAAI0lC,gBAAA/mC,UAAA,OAAI,KAAR,WAGE,IAFA,IAAI4C,EAAqB9C,KAElB8C,EAAEwB,SACPxB,EAAIA,EAAEwB,QAGR,OAAOxB,mCAITmkC,gBAAA/mC,UAAAipC,sBAAA,SAAsBjB,WACnBloC,KAAyBg4B,OAASh4B,KAAK4oC,mBAEpCV,WACDloC,KAAKk4B,cAAuCiQ,KAAKnoC,KAAKg4B,QAGrDh4B,KAAKsE,SACPtE,KAAKsE,QAAQ6kC,sBAAsBjB,YAKvCjB,gBAAA/mC,UAAAwpC,iBAAA,WACG1pC,KAAwCm4B,aAAe,IAAIwR,KAAAA,aAC3D3pC,KAAyCk4B,cAAgB,IAAIyR,KAAAA,cAIxD1C,gBAAA/mC,UAAA0oC,iBAAR,WACE,OAAI5oC,KAAKgpC,uBAjpBW,WAkpBhBhpC,KAAK+D,OApqBU,UAqqBf/D,KAAK4pC,uBA5pBU,WAAA,UA6pBf5pC,KAAK4pC,uBAtqBU,WAAA,UAPF,SAisBnB3C,gBAAA/mC,UAAA0pC,uBAAA,SAAuB5R,QACrB,OAAOh4B,KAAK6pC,aAAa,SAACxa,SAA6B,OAAAA,QAAQ2I,SAAWA,UAI5EiP,gBAAA/mC,UAAA4pC,kBAAA,WACE,OAAO9pC,KAAK6pC,aAAa,SAACxa,SAA6B,OAAAA,QAAQyI,SAIjEmP,gBAAA/mC,UAAA6pC,oBAAA,WACE,OAAO/pC,KAAK6pC,aAAa,SAACxa,SAA6B,OAAAA,QAAQ0I,WAIjEkP,gBAAA/mC,UAAA8nC,gBAAA,SAAgBN,WAAA,IAAAA,OAAAA,KAAA,IACb1nC,KAA4B63B,UAAY73B,KAAK8pC,oBAE1C9pC,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQ0jC,gBAAgBN,OAKjCT,gBAAA/mC,UAAA4nC,eAAA,SAAeJ,WAAA,IAAAA,OAAAA,KAAA,IACZ1nC,KAA2B+3B,QAAU/3B,KAAK+pC,sBAEvC/pC,KAAKsE,UAAYojC,KAAKC,UACxB3nC,KAAKsE,QAAQwjC,eAAeJ,OAQhCT,gBAAA/mC,UAAA8pC,cAAA,SAAcC,WACZ,MAA4B,iBAAdA,WAAwC,OAAdA,WACF,IAAlC3qC,OAAOmP,KAAKw7B,WAAWtpC,QAAgB,UAAWspC,WAAa,aAAcA,WAInFhD,gBAAA/mC,UAAAgqC,4BAAA,SAA4BtmC,IAAwB5D,KAAKknC,oBAAsBtjC,IAG/EqjC,gBAAA/mC,UAAAiqC,mBAAA,SAAmBzC,MACbb,aAAaa,OAAsD,MAA5CA,KAAgCjF,WACzDziC,KAAKonC,UAAaM,KAAgCjF,WAGxDwE,gBAjoBA,GAkuBAmD,YAAA,SAAAhkC,QAuBE,SAAAgkC,YACIH,UACArD,gBACAxE,qBAFA,IAAA6H,YAAAA,UAAA,MADJ,IAAA5jC,MAIED,OAAAxF,KAAAZ,KACI2mC,kBAAkBC,iBAClBE,uBAAuB1E,eAAgBwE,mBAAiB5mC,YA3B9DqG,MAAAgkC,UAAwB,GA4BtBhkC,MAAKikC,gBAAgBL,WACrB5jC,MAAK8jC,mBAAmBvD,iBACxBvgC,MAAK+8B,uBAAuB,CAACuE,UAAU,EAAMO,WAAW,IACxD7hC,MAAKqjC,yBAuJT,OAxLiC3iC,UAAAA,YAAAA,QA2D/BqjC,YAAAlqC,UAAA0W,SAAA,SAASvU,MAAY6rB,SAArB,IAAA7nB,MAAArG,UAAqB,IAAAkuB,UAAAA,QAAA,IAMlBluB,KAAqBqC,MAAQrC,KAAKsiC,cAAgBjgC,MAC/CrC,KAAKqqC,UAAU1pC,SAA4C,IAAlCutB,QAAQoV,uBACnCtjC,KAAKqqC,UAAUxhC,QACX,SAAC0/B,UAAa,OAAAA,SAASliC,MAAKhE,OAAyC,IAAlC6rB,QAAQqc,yBAEjDvqC,KAAKojC,uBAAuBlV,UAY9Bkc,YAAAlqC,UAAAsqC,WAAA,SAAWnoC,MAAY6rB,cAAA,IAAAA,UAAAA,QAAA,IAMrBluB,KAAK4W,SAASvU,MAAO6rB,UAqBvBkc,YAAAlqC,UAAAk4B,MAAA,SAAM6R,UAAuB/b,cAAvB,IAAA+b,YAAAA,UAAA,WAAuB,IAAA/b,UAAAA,QAAA,IAC3BluB,KAAKsqC,gBAAgBL,WACrBjqC,KAAK+nC,eAAe7Z,SACpBluB,KAAK4nC,gBAAgB1Z,SACrBluB,KAAK4W,SAAS5W,KAAKqC,MAAO6rB,SAC1BluB,KAAKuiC,gBAAiB,GAMxB6H,YAAAlqC,UAAAmoC,aAAA,aAKA+B,YAAAlqC,UAAA2pC,aAAA,SAAaY,WAAgC,OAAO,GAKpDL,YAAAlqC,UAAA8oC,qBAAA,WAAkC,OAAOhpC,KAAK23B,UAO9CyS,YAAAlqC,UAAA67B,iBAAA,SAAiBn4B,IAAsB5D,KAAKqqC,UAAU3nC,KAAKkB,KAK3DwmC,YAAAlqC,UAAAwqC,gBAAA,WACE1qC,KAAKqqC,UAAY,GACjBrqC,KAAKmnC,kBAAoB,GACzBnnC,KAAKknC,oBAAsB,cAQ7BkD,YAAAlqC,UAAAgjC,yBAAA,SAAyBt/B,IACvB5D,KAAKmnC,kBAAkBzkC,KAAKkB,KAM9BwmC,YAAAlqC,UAAA2nC,cAAA,SAAc8C,MAGdP,YAAAlqC,UAAAokC,qBAAA,WACE,QAAsB,WAAlBtkC,KAAKyiC,WACHziC,KAAKwiC,eAAexiC,KAAKqjC,cACzBrjC,KAAK+iC,iBAAiB/iC,KAAKgjC,iBAC3BhjC,KAAKuiC,mBACPviC,KAAK4W,SAAS5W,KAAKsiC,cAAe,CAACqF,UAAU,EAAMrE,uBAAuB,KACnE,IAML8G,YAAAlqC,UAAAoqC,gBAAR,SAAwBL,WAClBjqC,KAAKgqC,cAAcC,YACpBjqC,KAAqBqC,MAAQrC,KAAKsiC,cAAgB2H,UAAU5nC,MAC7D4nC,UAAUtS,SAAW33B,KAAKooC,QAAQ,CAACT,UAAU,EAAMO,WAAW,IACzCloC,KAAKmuB,OAAO,CAACwZ,UAAU,EAAMO,WAAW,KAE5DloC,KAAqBqC,MAAQrC,KAAKsiC,cAAgB2H,WAGzDG,YAxLA,CAAiCnD,iBAgQjCoC,UAAA,SAAAjjC,QAcE,SAAAijC,UACWC,SACP1C,gBACAxE,gBAHJ,IAAA/7B,MAIED,OAAAxF,KAAAZ,KACI2mC,kBAAkBC,iBAClBE,uBAAuB1E,eAAgBwE,mBAAiB5mC,YALnDqG,MAAAijC,SAAAA,SAMTjjC,MAAKqjC,mBACLrjC,MAAK8jC,mBAAmBvD,iBACxBvgC,MAAKukC,iBACLvkC,MAAK+8B,uBAAuB,CAACuE,UAAU,EAAMO,WAAW,UAuU5D,OA/V+BnhC,UAAAA,UAAAA,QAoC7BsiC,UAAAnpC,UAAA2qC,gBAAA,SAAgBzmC,KAAcirB,SAC5B,OAAIrvB,KAAKspC,SAASllC,MAAcpE,KAAKspC,SAASllC,QAC9CpE,KAAKspC,SAASllC,MAAQirB,SACdmZ,UAAUxoC,MAClBqvB,QAAQ6a,4BAA4BlqC,KAAKknC,qBAClC7X,UAWTga,UAAAnpC,UAAA4qC,WAAA,SAAW1mC,KAAcirB,SACvBrvB,KAAK6qC,gBAAgBzmC,KAAMirB,SAC3BrvB,KAAKojC,yBACLpjC,KAAKknC,uBAQPmC,UAAAnpC,UAAA6qC,cAAA,SAAc3mC,MACRpE,KAAKspC,SAASllC,OAAOpE,KAAKspC,SAASllC,MAAM8lC,4BAA4B,qBACjElqC,KAAKspC,SAASllC,MACtBpE,KAAKojC,yBACLpjC,KAAKknC,uBASPmC,UAAAnpC,UAAA8qC,WAAA,SAAW5mC,KAAcirB,SACnBrvB,KAAKspC,SAASllC,OAAOpE,KAAKspC,SAASllC,MAAM8lC,4BAA4B,qBACjElqC,KAAKspC,SAASllC,MAClBirB,SAASrvB,KAAK6qC,gBAAgBzmC,KAAMirB,SACxCrvB,KAAKojC,yBACLpjC,KAAKknC,uBAaPmC,UAAAnpC,UAAA2R,SAAA,SAASo5B,aACP,OAAOjrC,KAAKspC,SAASzpC,eAAeorC,cAAgBjrC,KAAKspC,SAAS2B,aAAarT,SAsCjFyR,UAAAnpC,UAAA0W,SAAA,SAASvU,MAA6B6rB,SAAtC,IAAA7nB,MAAArG,UAAsC,IAAAkuB,UAAAA,QAAA,IAEpCluB,KAAKkrC,uBAAuB7oC,OAC5B/C,OAAOmP,KAAKpM,OAAOwG,QAAQ,SAAAzE,MACzBiC,MAAK8kC,uBAAuB/mC,MAC5BiC,MAAKijC,SAASllC,MAAMwS,SAASvU,MAAM+B,MAAO,CAACujC,UAAU,EAAMO,UAAWha,QAAQga,cAEhFloC,KAAKojC,uBAAuBlV,UAoC9Bmb,UAAAnpC,UAAAsqC,WAAA,SAAWnoC,MAA6B6rB,SAAxC,IAAA7nB,MAAArG,UAAwC,IAAAkuB,UAAAA,QAAA,IAEtC5uB,OAAOmP,KAAKpM,OAAOwG,QAAQ,SAAAzE,MACrBiC,MAAKijC,SAASllC,OAChBiC,MAAKijC,SAASllC,MAAMomC,WAAWnoC,MAAM+B,MAAO,CAACujC,UAAU,EAAMO,UAAWha,QAAQga,cAGpFloC,KAAKojC,uBAAuBlV,UA4D9Bmb,UAAAnpC,UAAAk4B,MAAA,SAAM/1B,MAAiB6rB,cAAjB,IAAA7rB,QAAAA,MAAA,SAAiB,IAAA6rB,UAAAA,QAAA,IACrBluB,KAAK6nC,cAAc,SAACxY,QAA0BjrB,MAC5CirB,QAAQ+I,MAAM/1B,MAAM+B,MAAO,CAACujC,UAAU,EAAMO,UAAWha,QAAQga,cAEjEloC,KAAKojC,uBAAuBlV,SAC5BluB,KAAKgoC,gBAAgB9Z,SACrBluB,KAAK8nC,eAAe5Z,UAUtBmb,UAAAnpC,UAAAkrC,YAAA,WACE,OAAOprC,KAAKqrC,gBACR,GAAI,SAACC,IAAqCjc,QAA0BjrB,MAElE,OADAknC,IAAIlnC,MAAQirB,mBAAmB+a,YAAc/a,QAAQhtB,MAAcgtB,QAAS+b,cACrEE,OAKfjC,UAAAnpC,UAAAokC,qBAAA,WACE,IAAIiH,eAAiBvrC,KAAKqrC,iBAAgB,EAAO,SAACG,QAAkBC,OAClE,QAAOA,MAAMnH,wBAAgCkH,UAG/C,OADID,gBAAgBvrC,KAAKojC,uBAAuB,CAACuE,UAAU,IACpD4D,gBAITlC,UAAAnpC,UAAAirC,uBAAA,SAAuB/mC,MACrB,IAAK9E,OAAOmP,KAAKzO,KAAKspC,UAAU3oC,OAC9B,MAAM,IAAIwC,MAAM,0KAKlB,IAAKnD,KAAKspC,SAASllC,MACjB,MAAM,IAAIjB,MAAM,uCAAuCiB,KAAI,MAK/DilC,UAAAnpC,UAAA2nC,cAAA,SAAc8C,IAAd,IAAAtkC,MAAArG,KACEV,OAAOmP,KAAKzO,KAAKspC,UAAUzgC,QAAQ,SAAA6iC,GAAK,OAAAf,GAAGtkC,MAAKijC,SAASoC,GAAIA,MAI/DrC,UAAAnpC,UAAA0qC,eAAA,WAAA,IAAAvkC,MAAArG,KACEA,KAAK6nC,cAAc,SAACxY,SAClBA,QAAQmZ,UAAUniC,OAClBgpB,QAAQ6a,4BAA4B7jC,MAAK6gC,wBAK7CmC,UAAAnpC,UAAAmoC,aAAA,WAAwBroC,KAAqBqC,MAAQrC,KAAK2rC,gBAG1DtC,UAAAnpC,UAAA2pC,aAAA,SAAaY,WAAb,IAAApkC,MAAArG,KACM2V,KAAM,EAIV,OAHA3V,KAAK6nC,cAAc,SAACxY,QAA0BjrB,MAC5CuR,IAAMA,KAAQtP,MAAKwL,SAASzN,OAASqmC,UAAUpb,WAE1C1Z,KAIT0zB,UAAAnpC,UAAAyrC,aAAA,WAAA,IAAAtlC,MAAArG,KACE,OAAOA,KAAKqrC,gBACR,GAAI,SAACC,IAAqCjc,QAA0BjrB,MAIlE,OAHIirB,QAAQuI,SAAWvxB,MAAKsxB,YAC1B2T,IAAIlnC,MAAQirB,QAAQhtB,OAEfipC,OAKfjC,UAAAnpC,UAAAmrC,gBAAA,SAAgBO,UAAgBhoC,IAC9B,IAAI+R,IAAMi2B,UAGV,OAFA5rC,KAAK6nC,cACD,SAACxY,QAA0BjrB,MAAmBuR,IAAM/R,GAAG+R,IAAK0Z,QAASjrB,QAClEuR,KAIT0zB,UAAAnpC,UAAA8oC,qBAAA,0BACE,IAA0B,IAAApI,GAAAC,SAAAvhC,OAAOmP,KAAKzO,KAAKspC,WAASxI,GAAAF,GAAAx+B,QAAA0+B,GAAAx+B,KAAAw+B,GAAAF,GAAAx+B,OAAE,CAAjD,IAAM6oC,YAAWnK,GAAAz+B,MACpB,GAAIrC,KAAKspC,SAAS2B,aAAarT,QAC7B,OAAO,wHAGX,OAA2C,EAApCt4B,OAAOmP,KAAKzO,KAAKspC,UAAU3oC,QAAcX,KAAK23B,UAIvD0R,UAAAnpC,UAAAgrC,uBAAA,SAAuB7oC,OACrBrC,KAAK6nC,cAAc,SAACxY,QAA0BjrB,MAC5C,QAAoBlB,IAAhBb,MAAM+B,MACR,MAAM,IAAIjB,MAAM,oDAAoDiB,KAAI,SAIhFilC,UA/VA,CAA+BpC,iBAia/BsC,UAAA,SAAAnjC,QAcE,SAAAmjC,UACWD,SACP1C,gBACAxE,gBAHJ,IAAA/7B,MAIED,OAAAxF,KAAAZ,KACI2mC,kBAAkBC,iBAClBE,uBAAuB1E,eAAgBwE,mBAAiB5mC,YALnDqG,MAAAijC,SAAAA,SAMTjjC,MAAKqjC,mBACLrjC,MAAK8jC,mBAAmBvD,iBACxBvgC,MAAKukC,iBACLvkC,MAAK+8B,uBAAuB,CAACuE,UAAU,EAAMO,WAAW,UAiS5D,OAzT+BnhC,UAAAA,UAAAA,QAgC7BwiC,UAAArpC,UAAAspC,GAAA,SAAG5kC,OAAkC,OAAO5E,KAAKspC,SAAS1kC,QAO1D2kC,UAAArpC,UAAAwC,KAAA,SAAK2sB,SACHrvB,KAAKspC,SAAS5mC,KAAK2sB,SACnBrvB,KAAK6rC,iBAAiBxc,SACtBrvB,KAAKojC,yBACLpjC,KAAKknC,uBASPqC,UAAArpC,UAAA4rC,OAAA,SAAOlnC,MAAeyqB,SACpBrvB,KAAKspC,SAAS7d,OAAO7mB,MAAO,EAAGyqB,SAE/BrvB,KAAK6rC,iBAAiBxc,SACtBrvB,KAAKojC,0BAQPmG,UAAArpC,UAAA6rC,SAAA,SAASnnC,OACH5E,KAAKspC,SAAS1kC,QAAQ5E,KAAKspC,SAAS1kC,OAAOslC,4BAA4B,cAC3ElqC,KAAKspC,SAAS7d,OAAO7mB,MAAO,GAC5B5E,KAAKojC,0BASPmG,UAAArpC,UAAA8qC,WAAA,SAAWpmC,MAAeyqB,SACpBrvB,KAAKspC,SAAS1kC,QAAQ5E,KAAKspC,SAAS1kC,OAAOslC,4BAA4B,cAC3ElqC,KAAKspC,SAAS7d,OAAO7mB,MAAO,GAExByqB,UACFrvB,KAAKspC,SAAS7d,OAAO7mB,MAAO,EAAGyqB,SAC/BrvB,KAAK6rC,iBAAiBxc,UAGxBrvB,KAAKojC,yBACLpjC,KAAKknC,uBAMP5nC,OAAAiC,eAAIgoC,UAAArpC,UAAA,SAAM,KAAV,WAAuB,OAAOF,KAAKspC,SAAS3oC,wCAqC5C4oC,UAAArpC,UAAA0W,SAAA,SAASvU,MAAc6rB,SAAvB,IAAA7nB,MAAArG,UAAuB,IAAAkuB,UAAAA,QAAA,IACrBluB,KAAKkrC,uBAAuB7oC,OAC5BA,MAAMwG,QAAQ,SAACw5B,SAAez9B,OAC5ByB,MAAK8kC,uBAAuBvmC,OAC5ByB,MAAKmjC,GAAG5kC,OAAOgS,SAASyrB,SAAU,CAACsF,UAAU,EAAMO,UAAWha,QAAQga,cAExEloC,KAAKojC,uBAAuBlV,UAqC9Bqb,UAAArpC,UAAAsqC,WAAA,SAAWnoC,MAAc6rB,SAAzB,IAAA7nB,MAAArG,UAAyB,IAAAkuB,UAAAA,QAAA,IACvB7rB,MAAMwG,QAAQ,SAACw5B,SAAez9B,OACxByB,MAAKmjC,GAAG5kC,QACVyB,MAAKmjC,GAAG5kC,OAAO4lC,WAAWnI,SAAU,CAACsF,UAAU,EAAMO,UAAWha,QAAQga,cAG5EloC,KAAKojC,uBAAuBlV,UAiD9Bqb,UAAArpC,UAAAk4B,MAAA,SAAM/1B,MAAiB6rB,cAAjB,IAAA7rB,QAAAA,MAAA,SAAiB,IAAA6rB,UAAAA,QAAA,IACrBluB,KAAK6nC,cAAc,SAACxY,QAA0BzqB,OAC5CyqB,QAAQ+I,MAAM/1B,MAAMuC,OAAQ,CAAC+iC,UAAU,EAAMO,UAAWha,QAAQga,cAElEloC,KAAKojC,uBAAuBlV,SAC5BluB,KAAKgoC,gBAAgB9Z,SACrBluB,KAAK8nC,eAAe5Z,UAStBqb,UAAArpC,UAAAkrC,YAAA,WACE,OAAOprC,KAAKspC,SAASrlC,IAAI,SAACorB,SACxB,OAAOA,mBAAmB+a,YAAc/a,QAAQhtB,MAAcgtB,QAAS+b,iBAK3E7B,UAAArpC,UAAAokC,qBAAA,WACE,IAAIiH,eAAiBvrC,KAAKspC,SAASvjC,OAAO,SAACylC,QAAkBC,OAC3D,QAAOA,MAAMnH,wBAAgCkH,UAC5C,GAEH,OADID,gBAAgBvrC,KAAKojC,uBAAuB,CAACuE,UAAU,IACpD4D,gBAIThC,UAAArpC,UAAAirC,uBAAA,SAAuBvmC,OACrB,IAAK5E,KAAKspC,SAAS3oC,OACjB,MAAM,IAAIwC,MAAM,0KAKlB,IAAKnD,KAAKwpC,GAAG5kC,OACX,MAAM,IAAIzB,MAAM,qCAAqCyB,QAKzD2kC,UAAArpC,UAAA2nC,cAAA,SAAc8C,IACZ3qC,KAAKspC,SAASzgC,QAAQ,SAACwmB,QAA0BzqB,OAAoB+lC,GAAGtb,QAASzqB,UAInF2kC,UAAArpC,UAAAmoC,aAAA,WAAA,IAAAhiC,MAAArG,KACGA,KAAqBqC,MAClBrC,KAAKspC,SAASvoB,OAAO,SAACsO,SAAY,OAAAA,QAAQuI,SAAWvxB,MAAKsxB,WACrD1zB,IAAI,SAACorB,SAAY,OAAAA,QAAQhtB,SAIpCknC,UAAArpC,UAAA2pC,aAAA,SAAaY,WACX,OAAOzqC,KAAKspC,SAAS1E,KAAK,SAACvV,SAA6B,OAAAA,QAAQuI,SAAW6S,UAAUpb,YAIvFka,UAAArpC,UAAA0qC,eAAA,WAAA,IAAAvkC,MAAArG,KACEA,KAAK6nC,cAAc,SAACxY,SAA6B,OAAAhpB,MAAKwlC,iBAAiBxc,YAIzEka,UAAArpC,UAAAgrC,uBAAA,SAAuB7oC,OACrBrC,KAAK6nC,cAAc,SAACxY,QAA0B7uB,GAC5C,QAAiB0C,IAAbb,MAAM7B,GACR,MAAM,IAAI2C,MAAM,kDAAkD3C,EAAC,QAMzE+oC,UAAArpC,UAAA8oC,qBAAA,0BACE,IAAsB,IAAApI,GAAAC,SAAA7gC,KAAKspC,UAAQxI,GAAAF,GAAAx+B,QAAA0+B,GAAAx+B,KAAAw+B,GAAAF,GAAAx+B,OAAE,CACnC,GADgB0+B,GAAAz+B,MACJu1B,QAAS,OAAO,wHAE9B,OAA8B,EAAvB53B,KAAKspC,SAAS3oC,QAAcX,KAAK23B,UAGlC4R,UAAArpC,UAAA2rC,iBAAR,SAAyBxc,SACvBA,QAAQmZ,UAAUxoC,MAClBqvB,QAAQ6a,4BAA4BlqC,KAAKknC,sBAE7CqC,UAzTA,CAA+BtC,iBCp/ClB+E,sBAA6B,CACxC1rB,QAASmY,iBACT1F,YAAauI,KAAAA,WAAW,WAAM,OAAA2Q,UAG1BC,gBAAkBjpC,QAAQkpC,QAAQ,MA2DxCF,OAAA,SAAA7lC,QA0BE,SAAA6lC,OAC+C3R,WACM0M,iBAFrD,IAAA3gC,MAGED,OAAAxF,KAAAZ,OAAOA,YA3BOqG,MAAA+lC,WAAqB,EAE7B/lC,MAAAgmC,YAAyB,GAGjChmC,MAAAimC,SAAW,IAAI3C,KAAAA,aAuBbtjC,MAAK+9B,KACD,IAAIiF,UAAU,GAAI3F,kBAAkBpJ,YAAaqJ,uBAAuBqD,wBA2FhF,OA1H4BjgC,UAAAA,OAAAA,QAkC1BklC,OAAA/rC,UAAAqsC,gBAAA,WAAoBvsC,KAAKmqC,sBAEzB7qC,OAAAiC,eAAI0qC,OAAA/rC,UAAA,gBAAa,KAAjB,WAA4B,OAAOF,sCAEnCV,OAAAiC,eAAI0qC,OAAA/rC,UAAA,UAAO,KAAX,WAA2B,OAAOF,KAAKokC,sCAEvC9kC,OAAAiC,eAAI0qC,OAAA/rC,UAAA,OAAI,KAAR,WAAuB,MAAO,oCAE9BZ,OAAAiC,eAAI0qC,OAAA/rC,UAAA,WAAQ,KAAZ,WAAmD,OAAOF,KAAKokC,KAAKkF,0CAEpE2C,OAAA/rC,UAAA4qC,WAAA,SAAW5I,KAAX,IAAA77B,MAAArG,KACEksC,gBAAgBpgC,KAAK,WACnB,IAAM0gC,UAAYnmC,MAAKomC,eAAevK,IAAI3J,MACzC2J,IAA8B7S,QACdmd,UAAU3B,gBAAgB3I,IAAI99B,KAAM89B,IAAI7S,SACzD4S,aAAaC,IAAI7S,QAAS6S,KAC1BA,IAAI7S,QAAQ+T,uBAAuB,CAAC8E,WAAW,IAC/C7hC,MAAKgmC,YAAY3pC,KAAKw/B,QAI1B+J,OAAA/rC,UAAAwsC,WAAA,SAAWxK,KAA6B,OAAoBliC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,OAE9E0T,OAAA/rC,UAAA6qC,cAAA,SAAc7I,KAAd,IAAA77B,MAAArG,KACEksC,gBAAgBpgC,KAAK,WACnB,IAAM0gC,UAAYnmC,MAAKomC,eAAevK,IAAI3J,MACtCiU,WACFA,UAAUzB,cAAc7I,IAAI99B,MAE9B0gC,UAAmBz+B,MAAKgmC,YAAanK,QAIzC+J,OAAA/rC,UAAAslC,aAAA,SAAatD,KAAb,IAAA77B,MAAArG,KACEksC,gBAAgBpgC,KAAK,WACnB,IAAM0gC,UAAYnmC,MAAKomC,eAAevK,IAAI3J,MACpCplB,MAAQ,IAAIk2B,UAAU,IAC5B9F,mBAAmBpwB,MAAO+uB,KAC1BsK,UAAU3B,gBAAgB3I,IAAI99B,KAAM+O,OACpCA,MAAMiwB,uBAAuB,CAAC8E,WAAW,OAI7C+D,OAAA/rC,UAAAulC,gBAAA,SAAgBvD,KAAhB,IAAA77B,MAAArG,KACEksC,gBAAgBpgC,KAAK,WACnB,IAAM0gC,UAAYnmC,MAAKomC,eAAevK,IAAI3J,MACtCiU,WACFA,UAAUzB,cAAc7I,IAAI99B,SAKlC6nC,OAAA/rC,UAAAwlC,aAAA,SAAaxD,KAAgC,OAAkBliC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,OAEjF0T,OAAA/rC,UAAAysC,YAAA,SAAYzK,IAAgB7/B,OAA5B,IAAAgE,MAAArG,KACEksC,gBAAgBpgC,KAAK,WACOzF,MAAK+9B,KAAKzjB,IAAIuhB,IAAI3J,MACvC3hB,SAASvU,UAIlB4pC,OAAA/rC,UAAA0W,SAAA,SAASvU,OAAqCrC,KAAKqvB,QAAQzY,SAASvU,QAEpE4pC,OAAA/rC,UAAA0sC,SAAA,SAASC,QAIP,OAHC7sC,KAA6BosC,WAAY,EAC1CjI,oBAAoBnkC,KAAKokC,KAAMpkC,KAAKqsC,aACpCrsC,KAAKssC,SAASnE,KAAK0E,SACZ,GAGTZ,OAAA/rC,UAAA4sC,QAAA,WAAkB9sC,KAAK+sC,aAEvBd,OAAA/rC,UAAA6sC,UAAA,SAAU1qC,YAAA,IAAAA,QAAAA,WAAAa,GACRlD,KAAKokC,KAAKhM,MAAM/1B,OACfrC,KAA6BosC,WAAY,GAGpCH,OAAA/rC,UAAAiqC,mBAAR,WACMnqC,KAAKkuB,SAAoC,MAAzBluB,KAAKkuB,QAAQuU,WAC/BziC,KAAKokC,KAAKgD,UAAYpnC,KAAKkuB,QAAQuU,WAKvCwJ,OAAA/rC,UAAAusC,eAAA,SAAelU,MAEb,OADAA,KAAKlI,MACEkI,KAAK53B,OAAoBX,KAAKokC,KAAKzjB,IAAI4X,MAAQv4B,KAAKokC,MAhGrClF,WAAAA,CAAvBC,KAAAA,MAAM,sFAxBI8M,OAAMprC,WAAA,CAPlBs7B,KAAAA,UAAU,CACT1oB,SAAU,gEACVogB,UAAW,CAACmY,uBACZ7zB,KAAM,CAAC60B,WAAY,mBAAoBC,UAAW,aAClDC,QAAS,CAAC,YACVC,SAAU,WA6BLntB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,qEA5BrBqT,QAAb,CAA4BxT,kBC5E5B2U,qBAAA,WAEA,SAAAA,wBAkEA,OAjESA,qBAAAC,qBAAP,WACE,MAAM,IAAIlqC,MAAM,8LAIZs8B,kCAAwB,mJAMxBA,yCAGC2N,qBAAAE,uBAAP,WACE,MAAM,IAAInqC,MAAM,4MAKZs8B,gCAAsB,qGAItBA,iCAGC2N,qBAAAG,qBAAP,WACE,MAAM,IAAIpqC,MACN,uUAOCiqC,qBAAAI,0BAAP,WACE,MAAM,IAAIrqC,MAAM,qKAKZs8B,gCAAsB,uHAItBA,iCAGC2N,qBAAAK,cAAP,WACEz6B,QAAQwb,KAAK,oTAejB4e,qBApEA,GCMaM,yBAA2B,IAAIttB,KAAAA,eAAe,yBAS3DutB,sBAAA,WASE,SAAAA,sBAA0DF,gBACjDA,eAAmC,SAAlBA,eAA8BG,wBAAsBC,iBACtD,WAAlBJ,gBACFL,qBAAqBK,gBACrBG,wBAAsBC,gBAAiB,+BAG7C,+BAhBaF,uBAOJE,gBAAiB,EAPbF,sBAAqBC,wBAAA/sC,WAAA,CADjCs7B,KAAAA,UAAU,CAAC1oB,SAAU,WAUPuM,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAOytB,qEATrBC,uBAAb,GCNaG,mBAA0B,CACrCxtB,QAASmY,iBACT1F,YAAauI,KAAAA,WAAW,WAAM,OAAAyS,gBAyBhCA,aAAA,SAAA3nC,QAIE,SAAA2nC,aACwBloC,OACuBy0B,WACM0M,iBAHrD,IAAA3gC,MAIED,OAAAxF,KAAAZ,OAAOA,YACPqG,MAAK/B,QAAUuB,OACfQ,MAAKs/B,YAAcrL,WACnBj0B,MAAKu/B,iBAAmBoB,yCAS5B,OApBkCjgC,UAAAA,aAAAA,wBAArBgnC,cAeX7tC,UAAAolC,iBAAA,WACQtlC,KAAKsE,mBAAmB0pC,gBAAmBhuC,KAAKsE,mBAAmB2nC,QACvEmB,qBAAqBI,6BAfFtO,WAAAA,CAAtBC,KAAAA,MAAM,wFAFI4O,aAAYC,eAAAntC,WAAA,CADxBs7B,KAAAA,UAAU,CAAC1oB,SAAU,iBAAkBogB,UAAW,CAACia,oBAAqBX,SAAU,iBAM5EntB,QAAAA,EAAAohB,KAAAA,QAAQphB,QAAAA,EAAAoU,KAAAA,YACRpU,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sDAFAH,iBAAgBh5B,MAAAA,SALrCsuC,cAAb,CAAkC1I,4BCrBrB4I,mBAA0B,CACrC3tB,QAASsd,UACT7K,YAAauI,KAAAA,WAAW,WAAM,OAAA4S,WAoB1BhC,kBAAkBjpC,QAAQkpC,QAAQ,MA6DxC+B,QAAA,SAAA9nC,QAwDE,SAAA8nC,QAAgCroC,OACuBy0B,WACM0M,gBAEjDxC,gBAJZ,IAAAn+B,MAKcD,OAAAxF,KAAAZ,OAAOA,YA3DLqG,MAAAgpB,QAAuB,IAAI+a,YAE3C/jC,MAAA8nC,aAAc,EAkDW9nC,MAAA+nC,OAAS,IAAIzE,KAAAA,aAQxBtjC,MAAK/B,QAAUuB,OACfQ,MAAKy3B,eAAiBxD,YAAc,GACpCj0B,MAAK03B,oBAAsBiJ,iBAAmB,GAC9C3gC,MAAKw3B,cAAgB0G,oBAAoBl+B,MAAMm+B,sBAqG/D,OAtK6Bz9B,UAAAA,QAAAA,QAoEfmnC,QAAAhuC,UAAAmuC,YAAA,SAAYxK,SACV7jC,KAAKsuC,kBACAtuC,KAAKmuC,aAAanuC,KAAKuuC,gBACxB,eAAgB1K,SAClB7jC,KAAKwuC,gBAAgB3K,SAGnBD,kBAAkBC,QAAS7jC,KAAK8jC,aAClC9jC,KAAKqoC,aAAaroC,KAAKyuC,OACvBzuC,KAAK8jC,UAAY9jC,KAAKyuC,QAI1BP,QAAAhuC,UAAAulB,YAAA,WAAsBzlB,KAAKulC,eAAiBvlC,KAAKulC,cAAcwF,cAAc/qC,OAE7EV,OAAAiC,eAAI2sC,QAAAhuC,UAAA,OAAI,KAAR,WACE,OAAOF,KAAKsE,QAAU09B,YAAYhiC,KAAKoE,KAAMpE,KAAKsE,SAAW,CAACtE,KAAKoE,uCAGrE9E,OAAAiC,eAAI2sC,QAAAhuC,UAAA,gBAAa,KAAjB,WAA2B,OAAOF,KAAKsE,QAAUtE,KAAKsE,QAAQihC,cAAgB,sCAE9EjmC,OAAAiC,eAAI2sC,QAAAhuC,UAAA,YAAS,KAAb,WAAoC,OAAOwjC,kBAAkB1jC,KAAK89B,iDAElEx+B,OAAAiC,eAAI2sC,QAAAhuC,UAAA,iBAAc,KAAlB,WACE,OAAOyjC,uBAAuB3jC,KAAK+9B,sDAGrCmQ,QAAAhuC,UAAA2iC,kBAAA,SAAkBR,UAChBriC,KAAK8jC,UAAYzB,SACjBriC,KAAKouC,OAAOjG,KAAK9F,WAGX6L,QAAAhuC,UAAAquC,cAAR,WACEvuC,KAAKmqC,qBACLnqC,KAAK0uC,gBAAkB1uC,KAAK2uC,mBACL3uC,KAAKulC,cAAcuF,WAAW9qC,MACrDA,KAAKmuC,aAAc,GAGbD,QAAAhuC,UAAAiqC,mBAAR,WACMnqC,KAAKkuB,SAAoC,MAAzBluB,KAAKkuB,QAAQuU,WAC/BziC,KAAKqvB,QAAQ+X,UAAYpnC,KAAKkuB,QAAQuU,WAIlCyL,QAAAhuC,UAAAwuC,cAAR,WACE,OAAQ1uC,KAAKsE,YAActE,KAAKkuB,UAAWluB,KAAKkuB,QAAQ0gB,aAGlDV,QAAAhuC,UAAAyuC,iBAAR,WACE1M,aAAajiC,KAAKqvB,QAASrvB,MAC3BA,KAAKqvB,QAAQ+T,uBAAuB,CAAC8E,WAAW,KAG1CgG,QAAAhuC,UAAAouC,gBAAR,WACOtuC,KAAK0uC,iBACR1uC,KAAKslC,mBAEPtlC,KAAK6+B,cAGCqP,QAAAhuC,UAAAolC,iBAAR,aACQtlC,KAAKsE,mBAAmBypC,eAC1B/tC,KAAKsE,mBAAmB+gC,2BAC1B+H,qBAAqBE,yBAEjBttC,KAAKsE,mBAAmBypC,cAAmB/tC,KAAKsE,mBAAmB2nC,QACvEmB,qBAAqBC,wBAIjBa,QAAAhuC,UAAA2+B,WAAR,WACM7+B,KAAKkuB,SAAWluB,KAAKkuB,QAAQ9pB,OAAMpE,KAAKoE,KAAOpE,KAAKkuB,QAAQ9pB,MAE3DpE,KAAK0uC,iBAAoB1uC,KAAKoE,MACjCgpC,qBAAqBG,wBAIjBW,QAAAhuC,UAAAmoC,aAAR,SAAqBhmC,OAArB,IAAAgE,MAAArG,KACEksC,kBAAgBpgC,KACZ,WAAQzF,MAAKgpB,QAAQzY,SAASvU,MAAO,CAACkoC,uBAAuB,OAG3D2D,QAAAhuC,UAAAsuC,gBAAR,SAAwB3K,SAAxB,IAAAx9B,MAAArG,KACQ6uC,cAAgBhL,QAAoB,WAAEI,aAEtC/H,WACgB,KAAlB2S,eAAyBA,eAAmC,UAAlBA,cAE9C3C,kBAAgBpgC,KAAK,WACfowB,aAAe71B,MAAKgpB,QAAQsI,SAC9BtxB,MAAKgpB,QAAQ+Y,WACHlM,YAAc71B,MAAKgpB,QAAQsI,UACrCtxB,MAAKgpB,QAAQlB,YA1JtB+Q,WAAAA,CAARC,KAAAA,2EAEkBD,WAAAA,CAAlBC,KAAAA,MAAM,sFACWD,WAAAA,CAAjBC,KAAAA,MAAM,+EAyCPD,WAAAA,CADCC,KAAAA,MAAM,wFAGkBD,WAAAA,CAAxB4P,KAAAA,OAAO,sFAtDGZ,QAAOrtC,WAAA,CALnBs7B,KAAAA,UAAU,CACT1oB,SAAU,sDACVogB,UAAW,CAACoa,oBACZd,SAAU,YA0DGntB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,QACZphB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sBAC3B5Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAOmb,oDAHA3C,iBAC2Bh5B,MACWA,MAAKA,SA1DxEyuC,SAAb,CAA6BtQ,WCpFhBmR,mCACT,IAAI3uB,KAAAA,eAAe,iCAEV6tB,qBAA0B,CACrC3tB,QAASsd,UACT7K,YAAauI,KAAAA,WAAW,WAAM,OAAA0T,wBA+GhCA,qBAAA,SAAA5oC,QAiCE,SAAA4oC,qBAAuD1U,WACM0M,gBAEjDxC,eACgEyK,uBAJ5E,IAAA5oC,MAKcD,OAAAxF,KAAAZ,OAAOA,YADuDqG,MAAA4oC,sBAAAA,sBAtBnD5oC,MAAA+nC,OAAS,IAAIzE,KAAAA,aAgBtCtjC,MAAA++B,qBAAsB,EAQR/+B,MAAKy3B,eAAiBxD,YAAc,GACpCj0B,MAAK03B,oBAAsBiJ,iBAAmB,GAC9C3gC,MAAKw3B,cAAgB0G,oBAAoBl+B,MAAMm+B,iDAqC/D,OA9E0Cz9B,UAAAA,qBAAAA,+BAA7BioC,qBAOX1vC,OAAAiC,eAAIytC,qBAAA9uC,UAAA,aAAU,KAAd,SAAeg8B,YAAuBqD,eAAeO,uDAqCzCkP,qBAAA9uC,UAAAmuC,YAAA,SAAYxK,SACN7jC,KAAKkvC,kBAAkBrL,WACzB5B,aAAajiC,KAAKokC,KAAMpkC,MACpBA,KAAKqvB,QAAQsI,UAAY33B,KAAK69B,cAAgB5B,kBAChDj8B,KAAK69B,cAAgB5B,kBAAmB,GAE1Cj8B,KAAKokC,KAAKhB,uBAAuB,CAAC8E,WAAW,KAE3CtE,kBAAkBC,QAAS7jC,KAAK8jC,aAClCiB,gBACI,cAAeoK,uBAAsBnvC,KAAMA,KAAKivC,uBACpDjvC,KAAKokC,KAAKxtB,SAAS5W,KAAKyuC,OACxBzuC,KAAK8jC,UAAY9jC,KAAKyuC,QAI1BnvC,OAAAiC,eAAIytC,qBAAA9uC,UAAA,OAAI,KAAR,WAAuB,MAAO,oCAE9BZ,OAAAiC,eAAIytC,qBAAA9uC,UAAA,YAAS,KAAb,WAAoC,OAAOwjC,kBAAkB1jC,KAAK89B,iDAElEx+B,OAAAiC,eAAIytC,qBAAA9uC,UAAA,iBAAc,KAAlB,WACE,OAAOyjC,uBAAuB3jC,KAAK+9B,sDAGrCz+B,OAAAiC,eAAIytC,qBAAA9uC,UAAA,UAAO,KAAX,WAA6B,OAAOF,KAAKokC,sCAEzC4K,qBAAA9uC,UAAA2iC,kBAAA,SAAkBR,UAChBriC,KAAK8jC,UAAYzB,SACjBriC,KAAKouC,OAAOjG,KAAK9F,WAGX2M,qBAAA9uC,UAAAgvC,kBAAR,SAA0BrL,SACxB,OAAOA,QAAQhkC,eAAe,SArDrCmvC,qBAAA7J,yBAA0B,EAnBXjG,WAAAA,CAArBC,KAAAA,MAAM,wCAAuBiL,4DAG9BlL,WAAAA,CADCC,KAAAA,MAAM,2IAMWD,WAAAA,CAAjBC,KAAAA,MAAM,4FAGkBD,WAAAA,CAAxB4P,KAAAA,OAAO,mGAfGE,qBAAoBG,uBAAAtuC,WAAA,CAFhCs7B,KAAAA,UAAU,CAAC1oB,SAAU,gBAAiBogB,UAAW,CAACoa,sBAAqBd,SAAU,WAmCnEntB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sBAC3B5Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAOmb,oBAE3Bpb,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAO8uB,qEAJmCtvC,MACWA,MAAKA,MAAAH,UAlCxE0vC,sBAAb,CAA0CpR,WCvH7BoO,wBAA6B,CACxC1rB,QAASmY,iBACT1F,YAAauI,KAAAA,WAAW,WAAM,OAAA8T,sBA0ChCA,mBAAA,SAAAhpC,QAWE,SAAAgpC,mBACuDzJ,YACMC,kBAF7D,IAAAv/B,MAGED,OAAAxF,KAAAZ,OAAOA,YAF8CqG,MAAAs/B,YAAAA,YACMt/B,MAAAu/B,iBAAAA,iBAX7Cv/B,MAAA+lC,WAAqB,EAIrC/lC,MAAAg+B,WAAgC,GAEZh+B,MAAA+9B,KAAkB,KAC5B/9B,MAAAimC,SAAW,IAAI3C,KAAAA,mBA4G3B,OArHwC5iC,UAAAA,mBAAAA,QAiBtCqoC,mBAAAlvC,UAAAmuC,YAAA,SAAYxK,SACV7jC,KAAKqvC,oBACDxL,QAAQhkC,eAAe,UACzBG,KAAKsvC,oBACLtvC,KAAKuvC,kBACLvvC,KAAKwvC,yBAITlwC,OAAAiC,eAAI6tC,mBAAAlvC,UAAA,gBAAa,KAAjB,WAA4B,OAAOF,sCAEnCV,OAAAiC,eAAI6tC,mBAAAlvC,UAAA,UAAO,KAAX,WAA2B,OAAOF,KAAKokC,sCAEvC9kC,OAAAiC,eAAI6tC,mBAAAlvC,UAAA,OAAI,KAAR,WAAuB,MAAO,oCAE9BkvC,mBAAAlvC,UAAA4qC,WAAA,SAAW5I,KACT,IAAM6G,KAAY/oC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,MAIpC,OAHA0J,aAAa8G,KAAM7G,KACnB6G,KAAK3F,uBAAuB,CAAC8E,WAAW,IACxCloC,KAAKqkC,WAAW3hC,KAAKw/B,KACd6G,MAGTqG,mBAAAlvC,UAAAwsC,WAAA,SAAWxK,KAAqC,OAAoBliC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,OAEtF6W,mBAAAlvC,UAAA6qC,cAAA,SAAc7I,KAA8B4C,UAA2B9kC,KAAKqkC,WAAYnC,MAExFkN,mBAAAlvC,UAAAslC,aAAA,SAAatD,KACX,IAAM6G,KAAY/oC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,MACpCgL,mBAAmBwF,KAAM7G,KACzB6G,KAAK3F,uBAAuB,CAAC8E,WAAW,KAG1CkH,mBAAAlvC,UAAAulC,gBAAA,SAAgBvD,OAEhBkN,mBAAAlvC,UAAAwlC,aAAA,SAAaxD,KAAiC,OAAkBliC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,OAElF6W,mBAAAlvC,UAAAuvC,aAAA,SAAavN,KACX,IAAM6G,KAAY/oC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,MACpCgL,mBAAmBwF,KAAM7G,KACzB6G,KAAK3F,uBAAuB,CAAC8E,WAAW,KAG1CkH,mBAAAlvC,UAAAwvC,gBAAA,SAAgBxN,OAEhBkN,mBAAAlvC,UAAAyvC,aAAA,SAAazN,KAAiC,OAAkBliC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,OAElF6W,mBAAAlvC,UAAAysC,YAAA,SAAYzK,IAAsB7/B,OACLrC,KAAKokC,KAAKzjB,IAAIuhB,IAAI3J,MACxC3hB,SAASvU,QAGhB+sC,mBAAAlvC,UAAA0sC,SAAA,SAASC,QAIP,OAHC7sC,KAA6BosC,WAAY,EAC1CjI,oBAAoBnkC,KAAKokC,KAAMpkC,KAAKqkC,YACpCrkC,KAAKssC,SAASnE,KAAK0E,SACZ,GAGTuC,mBAAAlvC,UAAA4sC,QAAA,WAAkB9sC,KAAK+sC,aAEvBqC,mBAAAlvC,UAAA6sC,UAAA,SAAU1qC,YAAA,IAAAA,QAAAA,WAAAa,GACRlD,KAAKokC,KAAKhM,MAAM/1B,OACfrC,KAA6BosC,WAAY,GAK5CgD,mBAAAlvC,UAAAqvC,gBAAA,WAAA,IAAAlpC,MAAArG,KACEA,KAAKqkC,WAAWx7B,QAAQ,SAAAq5B,KACtB,IAAM0N,QAAevpC,MAAK+9B,KAAKzjB,IAAIuhB,IAAI3J,MACnC2J,IAAI7S,UAAYugB,WVvF1B,SAA+BvgB,QAAsB6S,KACnDA,IAAIrE,cAAgB9B,iBAAiB,WAAM,OAAAyH,gBAAgBtB,OAC3DA,IAAIrE,cAAgB7B,kBAAkB,WAAM,OAAAwH,gBAAgBtB,OAE5DA,IAAIpE,eAAej1B,QAAQ,SAACy0B,WACtBA,UAAU6F,2BACZ7F,UAAU6F,0BAA0B,QAIxCjB,IAAInE,oBAAoBl1B,QAAQ,SAACy0B,WAC3BA,UAAU6F,2BACZ7F,UAAU6F,0BAA0B,QAIpC9T,SAASA,QAAQqb,kBUwEfmF,CAAe3N,IAAI7S,QAAS6S,KACxB0N,SAAS3N,aAAa2N,QAAS1N,KAClCA,IAA8B7S,QAAUugB,WAI7C5vC,KAAKokC,KAAK0E,oBAAoB,CAACZ,WAAW,KAGpCkH,mBAAAlvC,UAAAsvC,qBAAR,WAAA,IAAAnpC,MAAArG,KACEA,KAAKokC,KAAK8F,4BAA4B,WAAM,OAAA7jC,MAAKkpC,oBAC7CvvC,KAAK8vC,UAAU9vC,KAAK8vC,SAAS5F,4BAA4B,cAC7DlqC,KAAK8vC,SAAW9vC,KAAKokC,MAGfgL,mBAAAlvC,UAAAovC,kBAAR,WACE,IAAMS,KAAOrM,kBAAkB1jC,KAAK2lC,aACpC3lC,KAAKokC,KAAK9G,UAAYxE,WAAWuB,QAAQ,CAACr6B,KAAKokC,KAAK9G,UAAayS,OAEjE,IAAMC,SAAQrM,uBAAuB3jC,KAAK4lC,kBAC1C5lC,KAAKokC,KAAKhC,eAAiBtJ,WAAW6B,aAAa,CAAC36B,KAAKokC,KAAKhC,eAAkB4N,YAG1EZ,mBAAAlvC,UAAAmvC,kBAAR,WACOrvC,KAAKokC,MACR7E,eAAeI,wBA1GCT,WAAAA,CAAnBC,KAAAA,MAAM,sCAAmBkK,wDAChBnK,WAAAA,CAAT4P,KAAAA,2FATUM,mBAAkBvuC,WAAA,CAN9Bs7B,KAAAA,UAAU,CACT1oB,SAAU,cACVogB,UAAW,CAACmY,yBACZ7zB,KAAM,CAAC60B,WAAY,mBAAoBC,UAAW,aAClDE,SAAU,WAcLntB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,qEAbrBwW,oBAAb,CAAwC3W,kBC3C3BwX,sBAA6B,CACxC3vB,QAASmY,iBACT1F,YAAauI,KAAAA,WAAW,WAAM,OAAA4U,iBA6ChCA,cAAA,SAAA9pC,QAIE,SAAA8pC,cACoCrqC,OACWy0B,WACM0M,iBAHrD,IAAA3gC,MAIED,OAAAxF,KAAAZ,OAAOA,YACPqG,MAAK/B,QAAUuB,OACfQ,MAAKs/B,YAAcrL,WACnBj0B,MAAKu/B,iBAAmBoB,sBAS5B,OApBmCjgC,UAAAA,cAAAA,QAejCmpC,cAAAhwC,UAAAolC,iBAAA,WACM6K,kBAAkBnwC,KAAKsE,UACzBi7B,eAAeK,wBAfKV,WAAAA,CAAvBC,KAAAA,MAAM,0FAFI+Q,cAAarvC,WAAA,CADzBs7B,KAAAA,UAAU,CAAC1oB,SAAU,kBAAmBogB,UAAW,CAACoc,yBAM9CjwB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,QAAQphB,QAAAA,EAAAoU,KAAAA,YACpBpU,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sDAFYH,iBAAgBh5B,MAAAA,SALjDywC,eAAb,CAAmC7K,4BAsBtB+K,sBAA6B,CACxC9vB,QAASmY,iBACT1F,YAAauI,KAAAA,WAAW,WAAM,OAAA+U,iBAgDhCA,cAAA,SAAAjqC,QAaE,SAAAiqC,cACoCxqC,OACWy0B,WACM0M,iBAHrD,IAAA3gC,MAIED,OAAAxF,KAAAZ,OAAOA,YACPqG,MAAK/B,QAAUuB,OACfQ,MAAKs/B,YAAcrL,WACnBj0B,MAAKu/B,iBAAmBoB,sBAiC5B,OArDmCjgC,UAAAA,cAAAA,QAuBjCspC,cAAAnwC,UAAA0+B,SAAA,WACE5+B,KAAKslC,mBACLtlC,KAAKulC,cAAgBkK,aAAazvC,OAGpCqwC,cAAAnwC,UAAAulB,YAAA,WACMzlB,KAAKulC,eACPvlC,KAAKulC,cAAcmK,gBAAgB1vC,OAIvCV,OAAAiC,eAAI8uC,cAAAnwC,UAAA,UAAO,KAAX,WAA2B,OAAOF,KAAKulC,cAAgBoK,aAAa3vC,uCAEpEV,OAAAiC,eAAI8uC,cAAAnwC,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKsE,QAA8BtE,KAAKsE,QAAQihC,cAAgB,sCAGzEjmC,OAAAiC,eAAI8uC,cAAAnwC,UAAA,OAAI,KAAR,WAAuB,OAAO8hC,YAAYhiC,KAAKoE,KAAMpE,KAAKsE,0CAE1DhF,OAAAiC,eAAI8uC,cAAAnwC,UAAA,YAAS,KAAb,WAAoC,OAAOwjC,kBAAkB1jC,KAAK2lC,8CAElErmC,OAAAiC,eAAI8uC,cAAAnwC,UAAA,iBAAc,KAAlB,WACE,OAAOyjC,uBAAuB3jC,KAAK4lC,mDAG7ByK,cAAAnwC,UAAAolC,iBAAR,WACM6K,kBAAkBnwC,KAAKsE,UACzBi7B,eAAeM,wBAvCKX,WAAAA,CAAvBC,KAAAA,MAAM,0FAXIkR,cAAaxvC,WAAA,CADzBs7B,KAAAA,UAAU,CAAC1oB,SAAU,kBAAmBogB,UAAW,CAACuc,yBAe9CpwB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,QAAQphB,QAAAA,EAAAoU,KAAAA,YACpBpU,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sDAFYH,iBAAgBh5B,MAAAA,SAdjD4wC,eAAb,CAAmC5X,kBAuDnC,SAAS0X,kBAAkBtqC,QACzB,QAASA,kBAAkBqqC,eAAoBrqC,kBAAkBupC,oBAC3DvpC,kBAAkBwqC;;;;;;;WC5KbC,mBAA0B,CACrChwB,QAASsd,UACT7K,YAAauI,KAAAA,WAAW,WAAM,OAAAiV,mBA2HhCA,gBAAA,SAAAnqC,QAqCE,SAAAmqC,gBACoC1qC,OACWy0B,WACM0M,gBAEFxC,eACiByK,uBANpE,IAAA5oC,MAQED,OAAAxF,KAAAZ,OAAOA,YAF2DqG,MAAA4oC,sBAAAA,sBA1C5D5oC,MAAAmqC,QAAS,EAkBQnqC,MAAA+nC,OAAS,IAAIzE,KAAAA,aAgBtCtjC,MAAA++B,qBAAsB,EAWpB/+B,MAAK/B,QAAUuB,OACfQ,MAAKy3B,eAAiBxD,YAAc,GACpCj0B,MAAK03B,oBAAsBiJ,iBAAmB,GAC9C3gC,MAAKw3B,cAAgB0G,oBAAoBl+B,MAAMm+B,4CAoDnD,OArGqCz9B,UAAAA,gBAAAA,0BAAxBwpC,gBAWXjxC,OAAAiC,eAAIgvC,gBAAArwC,UAAA,aAAU,KAAd,SAAeg8B,YAAuBqD,eAAeO,uDAyCrDyQ,gBAAArwC,UAAAmuC,YAAA,SAAYxK,SACL7jC,KAAKwwC,QAAQxwC,KAAKuuC,gBACnB3K,kBAAkBC,QAAS7jC,KAAK8jC,aAClCiB,gBAAgB,kBAAmB0L,kBAAiBzwC,KAAMA,KAAKivC,uBAC/DjvC,KAAK8jC,UAAY9jC,KAAKyuC,MACtBzuC,KAAKulC,cAAcoH,YAAY3sC,KAAMA,KAAKyuC,SAI9C8B,gBAAArwC,UAAAulB,YAAA,WACMzlB,KAAKulC,eACPvlC,KAAKulC,cAAcwF,cAAc/qC,OAIrCuwC,gBAAArwC,UAAA2iC,kBAAA,SAAkBR,UAChBriC,KAAK8jC,UAAYzB,SACjBriC,KAAKouC,OAAOjG,KAAK9F,WAGnB/iC,OAAAiC,eAAIgvC,gBAAArwC,UAAA,OAAI,KAAR,WAAuB,OAAO8hC,YAAYhiC,KAAKoE,KAAMpE,KAAKsE,0CAE1DhF,OAAAiC,eAAIgvC,gBAAArwC,UAAA,gBAAa,KAAjB,WAA2B,OAAOF,KAAKsE,QAAUtE,KAAKsE,QAAQihC,cAAgB,sCAE9EjmC,OAAAiC,eAAIgvC,gBAAArwC,UAAA,YAAS,KAAb,WAAoC,OAAOwjC,kBAAkB1jC,KAAK89B,iDAElEx+B,OAAAiC,eAAIgvC,gBAAArwC,UAAA,iBAAc,KAAlB,WACE,OAAOyjC,uBAAuB3jC,KAAK+9B,sDAG7BwS,gBAAArwC,UAAAolC,iBAAR,aACQtlC,KAAKsE,mBAAmB4rC,gBAC1BlwC,KAAKsE,mBAAmB+gC,2BAC1B9F,eAAeG,wBAEX1/B,KAAKsE,mBAAmB4rC,eAAoBlwC,KAAKsE,mBAAmB8qC,oBACpEpvC,KAAKsE,mBAAmB+rC,eAC5B9Q,eAAeC,0BAIX+Q,gBAAArwC,UAAAquC,cAAR,WACEvuC,KAAKslC,mBACJtlC,KAA+BqvB,QAAUrvB,KAAKulC,cAAcuF,WAAW9qC,MACpEA,KAAKqvB,QAAQsI,UAAY33B,KAAK69B,cAAgB5B,kBAChDj8B,KAAK69B,cAAgB5B,kBAAmB,GAE1Cj8B,KAAKwwC,QAAS,GAxETD,gBAAApL,yBAA0B,EAnBPjG,WAAAA,CAAzBC,KAAAA,MAAM,8FAGPD,WAAAA,CADCC,KAAAA,MAAM,sIAMWD,WAAAA,CAAjBC,KAAAA,MAAM,uFAGkBD,WAAAA,CAAxB4P,KAAAA,OAAO,8FAnBGyB,gBAAeE,kBAAA5vC,WAAA,CAD3Bs7B,KAAAA,UAAU,CAAC1oB,SAAU,oBAAqBogB,UAAW,CAACyc,sBAuChDtwB,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAohB,KAAAA,QAAQphB,QAAAA,EAAAoU,KAAAA,YACpBpU,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO0Y,gBAC3B3Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAO2Y,sBAE3B5Y,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAymB,KAAAA,QAAQzmB,QAAAA,EAAAC,KAAAA,OAAOmb,oBAC3Bpb,QAAAA,EAAA0L,KAAAA,YAAY1L,QAAAA,EAAAC,KAAAA,OAAO8uB,qEALoBtW,iBACeh5B,MAEnDA,MAAKA,MAAAH,UAzCFixC,iBAAb,CAAqC3S,WCtCxB8S,mBAAqC,CAChDpwB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAAqV,oBAC9BzvB,OAAO,GAGI0vB,4BAA8C,CACzDtwB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAAuV,4BAC9B3vB,OAAO,GAwBTyvB,kBAAA,WAAA,SAAAA,qBAmBA,OAZErxC,OAAAiC,eAAIovC,kBAAAzwC,UAAA,WAAQ,KAAZ,WAAiC,OAAOF,KAAK8wC,eAE7C,SAAazuC,OACXrC,KAAK8wC,UAAqB,MAATzuC,QAA2B,IAAVA,OAAmB,GAAGA,OAAY,QAChErC,KAAKqqC,WAAWrqC,KAAKqqC,6CAG3BsG,kBAAAzwC,UAAAq9B,SAAA,SAASlO,SACP,OAAOrvB,KAAKo5B,SAAWN,WAAWM,SAAS/J,SAAW,MAGxDshB,kBAAAzwC,UAAAijC,0BAAA,SAA0Bv/B,IAAwB5D,KAAKqqC,UAAYzmC,IAXnEs7B,WAAAA,CADCC,KAAAA,gIANUwR,kBAAiB9vC,WAAA,CAN7Bs7B,KAAAA,UAAU,CACT1oB,SACI,yIACJogB,UAAW,CAAC6c,oBACZv4B,KAAM,CAAC44B,kBAAmB,2BAEfJ,mBAAb,GA2CAE,0BAAA,SAAAzqC,QAAA,SAAAyqC,qFAIA,OAJ+C9pC,UAAAA,0BAAAA,QAC7C8pC,0BAAA3wC,UAAAq9B,SAAA,SAASlO,SACP,OAAOrvB,KAAKo5B,SAAWN,WAAWO,aAAahK,SAAW,MAFjDwhB,0BAAyBhwC,WAAA,CANrCs7B,KAAAA,UAAU,CACT1oB,SACI,sIACJogB,UAAW,CAAC+c,6BACZz4B,KAAM,CAAC44B,kBAAmB,2BAEfF,2BAAb,CAA+CF,mBASlCK,gBAAuB,CAClC1wB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAA2V,iBAC9B/vB,OAAO,GAwBT+vB,eAAA,WAAA,SAAAA,kBAiBA,OAVE3xC,OAAAiC,eAAI0vC,eAAA/wC,UAAA,QAAK,KAAT,SAAUmC,OACRrC,KAAKkxC,SAAqB,KAAV7uC,QAA0B,IAAVA,OAA4B,SAAVA,MAC9CrC,KAAKqqC,WAAWrqC,KAAKqqC,6CAG3B4G,eAAA/wC,UAAAq9B,SAAA,SAASlO,SACP,OAAOrvB,KAAKkxC,SAAWpY,WAAWQ,MAAMjK,SAAW,MAGrD4hB,eAAA/wC,UAAAijC,0BAAA,SAA0Bv/B,IAAwB5D,KAAKqqC,UAAYzmC,IATnEs7B,WAAAA,CADCC,KAAAA,0HANU8R,eAAcpwC,WAAA,CAJ1Bs7B,KAAAA,UAAU,CACT1oB,SAAU,iEACVogB,UAAW,CAACmd,oBAEDC,gBAAb,GAiCaE,qBAA4B,CACvC7wB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAA8V,qBAC9BlwB,OAAO,GAeTkwB,mBAAA,WAAA,SAAAA,sBA0BA,OAhBEA,mBAAAlxC,UAAAmuC,YAAA,SAAYxK,SACN,cAAeA,UACjB7jC,KAAKqxC,mBACDrxC,KAAKqqC,WAAWrqC,KAAKqqC,cAI7B+G,mBAAAlxC,UAAAq9B,SAAA,SAASlO,SACP,OAAyB,MAAlBrvB,KAAKy5B,UAAoB,KAAOz5B,KAAKsxC,WAAWjiB,UAGzD+hB,mBAAAlxC,UAAAijC,0BAAA,SAA0Bv/B,IAAwB5D,KAAKqqC,UAAYzmC,IAE3DwtC,mBAAAlxC,UAAAmxC,iBAAR,WACErxC,KAAKsxC,WAAaxY,WAAWU,UAAU7c,SAAS3c,KAAKy5B,UAAW,MAhBzDyF,WAAAA,CAARC,KAAAA,2FARUiS,mBAAkBvwC,WAAA,CAL9Bs7B,KAAAA,UAAU,CACT1oB,SAAU,6EACVogB,UAAW,CAACsd,sBACZh5B,KAAM,CAACo5B,mBAAoB,mCAEhBH,oBAAb,GAoCaI,qBAA4B,CACvClxB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAAmW,qBAC9BvwB,OAAO,GAeTuwB,mBAAA,WAAA,SAAAA,sBA0BA,OAhBEA,mBAAAvxC,UAAAmuC,YAAA,SAAYxK,SACN,cAAeA,UACjB7jC,KAAKqxC,mBACDrxC,KAAKqqC,WAAWrqC,KAAKqqC,cAI7BoH,mBAAAvxC,UAAAq9B,SAAA,SAASlO,SACP,OAAyB,MAAlBrvB,KAAK65B,UAAoB75B,KAAKsxC,WAAWjiB,SAAW,MAG7DoiB,mBAAAvxC,UAAAijC,0BAAA,SAA0Bv/B,IAAwB5D,KAAKqqC,UAAYzmC,IAE3D6tC,mBAAAvxC,UAAAmxC,iBAAR,WACErxC,KAAKsxC,WAAaxY,WAAWc,UAAUjd,SAAS3c,KAAK65B,UAAW,MAhBzDqF,WAAAA,CAARC,KAAAA,2FARUsS,mBAAkB5wC,WAAA,CAL9Bs7B,KAAAA,UAAU,CACT1oB,SAAU,6EACVogB,UAAW,CAAC2d,sBACZr5B,KAAM,CAACu5B,mBAAoB,mCAEhBD,oBAAb,GA6BaE,kBAAyB,CACpCrxB,QAASqY,cACT5F,YAAauI,KAAAA,WAAW,WAAM,OAAAsW,mBAC9B1wB,OAAO,GAyBT0wB,iBAAA,WAAA,SAAAA,oBAsBA,OAZEA,iBAAA1xC,UAAAmuC,YAAA,SAAYxK,SACN,YAAaA,UACf7jC,KAAKqxC,mBACDrxC,KAAKqqC,WAAWrqC,KAAKqqC,cAI7BuH,iBAAA1xC,UAAAq9B,SAAA,SAASlO,SAAmD,OAAOrvB,KAAKsxC,WAAWjiB,UAEnFuiB,iBAAA1xC,UAAAijC,0BAAA,SAA0Bv/B,IAAwB5D,KAAKqqC,UAAYzmC,IAE3DguC,iBAAA1xC,UAAAmxC,iBAAR,WAAmCrxC,KAAKsxC,WAAaxY,WAAWgB,QAAQ95B,KAAK85B,UAbpEoF,WAAAA,CAARC,KAAAA,uFARUyS,iBAAgB/wC,WAAA,CAL5Bs7B,KAAAA,UAAU,CACT1oB,SAAU,uEACVogB,UAAW,CAAC8d,mBACZx5B,KAAM,CAAC05B,iBAAkB,+BAEdD,kBAAb,GCxWAE,YAAA,WAAA,SAAAA,eA6FA,OAhFEA,YAAA5xC,UAAAiT,MAAA,SAAM4+B,eAAsCC,YAAA,IAAAA,QAAAA,MAAA,MAC1C,IAAM1I,SAAWtpC,KAAKiyC,gBAAgBF,gBAChCzU,UAAkC,MAAT0U,MAAgBA,MAAiB,UAAI,KAC9D5P,eAA4C,MAAT4P,MAAgBA,MAAsB,eAAI,KACnF,OAAO,IAAI3I,UAAUC,SAAUhM,UAAW8E,iBA0B5C0P,YAAA5xC,UAAAmvB,QAAA,SACI4a,UAAgB3M,UAChB8E,gBACF,OAAO,IAAIgI,YAAYH,UAAW3M,UAAW8E,iBAe/C0P,YAAA5xC,UAAAsK,MAAA,SACIunC,eAAuBzU,UACvB8E,gBAFJ,IAAA/7B,MAAArG,KAGQspC,SAAWyI,eAAe9tC,IAAI,SAAA/C,GAAK,OAAAmF,MAAK6rC,eAAehxC,KAC7D,OAAO,IAAIqoC,UAAUD,SAAUhM,UAAW8E,iBAI5C0P,YAAA5xC,UAAA+xC,gBAAA,SAAgBF,gBAAhB,IAAA1rC,MAAArG,KACQspC,SAA6C,GAInD,OAHAhqC,OAAOmP,KAAKsjC,gBAAgBlpC,QAAQ,SAAAoiC,aAClC3B,SAAS2B,aAAe5kC,MAAK6rC,eAAeH,eAAe9G,gBAEtD3B,UAITwI,YAAA5xC,UAAAgyC,eAAA,SAAeC,eACb,GAAIA,yBAAyB/H,aAAe+H,yBAAyB9I,WACjE8I,yBAAyB5I,UAC3B,OAAO4I,cAEF,GAAI1yC,MAAMyF,QAAQitC,eAAgB,CACvC,IAAM9vC,MAAQ8vC,cAAc,GACtB7U,UAAgD,EAAvB6U,cAAcxxC,OAAawxC,cAAc,GAAK,KACvE/P,eAA0D,EAAvB+P,cAAcxxC,OAAawxC,cAAc,GAAK,KACvF,OAAOnyC,KAAKqvB,QAAQhtB,MAAOi7B,UAAW8E,gBAGtC,OAAOpiC,KAAKqvB,QAAQ8iB,gBA1FbL,YAAWjxC,WAAA,CADvBkf,KAAAA,cACY+xB,aAAb,GCuBaM,wBChCU,IAAI9a,KAAAA,QAAQ,SDgCgB,CEjBnD,WAAA,SAAA+a,gBACA,OADaA,aAAYxxC,WAAA,CAJxBs7B,KAAAA,UAAU,CACT1oB,SAAU,+CACV0E,KAAM,CAACm6B,WAAc,OAEVD,cAAb,GFmBErR,eACAe,uBACAtF,qBACAiB,oBACA2B,mBACA9D,6BACA2E,2BACAoB,mCACArD,0BACAuI,gBACAE,qBACAiK,kBACAS,mBACAK,mBACAG,iBACAf,0BACAI,iBAGWsB,2BACT,CAACrE,QAASH,aAAc9B,OAAQ0B,uBAEvB6E,2BACT,CAACxD,qBAAsBI,mBAAoBmB,gBAAiBL,cAAeG,eAS/EoC,0BAAA,WAAA,SAAAA,6BACA,OADaA,0BAAyB5xC,WAAA,CAJrCmzB,KAAAA,SAAS,CACR0e,aAAcN,uBACdne,QAASme,0BAEEK,2BAAb,GGlFAE,YC0BA,WAAA,SAAAC,gDAAaA,aASJC,WAAP,SAAkBnL,MAGhB,MAAO,CACL/T,SAAUmf,cACVjf,UACI,CAAC,CAACvT,QAASotB,yBAA0Bjb,SAAUiV,KAAKqL,mCAfjDH,YAAWE,cAAAjyC,WAAA,CALvBmzB,KAAAA,SAAS,CACR0e,aAAcH,2BACd1e,UAAW,CAACqK,sBACZjK,QAAS,CAACwe,0BAA2BF,+BAE1BK,aAAb,GAiCA,WAAA,SAAAI,wEAAaA,qBASJH,WAAP,SAAkBnL,MAGhB,MAAO,CACL/T,SAAUsf,sBACVpf,UAAW,CAAC,CACVvT,QAASyuB,mCACTtc,SAAUiV,KAAKwL,iCAhBVF,oBAAmBC,sBAAApyC,WAAA,CAL/BmzB,KAAAA,SAAS,CACR0e,aAAc,CAACF,4BACf3e,UAAW,CAACie,YAAa5T,sBACzBjK,QAAS,CAACwe,0BAA2BD,+BAE1BQ,qBAAb,GD3DA,WAAA,SAAAL,aACY3yC,KAAAmzC,SAAgB,CACxBC,EAAK,IAAInZ,OAAO,SAChB4K,EAAK,IAAI5K,OAAO,SAChBrpB,EAAK,IAAIqpB,OAAO,SAChBn3B,EAAK,IAAIm3B,OAAO,YAChBoZ,IAAK,IAAIpZ,OAAO,eAChBqZ,IAAK,IAAIrZ,OAAO,SA4EpB,OAnEY0Y,WAAAzyC,UAAAqzC,YAAV,SAAsBJ,SAAeK,OACnC,QADmC,IAAAA,QAAAA,OAAA,GAC9BL,SAAL,CAGA,IACE1c,KAAKvkB,MAAMukB,KAAKC,UAAUyc,WAC1B,MAAAzqC,IACA,MAAM,IAAIvF,MAAM,2BAKlB,IAAK,IAAMnC,OAHPwyC,QACFxzC,KAAKmzC,SAAW,IAEAA,SACZA,SAAStzC,eAAemB,OAC1BhB,KAAKmzC,SAASnyC,KAAO,IAAIi5B,OAAOkZ,SAASnyC,SAUrC2xC,WAAAzyC,UAAAuzC,UAAV,SAAoBC,MAClB,IAAK,IAAM1yC,OAAOhB,KAAKmzC,SACrB,GAAInzC,KAAKmzC,SAAStzC,eAAemB,MAAQA,MAAQ0yC,KAC/C,OAAO,EAGX,OAAO,GAQCf,WAAAzyC,UAAAyzC,UAAV,SAAoBtxC,WACdggC,SAAW,GAETuR,KAAO5zC,KAAK6zC,KAAKvtB,QAAQ,YAAa,IAAI3lB,OAChD0B,MAAQA,MAAMua,UAAU,EAAGg3B,MAE3B,IAAK,IAAIpzC,EAAI,EAAGszC,EAAI,EAAGA,EAAI9zC,KAAK6zC,KAAKlzC,QAAUH,EAAI6B,MAAM1B,OAAQH,IAAMszC,IAErE,GAAqB,OAAjB9zC,KAAK6zC,KAAKC,GAMd,GAAI9zC,KAAKyzC,UAAUzzC,KAAK6zC,KAAKC,IAAK,CAChC,IAAI9zC,KAAKmzC,SAASnzC,KAAK6zC,KAAKC,IAAIva,KAAKl3B,MAAM7B,IAGzC,OAAO6hC,SAFPA,UAAYhgC,MAAM7B,QAKpB6hC,UAAYriC,KAAK6zC,KAAKC,GAClB9zC,KAAK6zC,KAAKC,KAAOzxC,MAAM7B,IACzBA,SAdF6hC,UAAYriC,KAAK6zC,KAAKC,EAAI,GAC1BA,IAiBJ,OAAOzR,UAEXsQ,WAnFA,yCEcE,SAAAoB,oBACU5sB,SACO6sB,WAFjB,IAAA3tC,MAIED,OAAAxF,KAAAZ,OAAOA,YAHCqG,MAAA8gB,SAAAA,SACO9gB,MAAA2tC,UAAAA,gBA8DnB,OApEyCjtC,UAAAA,oBAAAA,QAYvCgtC,oBAAA7zC,UAAA+zC,QADA,SACQ33B,WACA3N,GAAyC2N,MAAY,OACrDja,MAAQrC,KAAK2zC,UAAUhlC,GAAGtM,OAChCrC,KAAK67B,WAAWx5B,MAAOia,MAAMvb,SAI/BgzC,oBAAA7zC,UAAAg0C,OADA,SACO53B,WACC3N,GAAyC2N,MAAY,OACvD3N,GAAGtM,QAAUrC,KAAKm0C,UAAUxlC,GAAGtM,QAAUrC,KAAKo0C,iBAChDp0C,KAAK67B,WAAW,KAAMvf,MAAMvb,SAKhCgzC,oBAAA7zC,UAAAm0C,YADA,SACY/3B,OACVtc,KAAKk0C,OAAO53B,QAGdhd,OAAAiC,eACIwyC,oBAAA7zC,UAAA,cAAW,KADf,SACgBmN,QACdrN,KAAKuzC,YAAYlmC,yCAGnB/N,OAAAiC,eACIwyC,oBAAA7zC,UAAA,cAAW,KADf,SACgBmN,QACdrN,KAAKuzC,YAAYlmC,QAAQ,oCAQnB0mC,oBAAA7zC,UAAA27B,WAAR,SAAmBx5B,MAAsBtB,QACvCA,OAAOsB,MAAQA,MACfrC,KAAKmnB,SAAS3U,YAAYzR,OAAQ,QAASsB,OACvCrC,KAAKg0C,WAAah0C,KAAKg0C,UAAU3kB,UACnCrvB,KAAKg0C,UAAU3kB,QAAQzY,SAASvU,OAChCrC,KAAKg0C,UAAU3kB,QAAQgU,cACvBrjC,KAAKg0C,UAAU3kB,QAAQ+T,2BASnB2Q,oBAAA7zC,UAAAi0C,UAAR,SAAkB9xC,WAEVuxC,KAAO5zC,KAAK6zC,KAAKvtB,QAAQ,YAAa,IAAI3lB,OAGhD,OAFA0B,MAAQA,MAAMua,UAAU,EAAGg3B,OAEdjzC,SAAWizC,4CAxE3BzX,KAAAA,UAASvpB,KAAA,CAAC,CACTa,SAAU,wBAIXsM,KAAAA,wEAT0Duc,KAAAA,iBAClDsB,UAAS98B,WAAA,CAAA,CAAAsU,KAebqxB,KAAAA,0DALFtH,KAAAA,MAAKvsB,KAAA,CAAC,uCACNusB,KAAAA,uBASAmV,KAAAA,aAAY1hC,KAAA,CAAC,QAAS,CAAC,2BAOvB0hC,KAAAA,aAAY1hC,KAAA,CAAC,OAAQ,CAAC,gCAQtB0hC,KAAAA,aAAY1hC,KAAA,CAAC,UAAW,CAAC,gCAKzBusB,KAAAA,MAAKvsB,KAAA,CAAC,oCAKNusB,KAAAA,MAAKvsB,KAAA,CAAC,kBAgCTmhC,qBApEyCpB,4CCHvC,SAAA4B,wBACEnuC,OAAAxF,KAAAZ,OAAOA,KAeX,OAjBoC+G,UAAAA,eAAAA,QAKlCwtC,eAAAr0C,UAAAs0C,UAAA,SAAUnyC,MAAewxC,KAAcV,SAAgBK,OACrD,QADqD,IAAAA,QAAAA,OAAA,IACjDK,KAGF,MAAM,IAAI1wC,MAAM,yCAMlB,OAREnD,KAAK6zC,KAAOA,KAKVV,UACFnzC,KAAKuzC,YAAYJ,SAAUK,OAEtBxzC,KAAK2zC,UAAUtxC,yCAlBzBoyC,KAAAA,KAAI7hC,KAAA,CAAC,CACJxO,KAAM,oEAmBRmwC,gBAjBoC5B,YCNpC+B,iBAAA,WAIA,SAAAA,oBAW+B,0CAX9B1gB,KAAAA,SAAQphB,KAAA,CAAC,CACR8/B,aAAc,CACZqB,oBACAQ,gBAEFtgB,QAAS,CACP8f,oBACAQ,oBAI2BG,iBAf/B","file":"ngx-ion-simple-mask.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using {@link index/EMPTY} constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nfunction EmptyErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'no elements in sequence';\n  this.name = 'EmptyError';\n  return this;\n}\n\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination?: Subscriber<any>\n): Subscription;\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | void {\n  if (destination.closed) {\n    return;\n  }\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n * ### Converts an array to an Observable\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10 20 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n * ```javascript\n * import { take } from 'rxjs/operators';\n * import { from } from 'rxjs/observable/from';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3 6 12 24 48 96 192 384 768 1536\n * ```\n *\n * ---\n *\n * ### with async scheduler\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n * import { async } from 'rxjs/scheduler/async';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, async);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start end 10 20 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n * @see {@link fromPromise}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : empty()),\n *   mergeAll(),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nlet _DOM: DomAdapter = null !;\n\nexport function getDOM() {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  public resourceLoaderType: Type<any> = null !;\n  abstract hasProperty(element: any, name: string): boolean;\n  abstract setProperty(el: Element, name: string, value: any): any;\n  abstract getProperty(el: Element, name: string): any;\n  abstract invoke(el: Element, methodName: string, args: any[]): any;\n\n  abstract logError(error: any): any;\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n\n  /**\n   * Maps attribute names to their corresponding property names for cases\n   * where attribute name doesn't match property name.\n   */\n  get attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; }\n  set attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; }\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _attrToPropMap !: {[key: string]: string};\n\n  abstract contains(nodeA: any, nodeB: any): boolean;\n  abstract parse(templateHtml: string): any;\n  abstract querySelector(el: any, selector: string): any;\n  abstract querySelectorAll(el: any, selector: string): any[];\n  abstract on(el: any, evt: any, listener: any): any;\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract createMouseEvent(eventType: any): any;\n  abstract createEvent(eventType: string): any;\n  abstract preventDefault(evt: any): any;\n  abstract isPrevented(evt: any): boolean;\n  abstract getInnerHTML(el: any): string;\n  /** Returns content if el is a <template> element, null otherwise. */\n  abstract getTemplateContent(el: any): any;\n  abstract getOuterHTML(el: any): string;\n  abstract nodeName(node: any): string;\n  abstract nodeValue(node: any): string|null;\n  abstract type(node: any): string;\n  abstract content(node: any): any;\n  abstract firstChild(el: any): Node|null;\n  abstract nextSibling(el: any): Node|null;\n  abstract parentElement(el: any): Node|null;\n  abstract childNodes(el: any): Node[];\n  abstract childNodesAsList(el: any): Node[];\n  abstract clearNodes(el: any): any;\n  abstract appendChild(el: any, node: any): any;\n  abstract removeChild(el: any, node: any): any;\n  abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n  abstract remove(el: any): Node;\n  abstract insertBefore(parent: any, ref: any, node: any): any;\n  abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n  abstract insertAfter(parent: any, el: any, node: any): any;\n  abstract setInnerHTML(el: any, value: any): any;\n  abstract getText(el: any): string|null;\n  abstract setText(el: any, value: string): any;\n  abstract getValue(el: any): string;\n  abstract setValue(el: any, value: string): any;\n  abstract getChecked(el: any): boolean;\n  abstract setChecked(el: any, value: boolean): any;\n  abstract createComment(text: string): any;\n  abstract createTemplate(html: any): HTMLElement;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n  abstract createTextNode(text: string, doc?: any): Text;\n  abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n  abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n  abstract createShadowRoot(el: any): any;\n  abstract getShadowRoot(el: any): any;\n  abstract getHost(el: any): any;\n  abstract getDistributedNodes(el: any): Node[];\n  abstract clone /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n  abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n  abstract classList(element: any): any[];\n  abstract addClass(element: any, className: string): any;\n  abstract removeClass(element: any, className: string): any;\n  abstract hasClass(element: any, className: string): boolean;\n  abstract setStyle(element: any, styleName: string, styleValue: string): any;\n  abstract removeStyle(element: any, styleName: string): any;\n  abstract getStyle(element: any, styleName: string): string;\n  abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n  abstract tagName(element: any): string;\n  abstract attributeMap(element: any): Map<string, string>;\n  abstract hasAttribute(element: any, attribute: string): boolean;\n  abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n  abstract getAttribute(element: any, attribute: string): string|null;\n  abstract getAttributeNS(element: any, ns: string, attribute: string): string|null;\n  abstract setAttribute(element: any, name: string, value: string): any;\n  abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n  abstract removeAttribute(element: any, attribute: string): any;\n  abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n  abstract templateAwareRoot(el: any): any;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n  abstract getBoundingClientRect(el: any): any;\n  abstract getTitle(doc: Document): string;\n  abstract setTitle(doc: Document, newTitle: string): any;\n  abstract elementMatches(n: any, selector: string): boolean;\n  abstract isTemplateElement(el: any): boolean;\n  abstract isTextNode(node: any): boolean;\n  abstract isCommentNode(node: any): boolean;\n  abstract isElementNode(node: any): boolean;\n  abstract hasShadowRoot(node: any): boolean;\n  abstract isShadowRoot(node: any): boolean;\n  abstract importIntoDoc /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract adoptNode /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getHref(element: any): string;\n  abstract getEventKey(event: any): string;\n  abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n  abstract supportsDOMEvents(): boolean;\n  abstract supportsNativeShadowDOM(): boolean;\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n  abstract getHistory(): History;\n  abstract getLocation(): Location;\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n  abstract getUserAgent(): string;\n  abstract setData(element: any, name: string, value: string): any;\n  abstract getComputedStyle(element: any): any;\n  abstract getData(element: any, name: string): string|null;\n  abstract supportsWebAnimation(): boolean;\n  abstract performanceNow(): number;\n  abstract getAnimationPrefix(): string;\n  abstract getTransitionEnd(): string;\n  abstract supportsAnimation(): boolean;\n\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string|null;\n  abstract setCookie(name: string, value: string): any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {√â¬µparseCookieValue as parseCookieValue} from '@angular/common';\nimport {√â¬µglobal as global} from '@angular/core';\n\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  parse(templateHtml: string) { throw new Error('parse not implemented'); }\n  static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n  hasProperty(element: Node, name: string): boolean { return name in element; }\n  setProperty(el: Node, name: string, value: any) { (<any>el)[name] = value; }\n  getProperty(el: Node, name: string): any { return (<any>el)[name]; }\n  invoke(el: Node, methodName: string, args: any[]): any { (<any>el)[methodName](...args); }\n\n  // TODO(tbosch): move this into a separate environment class once we have it\n  logError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  get attrToPropMap(): any { return _attrToPropMap; }\n\n  contains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n  querySelector(el: HTMLElement, selector: string): any { return el.querySelector(selector); }\n  querySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n  on(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n  dispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n  createMouseEvent(eventType: string): MouseEvent {\n    const evt: MouseEvent = this.getDefaultDocument().createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  createEvent(eventType: any): Event {\n    const evt: Event = this.getDefaultDocument().createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  preventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n  isPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n  getInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n  getTemplateContent(el: Node): Node|null {\n    return 'content' in el && this.isTemplateElement(el) ? (<any>el).content : null;\n  }\n  getOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n  nodeName(node: Node): string { return node.nodeName; }\n  nodeValue(node: Node): string|null { return node.nodeValue; }\n  type(node: HTMLInputElement): string { return node.type; }\n  content(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return (<any>node).content;\n    } else {\n      return node;\n    }\n  }\n  firstChild(el: Node): Node|null { return el.firstChild; }\n  nextSibling(el: Node): Node|null { return el.nextSibling; }\n  parentElement(el: Node): Node|null { return el.parentNode; }\n  childNodes(el: any): Node[] { return el.childNodes; }\n  childNodesAsList(el: Node): any[] {\n    const childNodes = el.childNodes;\n    const res = new Array(childNodes.length);\n    for (let i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n  clearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n  appendChild(el: Node, node: Node) { el.appendChild(node); }\n  removeChild(el: Node, node: Node) { el.removeChild(node); }\n  replaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  insertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n  insertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n  insertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n  setInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n  getText(el: Node): string|null { return el.textContent; }\n  setText(el: Node, value: string) { el.textContent = value; }\n  getValue(el: any): string { return el.value; }\n  setValue(el: any, value: string) { el.value = value; }\n  getChecked(el: any): boolean { return el.checked; }\n  setChecked(el: any, value: boolean) { el.checked = value; }\n  createComment(text: string): Comment { return this.getDefaultDocument().createComment(text); }\n  createTemplate(html: any): HTMLElement {\n    const t = this.getDefaultDocument().createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createElementNS(ns: string, tagName: string, doc?: Document): Element {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElementNS(ns, tagName);\n  }\n  createTextNode(text: string, doc?: Document): Text {\n    doc = doc || this.getDefaultDocument();\n    return doc.createTextNode(text);\n  }\n  createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement {\n    doc = doc || this.getDefaultDocument();\n    const el = <HTMLScriptElement>doc.createElement('SCRIPT');\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n  createStyleElement(css: string, doc?: Document): HTMLStyleElement {\n    doc = doc || this.getDefaultDocument();\n    const style = <HTMLStyleElement>doc.createElement('style');\n    this.appendChild(style, this.createTextNode(css, doc));\n    return style;\n  }\n  createShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).createShadowRoot(); }\n  getShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).shadowRoot; }\n  getHost(el: HTMLElement): HTMLElement { return (<any>el).host; }\n  clone(node: Node): Node { return node.cloneNode(true); }\n  getElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n  getElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n  classList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n  addClass(element: any, className: string) { element.classList.add(className); }\n  removeClass(element: any, className: string) { element.classList.remove(className); }\n  hasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n  setStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n  removeStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n  getStyle(element: any, stylename: string): string { return element.style[stylename]; }\n  hasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n  tagName(element: any): string { return element.tagName; }\n  attributeMap(element: any): Map<string, string> {\n    const res = new Map<string, string>();\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const attrib = elAttrs.item(i);\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n  hasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n  hasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n  getAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n  getAttributeNS(element: Element, ns: string, name: string): string|null {\n    return element.getAttributeNS(ns, name);\n  }\n  setAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n  setAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n  removeAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n  removeAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n  templateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document { return document; }\n  getBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch (e) {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n  getTitle(doc: Document): string { return doc.title; }\n  setTitle(doc: Document, newTitle: string) { doc.title = newTitle || ''; }\n  elementMatches(n: any, selector: string): boolean {\n    if (this.isElementNode(n)) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n  isTemplateElement(el: Node): boolean {\n    return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n  }\n  isTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n  isCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n  isElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n  hasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n  isShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n  importIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n  adoptNode(node: Node): any { return document.adoptNode(node); }\n  getHref(el: Element): string { return el.getAttribute('href') !; }\n\n  getEventKey(event: any): string {\n    let key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = (_chromeNumKeyPadMap as any)[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History { return window.history; }\n  getLocation(): Location { return window.location; }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void { baseElement = null; }\n  getUserAgent(): string { return window.navigator.userAgent; }\n  setData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n  getData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n  getComputedStyle(element: any): any { return getComputedStyle(element); }\n  // TODO(tbosch): move this into a separate environment class once we have it\n  supportsWebAnimation(): boolean {\n    return typeof(<any>Element).prototype['animate'] === 'function';\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean { return true; }\n\n  getCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n\n  setCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base') !;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomAdapter} from '../dom/dom_adapter';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  private _animationPrefix: string|null = null;\n  private _transitionEnd: string|null = null;\n  constructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch (e) {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n\n  getDistributedNodes(el: HTMLElement): Node[] { return (<any>el).getDistributedNodes(); }\n  resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n  supportsDOMEvents(): boolean { return true; }\n  supportsNativeShadowDOM(): boolean {\n    return typeof(<any>document.body).createShadowRoot === 'function';\n  }\n  getAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n  getTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n  supportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT as commonDOCUMENT} from '@angular/common';\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n */\nexport const DOCUMENT = commonDOCUMENT;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: any[] =\n          Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n      styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, √â¬µglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() { setTestabilityGetter(new BrowserGetTestability()); }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {√â¬µglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as{[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as core from '@angular/core';\nimport {exportNgVar} from '../util';\n\nconst CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst INSPECT_GLOBAL_NAME = 'probe';\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n\nexport function _createNgProbe(coreTokens: core.NgProbeToken[]): any {\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(coreTokens || [])});\n  return () => inspectNativeElement;\n}\n\nfunction _ngProbeTokensToMap(tokens: core.NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n\n/**\n * The injection token for the event-manager plug-in service.\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone { return this._zone; }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager !: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] { return Array.from(this._stylesSet); }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  private _hostNodes = new Set<Node>();\n  private _styleNodes = new Set<Node>();\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n\n  removeHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n\n  onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n\n  ngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n      case ViewEncapsulation.ShadowDom:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode: null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any { return document.createComment(value); }\n\n  createText(value: string): any { return document.createTextNode(value); }\n\n  appendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any { return node.parentNode; }\n\n  nextSibling(node: any): any { return node.nextSibling; }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void { el.classList.add(name); }\n\n  removeClass(el: any, name: string): void { el.classList.remove(name); }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void { node.nodeValue = value; }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as() => void;\n  }\n}\n\nconst AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n\n  applyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n\n  createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, private component: RendererType2) {\n    super(eventManager);\n    if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n      this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    } else {\n      this.shadowRoot = (hostEl as any).createShadowRoot();\n    }\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n\n  destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n\n  appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional, PLATFORM_ID} from '@angular/core';\n\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nconst __symbol__ =\n    (typeof Zone !== 'undefined') && (Zone as any)['__symbol__'] || function(v: string): string {\n      return '__zone_symbol__' + v;\n    };\nconst ADD_EVENT_LISTENER: 'addEventListener' = __symbol__('addEventListener');\nconst REMOVE_EVENT_LISTENER: 'removeEventListener' = __symbol__('removeEventListener');\n\nconst symbolNames: {[key: string]: string} = {};\n\nconst FALSE = 'FALSE';\nconst ANGULAR = 'ANGULAR';\nconst NATIVE_ADD_LISTENER = 'addEventListener';\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n\n// use the same symbol string which is used in zone.js\nconst stopSymbol = '__zone_symbol__propagationStopped';\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\n\nconst blackListedEvents: string[] =\n    (typeof Zone !== 'undefined') && (Zone as any)[__symbol__('BLACK_LISTED_EVENTS')];\nlet blackListedMap: {[eventName: string]: string};\nif (blackListedEvents) {\n  blackListedMap = {};\n  blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\n}\n\nconst isBlackListedEvent = function(eventName: string) {\n  if (!blackListedMap) {\n    return false;\n  }\n  return blackListedMap.hasOwnProperty(eventName);\n};\n\ninterface TaskData {\n  zone: any;\n  handler: Function;\n}\n\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nconst globalListener = function(event: Event) {\n  const symbolName = symbolNames[event.type];\n  if (!symbolName) {\n    return;\n  }\n  const taskDatas: TaskData[] = this[symbolName];\n  if (!taskDatas) {\n    return;\n  }\n  const args: any = [event];\n  if (taskDatas.length === 1) {\n    // if taskDatas only have one element, just invoke it\n    const taskData = taskDatas[0];\n    if (taskData.zone !== Zone.current) {\n      // only use Zone.run when Zone.current not equals to stored zone\n      return taskData.zone.run(taskData.handler, this, args);\n    } else {\n      return taskData.handler.apply(this, args);\n    }\n  } else {\n    // copy tasks as a snapshot to avoid event handlers remove\n    // itself or others\n    const copiedTasks = taskDatas.slice();\n    for (let i = 0; i < copiedTasks.length; i++) {\n      // if other listener call event.stopImmediatePropagation\n      // just break\n      if ((event as any)[stopSymbol] === true) {\n        break;\n      }\n      const taskData = copiedTasks[i];\n      if (taskData.zone !== Zone.current) {\n        // only use Zone.run when Zone.current not equals to stored zone\n        taskData.zone.run(taskData.handler, this, args);\n      } else {\n        taskData.handler.apply(this, args);\n      }\n    }\n  }\n};\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any, private ngZone: NgZone,\n      @Optional() @Inject(PLATFORM_ID) platformId: {}|null) {\n    super(doc);\n\n    if (!platformId || !isPlatformServer(platformId)) {\n      this.patchEvent();\n    }\n  }\n\n  private patchEvent() {\n    if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n      return;\n    }\n    if ((Event.prototype as any)[stopMethodSymbol]) {\n      // already patched by zone.js\n      return;\n    }\n    const delegate = (Event.prototype as any)[stopMethodSymbol] =\n        Event.prototype.stopImmediatePropagation;\n    Event.prototype.stopImmediatePropagation = function() {\n      if (this) {\n        this[stopSymbol] = true;\n      }\n\n      // should call native delegate in case\n      // in some environment part of the application\n      // will not use the patched Event\n      delegate && delegate.apply(this, arguments);\n    };\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    /**\n     * This code is about to add a listener to the DOM. If Zone.js is present, than\n     * `addEventListener` has been patched. The patched code adds overhead in both\n     * memory and speed (3x slower) than native. For this reason if we detect that\n     * Zone.js is present we use a simple version of zone aware addEventListener instead.\n     * The result is faster registration and the zone will be restored.\n     * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n     * will not be invoked\n     * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n     *\n     * NOTE: it is possible that the element is from different iframe, and so we\n     * have to check before we execute the method.\n     */\n    const self = this;\n    const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n    let callback: EventListener = handler as EventListener;\n    // if zonejs is loaded and current zone is not ngZone\n    // we keep Zone.current on target for later restoration.\n    if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n      let symbolName = symbolNames[eventName];\n      if (!symbolName) {\n        symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n      }\n      let taskDatas: TaskData[] = (element as any)[symbolName];\n      const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n      if (!taskDatas) {\n        taskDatas = (element as any)[symbolName] = [];\n      }\n\n      const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n      if (taskDatas.length === 0) {\n        taskDatas.push({zone: zone, handler: callback});\n      } else {\n        let callbackRegistered = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n          if (taskDatas[i].handler === callback) {\n            callbackRegistered = true;\n            break;\n          }\n        }\n        if (!callbackRegistered) {\n          taskDatas.push({zone: zone, handler: callback});\n        }\n      }\n\n      if (!globalListenerRegistered) {\n        element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n      }\n    } else {\n      element[NATIVE_ADD_LISTENER](eventName, callback, false);\n    }\n    return () => this.removeEventListener(element, eventName, callback);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n    // zone.js not loaded, use native removeEventListener\n    if (!underlyingRemove) {\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    let symbolName = symbolNames[eventName];\n    let taskDatas: TaskData[] = symbolName && target[symbolName];\n    if (!taskDatas) {\n      // addEventListener not using patched version\n      // just call native removeEventListener\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    // fix issue 20532, should be able to remove\n    // listener which was added inside of ngZone\n    let found = false;\n    for (let i = 0; i < taskDatas.length; i++) {\n      // remove listener from taskDatas if the callback equals\n      if (taskDatas[i].handler === callback) {\n        found = true;\n        taskDatas.splice(i, 1);\n        break;\n      }\n    }\n    if (found) {\n      if (taskDatas.length === 0) {\n        // all listeners are removed, we can remove the globalListener from target\n        underlyingRemove.apply(target, [eventName, globalListener, false]);\n      }\n    } else {\n      // not found in taskDatas, the callback may be added inside of ngZone\n      // use native remove listener to remove the callback\n      target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional, √â¬µConsole as Console} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @experimental\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/** Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded. */\nexport type HammerLoader = () => Promise<void>;\n\n/** Injection token used to provide a {@link HammerLoader} to Angular. */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @experimental\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n  * Maps gesture event names to a set of configuration options\n  * that specify overrides to the default values for specific properties.\n  *\n  * The key is a supported event name to be configured,\n  * and the options object contains a set of properties, with override values\n  * to be applied to the named recognizer event.\n  * For example, to disable recognition of the rotate event, specify\n  *  `{\"rotate\": {\"enable\": false}}`.\n  *\n  * Properties that are not present take the HammerJS default values.\n  * For information about which properties are supported for which events,\n  * and their allowed and default values, see\n  * [HammerJS documentation](http://hammerjs.github.io/).\n  *\n  */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any; domEvents?: boolean; enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer !(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      this.console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n          `loaded and no custom loader has been specified.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => { cancelRegistration = true; };\n\n      this.loader()\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              this.console.warn(\n                  `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            this.console.warn(\n                `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`);\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => { deregister(); };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @experimental\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) { super(doc); }\n\n  /**\n    * Reports whether a named key event is supported.\n    * @param eventName The event name to query.\n    * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n  */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName) !;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop() !);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext, √â¬µ_sanitizeHtml as _sanitizeHtml, √â¬µ_sanitizeStyle as _sanitizeStyle, √â¬µ_sanitizeUrl as _sanitizeUrl} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n *\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n *\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n *\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n *\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n *\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n *\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n *\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n@Injectable()\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) { super(); }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return _sanitizeStyle(value as string);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, PlatformLocation, √â¬µPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, createPlatformFactory, platformCore, √â¬µAPP_ROOT as APP_ROOT, √â¬µConsole as Console} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT]},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @experimental\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  return document;\n}\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: APP_ROOT, useValue: true},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n *\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @experimental\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create Meta service.\n */\nexport function createMeta() {\n  return new Meta(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and add meta tags.\n *\n * @experimental\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) { this._dom = getDOM(); }\n\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n  }\n\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector) !;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  removeTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector) !); }\n\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      const elem: HTMLMetaElement = this.getTag(selector) !;\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @experimental\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string { return getDOM().getTitle(this._doc); }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) { getDOM().setTitle(this._doc, newTitle); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Injectable, NgModule} from '@angular/core';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport function escapeHtml(text: string): string {\n  const escapedText: {[k: string]: string} = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;',\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nexport function unescapeHtml(text: string): string {\n  const unescapedText: {[k: string]: string} = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>',\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport type StateKey<T> = string & {__not_a_string: never};\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport function makeStateKey<T = void>(key: string): StateKey<T> {\n  return key as StateKey<T>;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @experimental\n */\n@Injectable()\nexport class TransferState {\n  private store: {[k: string]: {} | undefined} = {};\n  private onSerializeCallbacks: {[k: string]: () => {} | undefined} = {};\n\n  /** @internal */\n  static init(initState: {}) {\n    const transferState = new TransferState();\n    transferState.store = initState;\n    return transferState;\n  }\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get<T>(key: StateKey<T>, defaultValue: T): T {\n    return this.store[key] !== undefined ? this.store[key] as T : defaultValue;\n  }\n\n  /**\n   * Set the value corresponding to a key.\n   */\n  set<T>(key: StateKey<T>, value: T): void { this.store[key] = value; }\n\n  /**\n   * Remove a key from the store.\n   */\n  remove<T>(key: StateKey<T>): void { delete this.store[key]; }\n\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey<T>(key: StateKey<T>) { return this.store.hasOwnProperty(key); }\n\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void {\n    this.onSerializeCallbacks[key] = callback;\n  }\n\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson(): string {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    return JSON.stringify(this.store);\n  }\n}\n\nexport function initTransferState(doc: Document, appId: string) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n  if (script && script.textContent) {\n    try {\n      initialState = JSON.parse(unescapeHtml(script.textContent));\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return TransferState.init(initialState);\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @experimental\n */\n@NgModule({\n  providers: [{provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID]}],\n})\nexport class BrowserTransferStateModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\nexport const VERSION = new Version('7.0.0');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControl} from '../model';\nimport {ValidationErrors} from './validators';\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n */\nexport abstract class AbstractControlDirective {\n  /**\n   * @description\n   * A reference to the underlying control.\n   *\n   * @returns the control that backs this directive. Most properties fall through to that instance.\n   */\n  abstract get control(): AbstractControl|null;\n\n  /**\n   * @description\n   * Reports the value of the control if it is present, otherwise null.\n   */\n  get value(): any { return this.control ? this.control.value : null; }\n\n  /**\n   * @description\n   * Reports whether the control is valid. A control is considered valid if no\n   * validation errors exist with the current value.\n   * If the control is not present, null is returned.\n   */\n  get valid(): boolean|null { return this.control ? this.control.valid : null; }\n\n  /**\n   * @description\n   * Reports whether the control is invalid, meaning that an error exists in the input value.\n   * If the control is not present, null is returned.\n   */\n  get invalid(): boolean|null { return this.control ? this.control.invalid : null; }\n\n  /**\n   * @description\n   * Reports whether a control is pending, meaning that that async validation is occurring and\n   * errors are not yet available for the input value. If the control is not present, null is\n   * returned.\n   */\n  get pending(): boolean|null { return this.control ? this.control.pending : null; }\n\n  /**\n   * @description\n   * Reports whether the control is disabled, meaning that the control is disabled\n   * in the UI and is exempt from validation checks and excluded from aggregate\n   * values of ancestor controls. If the control is not present, null is returned.\n   */\n  get disabled(): boolean|null { return this.control ? this.control.disabled : null; }\n\n  /**\n   * @description\n   * Reports whether the control is enabled, meaning that the control is included in ancestor\n   * calculations of validity or value. If the control is not present, null is returned.\n   */\n  get enabled(): boolean|null { return this.control ? this.control.enabled : null; }\n\n  /**\n   * @description\n   * Reports the control's validation errors. If the control is not present, null is returned.\n   */\n  get errors(): ValidationErrors|null { return this.control ? this.control.errors : null; }\n\n  /**\n   * @description\n   * Reports whether the control is pristine, meaning that the user has not yet changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get pristine(): boolean|null { return this.control ? this.control.pristine : null; }\n\n  /**\n   * @description\n   * Reports whether the control is dirty, meaning that the user has changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get dirty(): boolean|null { return this.control ? this.control.dirty : null; }\n\n  /**\n   * @description\n   * Reports whether the control is touched, meaning that the user has triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get touched(): boolean|null { return this.control ? this.control.touched : null; }\n\n  /**\n   * @description\n   * Reports the validation status of the control. Possible values include:\n   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n   * If the control is not present, null is returned.\n   */\n  get status(): string|null { return this.control ? this.control.status : null; }\n\n  /**\n   * @description\n   * Reports whether the control is untouched, meaning that the user has not yet triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get untouched(): boolean|null { return this.control ? this.control.untouched : null; }\n\n  /**\n   * @description\n   * Returns a multicasting observable that emits a validation status whenever it is\n   * calculated for the control. If the control is not present, null is returned.\n   */\n  get statusChanges(): Observable<any>|null {\n    return this.control ? this.control.statusChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable of value changes for the control that emits every time the\n   * value of the control changes in the UI or programmatically.\n   * If the control is not present, null is returned.\n   */\n  get valueChanges(): Observable<any>|null {\n    return this.control ? this.control.valueChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[]|null { return null; }\n\n  /**\n   * @description\n   * Resets the control with the provided value if the control is present.\n   */\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   * If no path is given, it checks for the error on the present control.\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: string[]): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   * If the control is not present, null is returned.\n   */\n  getError(errorCode: string, path?: string[]): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {Form} from './form_interface';\n\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n */\nexport abstract class ControlContainer extends AbstractControlDirective {\n  /**\n   * @description\n   * The name for the control\n   */\n  // TODO(issue/24571): remove '!'.\n  name !: string;\n\n  /**\n   * @description\n   * The top-level form directive for the control.\n   */\n  get formDirective(): Form|null { return null; }\n\n  /**\n   * @description\n   * The path to this group.\n   */\n  get path(): string[]|null { return null; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, √â¬µisObservable as isObservable, √â¬µisPromise as isPromise} from '@angular/core';\nimport {Observable, forkJoin, from} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormControl} from './model';\n\nfunction isEmptyInputValue(value: any): boolean {\n  // we don't check for string here so it also works with arrays\n  return value == null || value.length === 0;\n}\n\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n */\nexport const NG_VALIDATORS = new InjectionToken<Array<Validator|Function>>('NgValidators');\n\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n */\nexport const NG_ASYNC_VALIDATORS =\n    new InjectionToken<Array<Validator|Function>>('NgAsyncValidators');\n\nconst EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n */\nexport class Validators {\n  /**\n   * @description\n   * Validator that requires the control's value to be greater than or equal to the provided number.\n   * The validator exists only as a function and not as a directive.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a minimum of 3\n   *\n   * ```typescript\n   * const control = new FormControl(2, Validators.min(3));\n   *\n   * console.log(control.errors); // {min: {min: 3, actual: 2}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `min` property if the validation check fails, otherwise `null`.\n   *\n   */\n  static min(min: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return !isNaN(value) && value < min ? {'min': {'min': min, 'actual': control.value}} : null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to be less than or equal to the provided number.\n   * The validator exists only as a function and not as a directive.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a maximum of 15\n   *\n   * ```typescript\n   * const control = new FormControl(16, Validators.max(15));\n   *\n   * console.log(control.errors); // {max: {max: 15, actual: 16}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `max` property if the validation check fails, otherwise `null`.\n   *\n   */\n  static max(max: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return !isNaN(value) && value > max ? {'max': {'max': max, 'actual': control.value}} : null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control have a non-empty value.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field is non-empty\n   *\n   * ```typescript\n   * const control = new FormControl('', Validators.required);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map with the `required` property\n   * if the validation check fails, otherwise `null`.\n   *\n   */\n  static required(control: AbstractControl): ValidationErrors|null {\n    return isEmptyInputValue(control.value) ? {'required': true} : null;\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value be true. This validator is commonly\n   * used for required checkboxes.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field value is true\n   *\n   * ```typescript\n   * const control = new FormControl('', Validators.requiredTrue);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map that contains the `required` property\n   * set to `true` if the validation check fails, otherwise `null`.\n   */\n  static requiredTrue(control: AbstractControl): ValidationErrors|null {\n    return control.value === true ? null : {'required': true};\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value pass an email validation test.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field matches a valid email pattern\n   *\n   * ```typescript\n   * const control = new FormControl('bad@', Validators.email);\n   *\n   * console.log(control.errors); // {email: true}\n   * ```\n   *\n   * @returns An error map with the `email` property\n   * if the validation check fails, otherwise `null`.\n   *\n   */\n  static email(control: AbstractControl): ValidationErrors|null {\n    if (isEmptyInputValue(control.value)) {\n      return null;  // don't validate empty values to allow optional controls\n    }\n    return EMAIL_REGEXP.test(control.value) ? null : {'email': true};\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be greater than or equal\n   * to the provided minimum length. This validator is also provided by default if you use the\n   * the HTML5 `minlength` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has a minimum of 3 characters\n   *\n   * ```typescript\n   * const control = new FormControl('ng', Validators.minLength(3));\n   *\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n   * ```\n   *\n   * ```html\n   * <input minlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `minlength` if the validation check fails, otherwise `null`.\n   */\n  static minLength(minLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const length: number = control.value ? control.value.length : 0;\n      return length < minLength ?\n          {'minlength': {'requiredLength': minLength, 'actualLength': length}} :\n          null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be less than or equal\n   * to the provided maximum length. This validator is also provided by default if you use the\n   * the HTML5 `maxlength` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has maximum of 5 characters\n   *\n   * ```typescript\n   * const control = new FormControl('Angular', Validators.maxLength(5));\n   *\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n   * ```\n   *\n   * ```html\n   * <input maxlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `maxlength` property if the validation check fails, otherwise `null`.\n   */\n  static maxLength(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const length: number = control.value ? control.value.length : 0;\n      return length > maxLength ?\n          {'maxlength': {'requiredLength': maxLength, 'actualLength': length}} :\n          null;\n    };\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to match a regex pattern. This validator is also\n   * provided\n   * by default if you use the HTML5 `pattern` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field only contains letters or spaces\n   *\n   * ```typescript\n   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n   *\n   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n   * ```\n   *\n   * ```html\n   * <input pattern=\"[a-zA-Z ]*\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `pattern` property if the validation check fails, otherwise `null`.\n   */\n  static pattern(pattern: string|RegExp): ValidatorFn {\n    if (!pattern) return Validators.nullValidator;\n    let regex: RegExp;\n    let regexStr: string;\n    if (typeof pattern === 'string') {\n      regexStr = '';\n\n      if (pattern.charAt(0) !== '^') regexStr += '^';\n\n      regexStr += pattern;\n\n      if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';\n\n      regex = new RegExp(regexStr);\n    } else {\n      regexStr = pattern.toString();\n      regex = pattern;\n    }\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value: string = control.value;\n      return regex.test(value) ? null :\n                                 {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n    };\n  }\n\n  /**\n   * @description\n   * Validator that performs no operation.\n   */\n  static nullValidator(control: AbstractControl): ValidationErrors|null { return null; }\n\n  /**\n   * @description\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\n   */\n  static compose(validators: null): null;\n  static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;\n  static compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null {\n    if (!validators) return null;\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      return _mergeErrors(_executeValidators(control, presentValidators));\n    };\n  }\n\n  /**\n   * @description\n   * Compose multiple async validators into a single function that returns the union\n   * of the individual error objects for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\n  */\n  static composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null {\n    if (!validators) return null;\n    const presentValidators: AsyncValidatorFn[] = validators.filter(isPresent) as any;\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n      return forkJoin(observables).pipe(map(_mergeErrors));\n    };\n  }\n}\n\nfunction isPresent(o: any): boolean {\n  return o != null;\n}\n\nexport function toObservable(r: any): Observable<any> {\n  const obs = isPromise(r) ? from(r) : r;\n  if (!(isObservable(obs))) {\n    throw new Error(`Expected validator to return Promise or Observable.`);\n  }\n  return obs;\n}\n\nfunction _executeValidators(control: AbstractControl, validators: ValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n\nfunction _executeAsyncValidators(control: AbstractControl, validators: AsyncValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors|null {\n  const res: {[key: string]: any} =\n      arrayOfErrors.reduce((res: ValidationErrors | null, errors: ValidationErrors | null) => {\n        return errors != null ? {...res !, ...errors} : res !;\n      }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * @description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see DefaultValueAccessor\n */\nexport interface ControlValueAccessor {\n  /**\n   * @description\n   * Writes a new value to the element.\n   *\n   * This method is called by the forms API to write to the view when programmatic\n   * changes from model to view are requested.\n   *\n   * @usageNotes\n   * ### Write a value to the element\n   *\n   * The following example writes a value to the native DOM element.\n   *\n   * ```ts\n   * writeValue(value: any): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n   * }\n   * ```\n   *\n   * @param obj The new value for the element\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * @description\n   * Registers a callback function that is called when the control's value\n   * changes in the UI.\n   *\n   * This method is called by the forms API on initialization to update the form\n   * model when values propagate from the view to the model.\n   *\n   * When implementing the `registerOnChange` method in your own value accessor,\n   * save the given function so your class calls it at the appropriate time.\n   *\n   * @usageNotes\n   * ### Store the change function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnChange(fn: (_: any) => void): void {\n   *   this._onChange = fn;\n   * }\n   * ```\n   *\n   * When the value changes in the UI, call the registered\n   * function to allow the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    (change): '_onChange($event.target.value)'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * @description\n   * Registers a callback function is called by the forms API on initialization\n   * to update the form model on blur.\n   *\n   * When implementing `registerOnTouched` in your own value accessor, save the given\n   * function so your class calls it when the control should be considered\n   * blurred or \"touched\".\n   *\n   * @usageNotes\n   * ### Store the callback function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnTouched(fn: any): void {\n   *   this._onTouched = fn;\n   * }\n   * ```\n   *\n   * On blur (or equivalent), your class should call the registered function to allow\n   * the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(blur)': '_onTouched()'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * @description\n   * Function that is called by the forms API when the control status changes to\n   * or from 'DISABLED'. Depending on the status, it enables or disables the\n   * appropriate DOM element.\n   *\n   * @usageNotes\n   * The following is an example of writing the disabled property to a native DOM element:\n   *\n   * ```ts\n   * setDisabledState(isDisabled: boolean): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n   * }\n   * ```\n   *\n   * @param isDisabled The disabled status to set on the element\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n */\nexport const NG_VALUE_ACCESSOR = new InjectionToken<ControlValueAccessor>('NgValueAccessor');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n  registerOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, Optional, Renderer2, forwardRef} from '@angular/core';\nimport {√â¬µgetDOM as getDOM} from '@angular/platform-browser';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * @experimental\n */\nexport const COMPOSITION_BUFFER_MODE = new InjectionToken<boolean>('CompositionEventMode');\n\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"text\" name=\"searchQuery\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngModel],[formControl],[formControlName]',\n  host: {\n    '(input)': '$any(this)._handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '$any(this)._compositionStart()',\n    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n  },\n  providers: [DEFAULT_VALUE_ACCESSOR]\n})\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _handleInput(value: any): void {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  /** @internal */\n  _compositionStart(): void { this._composing = true; }\n\n  /** @internal */\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this.onChange(value);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl} from '../model';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport function normalizeValidator(validator: ValidatorFn | Validator): ValidatorFn {\n  if ((<Validator>validator).validate) {\n    return (c: AbstractControl) => (<Validator>validator).validate(c);\n  } else {\n    return <ValidatorFn>validator;\n  }\n}\n\nexport function normalizeAsyncValidator(validator: AsyncValidatorFn | AsyncValidator):\n    AsyncValidatorFn {\n  if ((<AsyncValidator>validator).validate) {\n    return (c: AbstractControl) => (<AsyncValidator>validator).validate(c);\n  } else {\n    return <AsyncValidatorFn>validator;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"number\" [(ngModel)]=\"age\">\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n})\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n\n/**\n * @description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n */\nexport abstract class NgControl extends AbstractControlDirective {\n  /**\n   * @description\n   * The parent form for the control.\n   *\n   * @internal\n   */\n  _parent: ControlContainer|null = null;\n\n  /**\n   * @description\n   * The name for the control\n   */\n  name: string|null = null;\n\n  /**\n   * @description\n   * The value accessor for the control\n   */\n  valueAccessor: ControlValueAccessor|null = null;\n\n  /**\n   * @description\n   * The uncomposed array of synchronous validators for the control\n   *\n   * @internal\n   */\n  _rawValidators: Array<Validator|ValidatorFn> = [];\n\n  /**\n   * @description\n   * The uncomposed array of async validators for the control\n   *\n   * @internal\n   */\n  _rawAsyncValidators: Array<AsyncValidator|AsyncValidatorFn> = [];\n\n  /**\n   * @description\n   * The registered synchronous validator function for the control\n   *\n   * @throws An exception that this method is not implemented\n   */\n  get validator(): ValidatorFn|null { return <ValidatorFn>unimplemented(); }\n\n  /**\n   * @description\n   * The registered async validator function for the control\n   *\n   * @throws An exception that this method is not implemented\n   */\n  get asyncValidator(): AsyncValidatorFn|null { return <AsyncValidatorFn>unimplemented(); }\n\n  /**\n   * @description\n   * The callback method to update the model from the view when requested\n   *\n   * @param newValue The new value for the view\n   */\n  abstract viewToModelUpdate(newValue: any): void;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\n@Injectable()\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\n}\n\n/**\n * @description\n *\n * Writes radio control values and listens to radio control changes.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n})\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _state !: boolean;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _control !: NgControl;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _fn !: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() formControlName !: string;\n  @Input() value: any;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  ngOnDestroy(): void { this._registry.remove(this); }\n\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  fireUncheck(value: any): void { this.writeValue(value); }\n\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n\n  private _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, StaticProvider, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const RANGE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"range\" [(ngModel)]=\"age\" >\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n})\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const FormErrorExamples = {\n  formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n\n  formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n\n  formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n\n  ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n\n  ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class ReactiveErrors {\n  static controlParentException(): void {\n    throw new Error(\n        `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formControlName}`);\n  }\n\n  static ngModelGroupException(): void {\n    throw new Error(\n        `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${Examples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${Examples.ngModelGroup}`);\n  }\n  static missingFormException(): void {\n    throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${Examples.formControlName}`);\n  }\n\n  static groupParentException(): void {\n    throw new Error(\n        `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formGroupName}`);\n  }\n\n  static arrayParentException(): void {\n    throw new Error(\n        `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${Examples.formArrayName}`);\n  }\n\n  static disabledAttrWarning(): void {\n    console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n  }\n\n  static ngModelWarning(directiveName: string): void {\n    console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}. \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' \n      : 'FormControlName'}#use-with-ngmodel\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, √â¬µlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @description\n *\n * Writes values and listens to changes on a select element.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n})\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    const id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(): string { return (this._idCounter++).toString(); }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\n}\n\n/**\n * @description\n *\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * See docs for `SelectControlValueAccessor` for usage examples.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, √â¬µlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  // TODO(issue/24571): remove '!'.\n  length !: number;\n  abstract item(_: number): HTMLOption;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * @usageNotes\n * ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\n@Directive({\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n})\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    let optionSelectedStateSetter: (opt: NgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n    } else {\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const options: HTMLCollection = _.selectedOptions;\n        for (let i = 0; i < options.length; i++) {\n          const opt: any = options.item(i);\n          const val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const options: HTMLCollection = <HTMLCollection>_.options;\n        for (let i = 0; i < options.length; i++) {\n          const opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(value: NgSelectMultipleOption): string {\n    const id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id) !._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) !._value : valueString;\n  }\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectMultipleOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode, √â¬µlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {FormArray, FormControl, FormGroup} from '../model';\nimport {Validators} from '../validators';\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {CheckboxControlValueAccessor} from './checkbox_value_accessor';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport {NgControl} from './ng_control';\nimport {normalizeAsyncValidator, normalizeValidator} from './normalize_validator';\nimport {NumberValueAccessor} from './number_value_accessor';\nimport {RadioControlValueAccessor} from './radio_control_value_accessor';\nimport {RangeValueAccessor} from './range_value_accessor';\nimport {FormArrayName} from './reactive_directives/form_group_name';\nimport {ReactiveErrors} from './reactive_errors';\nimport {SelectControlValueAccessor} from './select_control_value_accessor';\nimport {SelectMultipleControlValueAccessor} from './select_multiple_control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [...parent.path !, name];\n}\n\nexport function setUpControl(control: FormControl, dir: NgControl): void {\n  if (!control) _throwError(dir, 'Cannot find control with');\n  if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n\n  control.validator = Validators.compose([control.validator !, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator !, dir.asyncValidator]);\n  dir.valueAccessor !.writeValue(control.value);\n\n  setUpViewChangePipeline(control, dir);\n  setUpModelChangePipeline(control, dir);\n\n  setUpBlurPipeline(control, dir);\n\n  if (dir.valueAccessor !.setDisabledState) {\n    control.registerOnDisabledChange(\n        (isDisabled: boolean) => { dir.valueAccessor !.setDisabledState !(isDisabled); });\n  }\n\n  // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  dir._rawValidators.forEach((validator: Validator | ValidatorFn) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange !(() => control.updateValueAndValidity());\n  });\n\n  dir._rawAsyncValidators.forEach((validator: AsyncValidator | AsyncValidatorFn) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange !(() => control.updateValueAndValidity());\n  });\n}\n\nexport function cleanUpControl(control: FormControl, dir: NgControl) {\n  dir.valueAccessor !.registerOnChange(() => _noControlError(dir));\n  dir.valueAccessor !.registerOnTouched(() => _noControlError(dir));\n\n  dir._rawValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  dir._rawAsyncValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  if (control) control._clearChangeFns();\n}\n\nfunction setUpViewChangePipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor !.registerOnChange((newValue: any) => {\n    control._pendingValue = newValue;\n    control._pendingChange = true;\n    control._pendingDirty = true;\n\n    if (control.updateOn === 'change') updateControl(control, dir);\n  });\n}\n\nfunction setUpBlurPipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor !.registerOnTouched(() => {\n    control._pendingTouched = true;\n\n    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);\n    if (control.updateOn !== 'submit') control.markAsTouched();\n  });\n}\n\nfunction updateControl(control: FormControl, dir: NgControl): void {\n  if (control._pendingDirty) control.markAsDirty();\n  control.setValue(control._pendingValue, {emitModelToViewChange: false});\n  dir.viewToModelUpdate(control._pendingValue);\n  control._pendingChange = false;\n}\n\nfunction setUpModelChangePipeline(control: FormControl, dir: NgControl): void {\n  control.registerOnChange((newValue: any, emitModelEvent: boolean) => {\n    // control -> view\n    dir.valueAccessor !.writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  });\n}\n\nexport function setUpFormContainer(\n    control: FormGroup | FormArray, dir: AbstractFormGroupDirective | FormArrayName) {\n  if (control == null) _throwError(dir, 'Cannot find control with');\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  let messageEnd: string;\n  if (dir.path !.length > 1) {\n    messageEnd = `path: '${dir.path!.join(' -> ')}'`;\n  } else if (dir.path ![0]) {\n    messageEnd = `name: '${dir.path}'`;\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n  throw new Error(`${message} ${messageEnd}`);\n}\n\nexport function composeValidators(validators: Array<Validator|Function>): ValidatorFn|null {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n\nexport function composeAsyncValidators(validators: Array<Validator|Function>): AsyncValidatorFn|\n    null {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n                              null;\n}\n\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !looseIdentical(viewModel, change.currentValue);\n}\n\nconst BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  RangeValueAccessor,\n  NumberValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n\nexport function syncPendingControls(form: FormGroup, directives: NgControl[]): void {\n  form._syncPendingControls();\n  directives.forEach(dir => {\n    const control = dir.control as FormControl;\n    if (control.updateOn === 'submit' && control._pendingChange) {\n      dir.viewToModelUpdate(control._pendingValue);\n      control._pendingChange = false;\n    }\n  });\n}\n\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nexport function selectValueAccessor(\n    dir: NgControl, valueAccessors: ControlValueAccessor[]): ControlValueAccessor|null {\n  if (!valueAccessors) return null;\n\n  if (!Array.isArray(valueAccessors))\n    _throwError(dir, 'Value accessor was not provided as an array for form control with');\n\n  let defaultAccessor: ControlValueAccessor|undefined = undefined;\n  let builtinAccessor: ControlValueAccessor|undefined = undefined;\n  let customAccessor: ControlValueAccessor|undefined = undefined;\n\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor)\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n\n    } else {\n      if (customAccessor)\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  _throwError(dir, 'No valid value accessor for form control with');\n  return null;\n}\n\nexport function removeDir<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n\n// TODO(kara): remove after deprecation period\nexport function _ngModelWarning(\n    name: string, type: {_ngModelWarningSentOnce: boolean},\n    instance: {_ngModelWarningSent: boolean}, warningConfig: string | null) {\n  if (!isDevMode() || warningConfig === 'never') return;\n\n  if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n      (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n    ReactiveErrors.ngModelWarning(name);\n    type._ngModelWarningSentOnce = true;\n    instance._ngModelWarningSent = true;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {composeAsyncValidators, composeValidators, controlPath} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n\n\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n */\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n  /**\n   * @description\n   * The parent control for the group\n   *\n   * @internal\n   */\n  // TODO(issue/24571): remove '!'.\n  _parent !: ControlContainer;\n\n  /**\n   * @description\n   * An array of synchronous validators for the group\n   *\n   * @internal\n   */\n  // TODO(issue/24571): remove '!'.\n  _validators !: any[];\n\n  /**\n   * @description\n   * An array of async validators for the group\n   *\n   * @internal\n   */\n  // TODO(issue/24571): remove '!'.\n  _asyncValidators !: any[];\n\n  /**\n   * @description\n   * An internal callback method triggered on the instance after the inputs are set.\n   * Registers the group with its parent group.\n   */\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective !.addFormGroup(this);\n  }\n\n  /**\n   * @description\n   * An internal callback method triggered before the instance is destroyed.\n   * Removes the group from its parent group.\n   */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n\n  /**\n   * @description\n   * The `FormGroup` bound to this directive.\n   */\n  get control(): FormGroup { return this.formDirective !.getFormGroup(this); }\n\n  /**\n   * @description\n   * The path to this group from the top-level directive.\n   */\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): Form|null { return this._parent ? this._parent.formDirective : null; }\n\n  /**\n   * @description\n   * The synchronous validators registered with this group.\n   */\n  get validator(): ValidatorFn|null { return composeValidators(this._validators); }\n\n  /**\n   * @description\n   * The async validators registered with this group.\n   */\n  get asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n\n  /** @internal */\n  _checkParentType(): void {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\n\nexport class AbstractControlStatus {\n  private _cd: AbstractControlDirective;\n\n  constructor(cd: AbstractControlDirective) { this._cd = cd; }\n\n  get ngClassUntouched(): boolean { return this._cd.control ? this._cd.control.untouched : false; }\n  get ngClassTouched(): boolean { return this._cd.control ? this._cd.control.touched : false; }\n  get ngClassPristine(): boolean { return this._cd.control ? this._cd.control.pristine : false; }\n  get ngClassDirty(): boolean { return this._cd.control ? this._cd.control.dirty : false; }\n  get ngClassValid(): boolean { return this._cd.control ? this._cd.control.valid : false; }\n  get ngClassInvalid(): boolean { return this._cd.control ? this._cd.control.invalid : false; }\n  get ngClassPending(): boolean { return this._cd.control ? this._cd.control.pending : false; }\n}\n\nexport const ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost})\nexport class NgControlStatus extends AbstractControlStatus {\n  constructor(@Self() cd: NgControl) { super(cd); }\n}\n\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n})\nexport class NgControlStatusGroup extends AbstractControlStatus {\n  constructor(@Self() cd: ControlContainer) { super(cd); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidationErrors, ValidatorFn} from './directives/validators';\nimport {toObservable} from './validators';\n\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nexport const VALID = 'VALID';\n\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nexport const INVALID = 'INVALID';\n\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nexport const PENDING = 'PENDING';\n\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nexport const DISABLED = 'DISABLED';\n\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path = (<string>path).split(delimiter);\n  }\n  if (path instanceof Array && (path.length === 0)) return null;\n\n  return (<Array<string|number>>path).reduce((v: AbstractControl, name) => {\n    if (v instanceof FormGroup) {\n      return v.controls.hasOwnProperty(name as string) ? v.controls[name] : null;\n    }\n\n    if (v instanceof FormArray) {\n      return v.at(<number>name) || null;\n    }\n\n    return null;\n  }, control);\n}\n\nfunction coerceToValidator(\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): ValidatorFn|\n    null {\n  const validator =\n      (isOptionsObj(validatorOrOpts) ? (validatorOrOpts as AbstractControlOptions).validators :\n                                       validatorOrOpts) as ValidatorFn |\n      ValidatorFn[] | null;\n\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n\nfunction coerceToAsyncValidator(\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null, validatorOrOpts?: ValidatorFn |\n        ValidatorFn[] | AbstractControlOptions | null): AsyncValidatorFn|null {\n  const origAsyncValidator =\n      (isOptionsObj(validatorOrOpts) ? (validatorOrOpts as AbstractControlOptions).asyncValidators :\n                                       asyncValidator) as AsyncValidatorFn |\n      AsyncValidatorFn | null;\n\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n                                             origAsyncValidator || null;\n}\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * @experimental\n */\nexport interface AbstractControlOptions {\n  /**\n   * List of validators applied to control.\n   */\n  validators?: ValidatorFn|ValidatorFn[]|null;\n  /**\n   * List of async validators applied to control.\n   */\n  asyncValidators?: AsyncValidatorFn|AsyncValidatorFn[]|null;\n  /**\n   * The event name for control to update upon.\n   */\n  updateOn?: 'change'|'blur'|'submit';\n}\n\n\nfunction isOptionsObj(\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): boolean {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n      typeof validatorOrOpts === 'object';\n}\n\n\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _pendingDirty !: boolean;\n\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _pendingTouched !: boolean;\n\n  /** @internal */\n  _onCollectionChange = () => {};\n\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _updateOn !: FormHooks;\n\n  // TODO(issue/24571): remove '!'.\n  private _parent !: FormGroup | FormArray;\n  private _asyncValidationSubscription: any;\n\n  /**\n   * The current value of the control.\n   *\n   * * For a `FormControl`, the current value.\n   * * For a `FormGroup`, the values of enabled controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a `FormArray`, the values of enabled controls as an array.\n   *\n   */\n  public readonly value: any;\n\n  /**\n   * Initialize the AbstractControl instance.\n   *\n   * @param validator The function that determines the synchronous validity of this control.\n   * @param asyncValidator The function that determines the asynchronous validity of this\n   * control.\n   */\n  constructor(public validator: ValidatorFn|null, public asyncValidator: AsyncValidatorFn|null) {}\n\n  /**\n   * The parent control.\n   */\n  get parent(): FormGroup|FormArray { return this._parent; }\n\n  /**\n   * The validation status of the control. There are four possible\n   * validation status values:\n   *\n   * * **VALID**: This control has passed all validation checks.\n   * * **INVALID**: This control has failed at least one validation check.\n   * * **PENDING**: This control is in the midst of conducting a validation check.\n   * * **DISABLED**: This control is exempt from validation checks.\n   *\n   * These status values are mutually exclusive, so a control cannot be\n   * both valid AND invalid or invalid AND disabled.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly status !: string;\n\n  /**\n   * A control is `valid` when its `status` is `VALID`.\n   *\n   * @see `status`\n   *\n   * @returns True if the control has passed all of its validation tests,\n   * false otherwise.\n   */\n  get valid(): boolean { return this.status === VALID; }\n\n  /**\n   * A control is `invalid` when its `status` is `INVALID`.\n   *\n   * @see `status`\n   *\n   * @returns True if this control has failed one or more of its validation checks,\n   * false otherwise.\n   */\n  get invalid(): boolean { return this.status === INVALID; }\n\n  /**\n   * A control is `pending` when its `status` is `PENDING`.\n   *\n   * @see `status`\n   *\n   * @returns True if this control is in the process of conducting a validation check,\n   * false otherwise.\n   */\n  get pending(): boolean { return this.status == PENDING; }\n\n  /**\n   * A control is `disabled` when its `status` is `DISABLED`.\n   *\n   * @see `status`\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   *\n   * @returns True if the control is disabled, false otherwise.\n   */\n  get disabled(): boolean { return this.status === DISABLED; }\n\n  /**\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\n   *\n   * @see `status`\n   *\n   * @returns True if the control has any status other than 'DISABLED',\n   * false if the status is 'DISABLED'.\n   *\n   */\n  get enabled(): boolean { return this.status !== DISABLED; }\n\n  /**\n   * An object containing any errors generated by failing validation,\n   * or null if there are no errors.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly errors !: ValidationErrors | null;\n\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  public readonly pristine: boolean = true;\n\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get dirty(): boolean { return !this.pristine; }\n\n  /**\n   * True if the control is marked as `touched`.\n   *\n   * A control is marked `touched` once the user has triggered\n   * a `blur` event on it.\n   */\n  public readonly touched: boolean = false;\n\n  /**\n   * True if the control has not been marked as touched\n   *\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched(): boolean { return !this.touched; }\n\n  /**\n   * A multicasting observable that emits an event every time the value of the control changes, in\n   * the UI or programmatically.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly valueChanges !: Observable<any>;\n\n  /**\n   * A multicasting observable that emits an event every time the validation `status` of the control\n   * recalculates.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly statusChanges !: Observable<any>;\n\n  /**\n   * Reports the update strategy of the `AbstractControl` (meaning\n   * the event on which the control updates itself).\n   * Possible values: `'change'` | `'blur'` | `'submit'`\n   * Default value: `'change'`\n   */\n  get updateOn(): FormHooks {\n    return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n  }\n\n  /**\n   * Sets the synchronous validators that are active on this control.  Calling\n   * this overwrites any existing sync validators.\n   */\n  setValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n\n  /**\n   * Sets the async validators that are active on this control. Calling this\n   * overwrites any existing async validators.\n   */\n  setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]|null): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n\n  /**\n   * Empties out the sync validator list.\n   */\n  clearValidators(): void { this.validator = null; }\n\n  /**\n   * Empties out the async validator list.\n   */\n  clearAsyncValidators(): void { this.asyncValidator = null; }\n\n  /**\n   * Marks the control as `touched`. A control is touched by focus and\n   * blur events that do not change the value; compare `markAsDirty`;\n   *\n   *  @param opts Configuration options that determine how the control propagates changes\n   * and emits events events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsTouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as{touched: boolean}).touched = true;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `untouched`.\n   *\n   * If the control has any children, also marks all children as `untouched`\n   * and recalculates the `touched` status of all parent controls.\n   *\n   *  @param opts Configuration options that determine how the control propagates changes\n   * and emits events after the marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsUntouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as{touched: boolean}).touched = false;\n    this._pendingTouched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `dirty`. A control becomes dirty when\n   * the control's is changed through the UI; compare `markAsTouched`.\n   *\n   *  @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   */\n  markAsDirty(opts: {onlySelf?: boolean} = {}): void {\n    (this as{pristine: boolean}).pristine = false;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `pristine`.\n   *\n   * If the control has any children, marks all children as `pristine`,\n   * and recalculates the `pristine` status of all parent\n   * controls.\n   *\n   *  @param opts Configuration options that determine how the control emits events after\n   * marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false..\n   */\n  markAsPristine(opts: {onlySelf?: boolean} = {}): void {\n    (this as{pristine: boolean}).pristine = true;\n    this._pendingDirty = false;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n\n  /**\n   * Marks the control as `pending`.\n   *\n   * A control is pending while the control performs async validation.\n   *\n   *  @param opts Configuration options that determine how the control propagates changes and\n   * emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false..\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n   * observable emits an event with the latest status the control is marked pending.\n   * When false, no events are emitted.\n   *\n   */\n  markAsPending(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    (this as{status: string}).status = PENDING;\n\n    if (opts.emitEvent !== false) {\n      (this.statusChanges as EventEmitter<any>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending(opts);\n    }\n  }\n\n  /**\n   * Disables the control. This means the control is exempt from validation checks and\n   * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n   *\n   * If the control has children, all children are also disabled.\n   *\n   *  @param opts Configuration options that determine how the control propagates\n   * changes and emits events after the control is disabled.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false..\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is disabled.\n   * When false, no events are emitted.\n   */\n  disable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    (this as{status: string}).status = DISABLED;\n    (this as{errors: ValidationErrors | null}).errors = null;\n    this._forEachChild(\n        (control: AbstractControl) => { control.disable({...opts, onlySelf: true}); });\n    this._updateValue();\n\n    if (opts.emitEvent !== false) {\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    this._updateAncestors(opts);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n\n  /**\n   * Enables the control. This means the control is included in validation checks and\n   * the aggregate value of its parent. Its status recalculates based on its value and\n   * its validators.\n   *\n   * By default, if the control has children, all children are enabled.\n   *\n   *  @param opts Configure options that control how the control propagates changes and\n   * emits events when marked as untouched\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false..\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is enabled.\n   * When false, no events are emitted.\n   */\n  enable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    (this as{status: string}).status = VALID;\n    this._forEachChild(\n        (control: AbstractControl) => { control.enable({...opts, onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors(opts);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n\n  private _updateAncestors(opts: {onlySelf?: boolean, emitEvent?: boolean}) {\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n\n  /**\n   * @param parent Sets the parent of the control\n   */\n  setParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n\n  /**\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract setValue(value: any, options?: Object): void;\n\n  /**\n   * Patches the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract patchValue(value: any, options?: Object): void;\n\n  /**\n   * Resets the control. Abstract method (implemented in sub-classes).\n   */\n  abstract reset(value?: any, options?: Object): void;\n\n  /**\n   * Recalculates the value and validation status of the control.\n   *\n   * By default, it also updates the value and validity of its ancestors.\n   *\n   * @param opts Configuration options determine how the control propagates changes and emits events\n   * after updates and validity checks are applied.\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\n   * update all direct ancestors. Default is false..\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is updated.\n   * When false, no events are emitted.\n   */\n  updateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._cancelExistingSubscription();\n      (this as{errors: ValidationErrors | null}).errors = this._runValidator();\n      (this as{status: string}).status = this._calculateStatus();\n\n      if (this.status === VALID || this.status === PENDING) {\n        this._runAsyncValidator(opts.emitEvent);\n      }\n    }\n\n    if (opts.emitEvent !== false) {\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n    }\n  }\n\n  /** @internal */\n  _updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n\n  private _setInitialStatus() {\n    (this as{status: string}).status = this._allControlsDisabled() ? DISABLED : VALID;\n  }\n\n  private _runValidator(): ValidationErrors|null {\n    return this.validator ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      (this as{status: string}).status = PENDING;\n      const obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription =\n          obs.subscribe((errors: ValidationErrors | null) => this.setErrors(errors, {emitEvent}));\n    }\n  }\n\n  private _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets errors on a form control when running validations manually, rather than automatically.\n   *\n   * Calling `setErrors` also updates the validity of the parent control.\n   *\n   * @usageNotes\n   * ### Manually set the errors for a control\n   *\n   * ```\n   * const login = new FormControl('someLogin');\n   * login.setErrors({\n   *   notUnique: true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({ notUnique: true });\n   *\n   * login.setValue('someOtherLogin');\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void {\n    (this as{errors: ValidationErrors | null}).errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false);\n  }\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * @param path A dot-delimited string or array of string/number values that define the path to the\n   * control.\n   *\n   * @usageNotes\n   * ### Retrieve a nested control\n   *\n   * For example, to get a `name` control nested within a `person` sub-group:\n   *\n   * * `this.form.get('person.name');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['person', 'name']);`\n   */\n  get(path: Array<string|number>|string): AbstractControl|null { return _find(this, path, '.'); }\n\n  /**\n   * Reports error data for a specific error occurring in this control or in another control.\n   *\n   * @param errorCode The error code for which to retrieve data\n   * @param path The path to a control to check. If not supplied, checks for the error in this\n   * control.\n   *\n   * @returns The error data if the control with the given path has the given error, otherwise null\n   * or undefined.\n   */\n  getError(errorCode: string, path?: string[]): any {\n    const control = path ? this.get(path) : this;\n    return control && control.errors ? control.errors[errorCode] : null;\n  }\n\n  /**\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The error code for which to retrieve data\n   * @param path The path to a control to check. If not supplied, checks for the error in this\n   * control.\n   * @returns True when the control with the given path has the error, otherwise false.\n   */\n  hasError(errorCode: string, path?: string[]): boolean { return !!this.getError(errorCode, path); }\n\n  /**\n   * Retrieves the top-level ancestor of this control.\n   */\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(emitEvent: boolean): void {\n    (this as{status: string}).status = this._calculateStatus();\n\n    if (emitEvent) {\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    (this as{valueChanges: Observable<any>}).valueChanges = new EventEmitter();\n    (this as{statusChanges: Observable<any>}).statusChanges = new EventEmitter();\n  }\n\n\n  private _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this.errors) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: Function): void;\n\n  /** @internal */\n  abstract _anyControls(condition: Function): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  abstract _syncPendingControls(): boolean;\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n\n  /** @internal */\n  _anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n\n  /** @internal */\n  _anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n\n  /** @internal */\n  _updatePristine(opts: {onlySelf?: boolean} = {}): void {\n    (this as{pristine: boolean}).pristine = !this._anyControlsDirty();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n\n  /** @internal */\n  _updateTouched(opts: {onlySelf?: boolean} = {}): void {\n    (this as{touched: boolean}).touched = this._anyControlsTouched();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n\n  /** @internal */\n  _onDisabledChange: Function[] = [];\n\n  /** @internal */\n  _isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n\n  /** @internal */\n  _registerOnCollectionChange(fn: () => void): void { this._onCollectionChange = fn; }\n\n  /** @internal */\n  _setUpdateStrategy(opts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null): void {\n    if (isOptionsObj(opts) && (opts as AbstractControlOptions).updateOn != null) {\n      this._updateOn = (opts as AbstractControlOptions).updateOn !;\n    }\n  }\n}\n\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n *```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n *\n*/\nexport class FormControl extends AbstractControl {\n  /** @internal */\n  _onChange: Function[] = [];\n\n  /** @internal */\n  _pendingValue: any;\n\n  /** @internal */\n  _pendingChange: any;\n\n  /**\n  * Creates a new `FormControl` instance.\n  *\n  * @param formState Initializes the control with an initial value,\n  * or an object that defines the initial value and disabled state.\n  *\n  * @param validatorOrOpts A synchronous validator function, or an array of\n  * such functions, or an `AbstractControlOptions` object that contains validation functions\n  * and a validation trigger.\n  *\n  * @param asyncValidator A single async validator or array of async validator functions\n  *\n  */\n  constructor(\n      formState: any = null,\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._applyFormState(formState);\n    this._setUpdateStrategy(validatorOrOpts);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n\n  /**\n   * Sets a new value for the form control.\n   *\n   * @param value The new value for the control.\n   * @param options Configuration options that determine how the control proopagates changes\n   * and emits events when the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n   * `onChange` event to\n   * update the view.\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n   * `ngModelChange`\n   * event to update the model.\n   *\n   */\n  setValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    (this as{value: any}).value = this._pendingValue = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(\n          (changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of a control.\n   *\n   * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n   * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n   * `FormArrays`, where it does behave differently.\n   *\n   * @see `setValue` for options\n   */\n  patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n\n  /**\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\n   * the value to null.\n   *\n   * @param formState Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   *\n   */\n  reset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this.value, options);\n    this._pendingChange = false;\n  }\n\n  /**\n   * @internal\n   */\n  _updateValue() {}\n\n  /**\n   * @internal\n   */\n  _anyControls(condition: Function): boolean { return false; }\n\n  /**\n   * @internal\n   */\n  _allControlsDisabled(): boolean { return this.disabled; }\n\n  /**\n   * Register a listener for change events.\n   *\n   * @param fn The method that is called when the value changes\n   */\n  registerOnChange(fn: Function): void { this._onChange.push(fn); }\n\n  /**\n   * @internal\n   */\n  _clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = [];\n    this._onCollectionChange = () => {};\n  }\n\n  /**\n   * Register a listener for disabled events.\n   *\n   * @param fn The method that is called when the disabled status changes.\n   */\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n\n  /**\n   * @internal\n   */\n  _forEachChild(cb: Function): void {}\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    if (this.updateOn === 'submit') {\n      if (this._pendingDirty) this.markAsDirty();\n      if (this._pendingTouched) this.markAsTouched();\n      if (this._pendingChange) {\n        this.setValue(this._pendingValue, {onlySelf: true, emitModelToViewChange: false});\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      (this as{value: any}).value = this._pendingValue = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      (this as{value: any}).value = this._pendingValue = formState;\n    }\n  }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n */\nexport class FormGroup extends AbstractControl {\n  /**\n  * Creates a new `FormGroup` instance.\n  *\n  * @param controls A collection of child controls. The key for each child is the name\n  * under which it is registered.\n  *\n  * @param validatorOrOpts A synchronous validator function, or an array of\n  * such functions, or an `AbstractControlOptions` object that contains validation functions\n  * and a validation trigger.\n  *\n  * @param asyncValidator A single async validator or array of async validator functions\n  *\n  */\n  constructor(\n      public controls: {[key: string]: AbstractControl},\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Registers a control with the group's list of controls.\n   *\n   * This method does not update the value or validity of the control.\n   * Use {@link FormGroup#addControl addControl} instead.\n   *\n   * @param name The control name to register in the collection\n   * @param control Provides the control for the given name\n   */\n  registerControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n\n  /**\n   * Add a control to this group.\n   *\n   * This method also updates the value and validity of the control.\n   *\n   * @param name The control name to add to the collection\n   * @param control Provides the control for the given name\n   */\n  addControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Remove a control from this group.\n   *\n   * @param name The control name to remove from the collection\n   */\n  removeControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Replace an existing control.\n   *\n   * @param name The control name to replace in the collection\n   * @param control Provides the control for the given name\n   */\n  setControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * Reports false for disabled controls. If you'd like to check for existence in the group\n   * only, use {@link AbstractControl#get get} instead.\n   *\n   * @param name The control name to check for existence in the collection\n   *\n   * @returns false for disabled controls, true otherwise.\n   */\n  contains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n\n  /**\n   * Sets the value of the `FormGroup`. It accepts an object that matches\n   * the structure of the group, with control names as keys.\n   *\n   * @usageNotes\n   * ### Set the complete value for the form group\n   *\n   * ```\n   * const form = new FormGroup({\n   *   first: new FormControl(),\n   *   last: new FormControl()\n   * });\n   *\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.setValue({first: 'Nancy', last: 'Drew'});\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n   * ```\n   *\n   * @throws When strict checks fail, such as setting the value of a control\n   * that doesn't exist or if you excluding the value of a control.\n   *\n   * @param value The new value for the control that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   */\n  setValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormGroup`. It accepts an object with control\n   * names as keys, and does its best to match the values to the correct controls\n   * in the group.\n   *\n   * It accepts both super-sets and sub-sets of the group without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the value for a form group\n   *\n   * ```\n   * const form = new FormGroup({\n   *    first: new FormControl(),\n   *    last: new FormControl()\n   * });\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.patchValue({first: 'Nancy'});\n   * console.log(form.value);   // {first: 'Nancy', last: null}\n   * ```\n   *\n   * @param value The object that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes and\n   * emits events after the value is patched.\n   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n   * true.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  patchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n   * the value of all descendants to null.\n   *\n   * You reset to a specific form state by passing in a map of states\n   * that matches the structure of your form, with control names as keys. The state\n   * is a standalone value or a form state object with both a value and a disabled\n   * status.\n   *\n   * @param formState Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the group is reset.\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * @usageNotes\n   *\n   * ### Reset the form group values\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\n   *\n   * form.reset({ first: 'name', last: 'last name' });\n   *\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\n   * ```\n   *\n   * ### Reset the form group values and disabled status\n   *\n   * ```\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * form.reset({\n   *   first: {value: 'name', disabled: true},\n   *   last: 'last'\n   * });\n   *\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n   * console.log(this.form.get('first').status);  // 'DISABLED'\n   * ```\n   */\n  reset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n\n  /**\n   * The aggregate value of the `FormGroup`, including any disabled controls.\n   *\n   * Retrieves all values regardless of disabled status.\n   * The `value` property is the best way to get the value of the group, because\n   * it excludes disabled controls in the `FormGroup`.\n   */\n  getRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control instanceof FormControl ? control.value : (<any>control).getRawValue();\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    let subtreeUpdated = this._reduceChildren(false, (updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    });\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  _throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n\n  /** @internal */\n  _updateValue(): void { (this as{value: any}).value = this._reduceValue(); }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    let res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n\n  /** @internal */\n  _reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _reduceChildren(initValue: any, fn: Function) {\n    let res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n  * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n *\n */\nexport class FormArray extends AbstractControl {\n  /**\n  * Creates a new `FormArray` instance.\n  *\n  * @param controls An array of child controls. Each child control is given an index\n  * where it is registered.\n  *\n  * @param validatorOrOpts A synchronous validator function, or an array of\n  * such functions, or an `AbstractControlOptions` object that contains validation functions\n  * and a validation trigger.\n  *\n  * @param asyncValidator A single async validator or array of async validator functions\n  *\n  */\n  constructor(\n      public controls: AbstractControl[],\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(\n        coerceToValidator(validatorOrOpts),\n        coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to retrieve the control\n   */\n  at(index: number): AbstractControl { return this.controls[index]; }\n\n  /**\n   * Insert a new `AbstractControl` at the end of the array.\n   *\n   * @param control Form control to be inserted\n   */\n  push(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Insert a new `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to insert the control\n   * @param control Form control to be inserted\n   */\n  insert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   *\n   * @param index Index in the array to remove the control\n   */\n  removeAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Replace an existing control.\n   *\n   * @param index Index in the array to replace the control\n   * @param control The `AbstractControl` control to replace the existing control\n   */\n  setControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number { return this.controls.length; }\n\n  /**\n   * Sets the value of the `FormArray`. It accepts an array that matches\n   * the structure of the control.\n   *\n   * This method performs strict checks, and throws an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   * @usageNotes\n   * ### Set the values for the controls in the form array\n   *\n   * ```\n   * const arr = new FormArray([\n   *   new FormControl(),\n   *   new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.setValue(['Nancy', 'Drew']);\n   * console.log(arr.value);   // ['Nancy', 'Drew']\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormArray`. It accepts an array that matches the\n   * structure of the control, and does its best to match the values to the correct\n   * controls in the group.\n   *\n   * It accepts both super-sets and sub-sets of the array without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the values for controls in a form array\n   *\n   * ```\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.patchValue(['Nancy']);\n   * console.log(arr.value);   // ['Nancy', null]\n   * ```\n   *\n   * @param value Array of latest values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n   * value of all descendants to null or null maps.\n   *\n   * You reset to a specific form state by passing in an array of states\n   * that matches the structure of the control. The state is a standalone value\n   * or a form state object with both a value and a disabled status.\n   *\n   * @usageNotes\n   * ### Reset the values in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * arr.reset(['name', 'last name']);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * ```\n   *\n   * ### Reset the values in a form array and the disabled status for the first control\n   *\n   * ```\n   * this.arr.reset([\n   *   {value: 'name', disabled: true},\n   *   'last'\n   * ]);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * console.log(this.arr.get(0).status);  // 'DISABLED'\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  reset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n\n  /**\n   * The aggregate value of the array, including any disabled controls.\n   *\n   * Reports all values regardless of disabled status.\n   * For enabled controls only, the `value` property is the best way to get the value of the array.\n   */\n  getRawValue(): any[] {\n    return this.controls.map((control: AbstractControl) => {\n      return control instanceof FormControl ? control.value : (<any>control).getRawValue();\n    });\n  }\n\n  /** @internal */\n  _syncPendingControls(): boolean {\n    let subtreeUpdated = this.controls.reduce((updated: boolean, child: AbstractControl) => {\n      return child._syncPendingControls() ? true : updated;\n    }, false);\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  _throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n\n  /** @internal */\n  _updateValue(): void {\n    (this as{value: any}).value =\n        this.controls.filter((control) => control.enabled || this.disabled)\n            .map((control) => control.value);\n  }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n\n  private _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, EventEmitter, Inject, Input, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from './shared';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use `NgModel` with a\n * `name` attribute.  You can also use `NgModelGroup` if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * @ngModule FormsModule\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n})\nexport class NgForm extends ControlContainer implements Form,\n    AfterViewInit {\n  public readonly submitted: boolean = false;\n\n  private _directives: NgModel[] = [];\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n\n  /**\n   * Options for the `NgForm` instance. Accepts the following properties:\n   *\n   * **updateOn**: Serves as the default `updateOn` value for all child `NgModels` below it\n   * (unless a child has explicitly set its own value for this in `ngModelOptions`).\n   * Potential values: `'change'` | `'blur'` | `'submit'`\n   *\n   * ```html\n   * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n   *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n   * </form>\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngFormOptions') options !: {updateOn?: FormHooks};\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  ngAfterViewInit() { this._setUpdateStrategy(); }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as{control: FormControl}).control =\n          <FormControl>container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.push(dir);\n    });\n  }\n\n  getControl(dir: NgModel): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      removeDir<NgModel>(this._directives, dir);\n    });\n  }\n\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  getFormGroup(dir: NgModelGroup): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path !);\n      ctrl.setValue(value);\n    });\n  }\n\n  setValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class TemplateDrivenErrors {\n  static modelParentException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${Examples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${Examples.ngModelWithFormGroup}`);\n  }\n\n  static formGroupNameException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n\n  static missingNameException() {\n    throw new Error(\n        `If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n  }\n\n  static modelGroupParentException() {\n    throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n\n  static ngFormWarning() {\n    console.warn(`\n    It looks like you're using 'ngForm'.\n\n    Support for using the 'ngForm' element selector has been deprecated in Angular v6 and will be removed\n    in Angular v9.\n\n    Use 'ng-form' instead.\n\n    Before:\n    <ngForm #myForm=\"ngForm\">\n\n    After:\n    <ng-form #myForm=\"ngForm\">\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, InjectionToken, Optional} from '@angular/core';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\n/**\n * Token to provide to turn off the warning when using 'ngForm' deprecated selector.\n */\nexport const NG_FORM_SELECTOR_WARNING = new InjectionToken('NgFormSelectorWarning');\n\n/**\n * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.\n *\n * @deprecated in Angular v6 and will be removed in Angular v9.\n * @ngModule FormsModule\n */\n@Directive({selector: 'ngForm'})\nexport class NgFormSelectorWarning {\n  /**\n   * Static property used to track whether the deprecation warning for this selector has been sent.\n   * Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngFormWarning = false;\n\n  constructor(@Optional() @Inject(NG_FORM_SELECTOR_WARNING) ngFormWarning: string|null) {\n    if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning._ngFormWarning) ||\n        ngFormWarning === 'always') {\n      TemplateDrivenErrors.ngFormWarning();\n      NgFormSelectorWarning._ngFormWarning = true;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n\n/**\n * @description\n *\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n */\n@Directive({selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'})\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelGroup') name !: string;\n\n  constructor(\n      @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated `FormControl` (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in `AbstractControlDirective`.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * @ngModule FormsModule\n */\n@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n  public readonly control: FormControl = new FormControl();\n  /** @internal */\n  _registered = false;\n  viewModel: any;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input('disabled') isDisabled !: boolean;\n  @Input('ngModel') model: any;\n\n  /**\n   * Options object for this `ngModel` instance. You can configure the following properties:\n   *\n   * **name**: An alternative to setting the name attribute on the form control element.\n   * Sometimes, especially with custom form components, the name attribute might be used\n   * as an `@Input` property for a different purpose. In cases like these, you can configure\n   * the `ngModel` name through this option.\n   *\n   * ```html\n   * <form>\n   *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n   *   </my-person-control>\n   * </form>\n   * <!-- form value: {user: ''} -->\n   * ```\n   *\n   * **standalone**: Defaults to false. If this is set to true, the `ngModel` will not\n   * register itself with its parent form, and will act as if it's not in the form. This\n   * can be handy if you have form meta-controls, a.k.a. form elements nested in\n   * the `<form>` tag that control the display of the form, but don't contain form data.\n   *\n   * ```html\n   * <form>\n   *   <input name=\"login\" ngModel placeholder=\"Login\">\n   *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n   * </form>\n   * <!-- form value: {login: ''} -->\n   * ```\n   *\n   * **updateOn**: Defaults to `'change'`. Defines the event upon which the form control\n   * value and validity will update. Also accepts `'blur'` and `'submit'`.\n   *\n   * ```html\n   * <input [(ngModel)]=\"firstName\" [ngModelOptions]=\"{updateOn: 'blur'}\">\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelOptions')\n  options !: {name?: string, standalone?: boolean, updateOn?: FormHooks};\n\n  @Output('ngModelChange') update = new EventEmitter();\n\n  constructor(@Optional() @Host() parent: ControlContainer,\n              @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n              @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR)\n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              ngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n\n              get path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n\n              get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n              get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _setUpControl(): void {\n                this._setUpdateStrategy();\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n\n              private _setUpdateStrategy(): void {\n                if (this.options && this.options.updateOn != null) {\n                  this.control._updateOn = this.options.updateOn;\n                }\n              }\n\n              private _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n\n              private _setUpStandalone(): void {\n                setUpControl(this.control, this);\n                this.control.updateValueAndValidity({emitEvent: false});\n              }\n\n              private _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n\n              private _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n\n              private _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n\n              private _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n\n              private _updateDisabled(changes: SimpleChanges) {\n                const disabledValue = changes['isDisabled'].currentValue;\n\n                const isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, InjectionToken, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING =\n    new InjectionToken('NgModelWithFormControlWarning');\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n\n/**\n * @description\n *\n * Syncs a standalone `FormControl` instance to a form control element.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * Use this directive if you'd like to create and manage a `FormControl` instance directly.\n * Simply create a `FormControl`, save it to your component class, and pass it into the\n * `FormControlDirective`.\n *\n * This directive is designed to be used as a standalone control.  Unlike `FormControlName`,\n * it does not require that your `FormControl` instance be part of any parent\n * `FormGroup`, and it won't be registered to any `FormGroupDirective` that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormControl` instance. See a full list of available properties in\n * `AbstractControl`.\n *\n * **Set the value**: You can pass in an initial value when instantiating the `FormControl`,\n * or you can set it programmatically later using {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'})\n\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formControl') form !: FormControl;\n\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlDirective instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(@Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n              @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR)\n              valueAccessors: ControlValueAccessor[],\n              @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|null) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && this.valueAccessor !.setDisabledState) {\n                    this.valueAccessor !.setDisabledState !(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  _ngModelWarning(\n                      'formControl', FormControlDirective, this, this._ngModelWarningConfig);\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              get path(): string[] { return []; }\n\n              get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              get control(): FormControl { return this.form; }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @usageNotes\n * **Set value**: You can set the form's initial value when instantiating the\n * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the `FormGroup`'s {@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n})\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  public readonly submitted: boolean = false;\n\n  // TODO(issue/24571): remove '!'.\n  private _oldForm !: FormGroup;\n  directives: FormControlName[] = [];\n\n  @Input('formGroup') form: FormGroup = null !;\n  @Output() ngSubmit = new EventEmitter();\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) private _validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  getControl(dir: FormControlName): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: FormControlName): void { removeDir<FormControlName>(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl√Ç¬† = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir.control !== newCtrl) {\n        cleanUpControl(dir.control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        (dir as{control: FormControl}).control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n\n  private _updateValidators() {\n    const sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([this.form.validator !, sync !]);\n\n    const async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator !, async !]);\n  }\n\n  private _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormGroup` you want to link, and\n * will look for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * @usageNotes\n * **Access the group**: You can access the associated `FormGroup` using the\n * {@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormGroup`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormGroup`, or you can set it programmatically later using\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formGroupName]', providers: [formGroupNameProvider]})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input('formGroupName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * @usageNotes\n * **Access the array**: You can access the associated `FormArray` using the\n * {@link AbstractControl#get get} method on the parent `FormGroup`.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormArray`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormArray`, or you can set the value programmatically later using the\n * `FormArray`'s {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the `FormArray`'s {@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling\n * its {@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formArrayName]', providers: [formArrayNameProvider]})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formArrayName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective !.addFormArray(this);\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  get control(): FormArray { return this.formDirective !.getFormArray(this); }\n\n  get formDirective(): FormGroupDirective|null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n\n/**\n * @description\n *\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the `FormControl` instance you want to\n * link, and will look for a `FormControl` registered with that name in the\n * closest `FormGroup` or `FormArray` above it.\n *\n * **Access the control**: You can access the `FormControl` associated with\n * this directive by using the {@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the `FormControl`.\n * See a full list of available properties in `AbstractControl`.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  `FormControl`, or you can set it programmatically later using\n *  {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControlName]', providers: [controlNameBinding]})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /** @internal */\n  viewModel: any;\n  // TODO(issue/24571): remove '!'.\n  readonly control !: FormControl;\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formControlName') name !: string;\n\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n      @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|\n      null) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent !); }\n\n  get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n  get asyncValidator(): AsyncValidatorFn {\n    return composeAsyncValidators(this._rawAsyncValidators) !;\n  }\n\n  private _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n\n  private _setUpControl() {\n    this._checkParentType();\n    (this as{control: FormControl}).control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor !.setDisabledState) {\n      this.valueAccessor !.setDisabledState !(true);\n    }\n    this._added = true;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, StaticProvider, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks\n *\n * @experimental\n */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors|null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(control: AbstractControl):\n      Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const CHECKBOX_REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class RequiredValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _required !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  get required(): boolean|string { return this._required; }\n\n  set required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(control) : null;\n  }\n}\n\n/**\n * Provider which adds `EmailValidator` to `NG_VALIDATORS`.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n})\nexport class EmailValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _enabled !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  set email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\nexport interface ValidatorFn { (control: AbstractControl): ValidationErrors|null; }\n\nexport interface AsyncValidatorFn {\n  (control: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\n/**\n * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MinLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n})\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() minlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(control);\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\n}\n\n/**\n * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MaxLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n})\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() maxlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n})\nexport class PatternValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() pattern !: string | RegExp;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null { return this._validator(control); }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\n@Injectable()\nexport class FormBuilder {\n  /**\n   * @description\n   * Construct a new `FormGroup` instance.\n   *\n   * @param controlsConfig A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param extra An object of configuration options for the `FormGroup`.\n   * * `validator`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidator`: A single async validator or array of async validator functions\n   *\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n    const validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n\n  /**\n   * @description\n   * Construct a new `FormControl` instance.\n   *\n   * @param formState Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param validator A synchronous validator function, or an array of synchronous validator\n   * functions.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   * @usageNotes\n   *\n   * ### Initialize a control as disabled\n   *\n   * The following example returns a control with an initial value in a disabled state.\n   *\n   * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n   *   linenums=\"false\" region=\"disabled-control\">\n   * </code-example>\n   *\n   */\n  control(\n      formState: any, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n\n  /**\n   * @description\n   * Construct a new `FormArray` instance.\n   *\n   * @param controlsConfig An array of child controls. The key for each child control is its index\n   * in the array.\n   *\n   * @param validator A synchronous validator function, or an array of synchronous validator\n   * functions.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   */\n  array(\n      controlsConfig: any[], validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgFormSelectorWarning} from './directives/ng_form_selector_warning';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NG_FORM_SELECTOR_WARNING, NgFormSelectorWarning} from './directives/ng_form_selector_warning';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective, NG_MODEL_WITH_FORM_CONTROL_WARNING} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\n\nexport const SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n];\n\nexport const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [NgModel, NgModelGroup, NgForm, NgFormSelectorWarning];\n\nexport const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n@NgModule({\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n})\nexport class InternalFormsSharedModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\nexport const VERSION = new Version('7.0.0');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @experimental\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n  host: {'novalidate': ''},\n})\nexport class NgNoValidate {\n}\n","export class SimpleMask {\n  protected patterns: any = {\n    '9': new RegExp('[0-9]'),\n    'a': new RegExp('[a-z]'),\n    'A': new RegExp('[a-zA-Z–∞-—è–ê-–Ø—ë–Å–á—ó–Ü—ñ–Ñ—î“ê“ë]'),\n    'x': new RegExp('[a-zA-Z]'),\n    '*': new RegExp('[a-zA-Z0-9]'),\n    '~': new RegExp('[-\\+]')\n  };\n  mask: string;\n\n  /**\n   * set new patterns\n   * @param patterns new patterns\n   * @param clear true if to clear old patterns\n   */\n  protected setPatterns(patterns: any, clear: boolean = false): void {\n    if (!patterns) {\n      return;\n    }\n    try {\n      JSON.parse(JSON.stringify(patterns));\n    } catch {\n      throw new Error('Invalid patterns object');\n    }\n    if (clear) {\n      this.patterns = {};\n    }\n    for (const key in patterns) {\n      if (patterns.hasOwnProperty(key)) {\n        this.patterns[key] = new RegExp(patterns[key]);\n      }\n    }\n  }\n\n  /**\n   * checks if the char is a pattern, that is, if is a pattern\n   * @param char value to check\n   * @returns true is a pattern, false if is not\n   */\n  protected isPattern(char: string): boolean {\n    for (const key in this.patterns) {\n      if (this.patterns.hasOwnProperty(key) && key === char) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fits the value with the mask and return a formatted value\n   * @param value value to fit\n   * @returns formatted value\n   */\n  protected fitToMask(value: string): string {\n    let newValue = '';\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    for (let i = 0, j = 0; j < this.mask.length && i < value.length; i++ , j++) {\n      // ignore next special char\n      if (this.mask[j] === '\\\\') {\n        newValue += this.mask[j + 1];\n        j++;\n        continue;\n      }\n      // test special char\n      if (this.isPattern(this.mask[j])) {\n        if (this.patterns[this.mask[j]].test(value[i])) {\n          newValue += value[i];\n        } else {\n          return newValue;\n        }\n      } else {\n        newValue += this.mask[j];\n        if (this.mask[j] !== value[i]) {\n          i--;\n        }\n      }\n    }\n    return newValue;\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, NG_FORM_SELECTOR_WARNING, NG_MODEL_WITH_FORM_CONTROL_WARNING, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/forms)\n *\n * @see [Forms Guide](/guide/forms)\n */\n@NgModule({\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n})\nexport class FormsModule {\n  /**\n   * @description\n   * Provides options for configuring the template-driven forms module.\n   *\n   * @param opts An object of configuration options\n   * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated\n   * `ngForm` selector is used.\n   */\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnDeprecatedNgFormSelector?: 'never' | 'once' | 'always',\n  }): ModuleWithProviders<FormsModule> {\n    return {\n      ngModule: FormsModule,\n      providers:\n          [{provide: NG_FORM_SELECTOR_WARNING, useValue: opts.warnOnDeprecatedNgFormSelector}]\n    };\n  }\n}\n\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\n@NgModule({\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n})\nexport class ReactiveFormsModule {\n  /**\n   * @description\n   * Provides options for configuring the reactive forms module.\n   *\n   * @param opts An object of configuration options\n   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n   * binding is used with reactive form directives.\n   */\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnNgModelWithFormControl: 'never' | 'once' | 'always'\n  }): ModuleWithProviders<ReactiveFormsModule> {\n    return {\n      ngModule: ReactiveFormsModule,\n      providers: [{\n        provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n        useValue: opts.warnOnNgModelWithFormControl\n      }]\n    };\n  }\n}\n","import { Directive, HostListener, Input, Injectable, Self, Renderer2 } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SimpleMask } from './../simple-mask';\n\n@Directive({\n  selector: '[simpleMask]'\n})\n\n/** Mask used on answer component */\n@Injectable()\nexport class SimpleMaskDirective extends SimpleMask {\n  @Input('simpleMask') mask: string;\n  @Input() clearIfNotMatch: boolean;\n\n  constructor(\n    private renderer: Renderer2,\n    @Self() public ngControl?: NgControl\n  ) { \n    super();\n  }\n\n  @HostListener('input', ['$event'])\n  onInput(event: KeyboardEvent): void {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    const value = this.fitToMask(el.value);\n    this.writeValue(value, event.target);\n  }\n\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event) {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    if (el.value && !this.matchMask(el.value) && this.clearIfNotMatch) {\n      this.writeValue(null, event.target);\n    }\n  }\n\n  @HostListener('ionBlur', ['$event'])\n  inputOnblur(event: Event): void {\n    this.onBlur(event);\n  }\n\n  @Input('addPatterns')\n  set addPatterns(values: any) {\n    this.setPatterns(values);\n  }\n\n  @Input('newPatterns')\n  set newPatterns(values: any) {\n    this.setPatterns(values, true);\n  }\n\n  /**\n   * write the new value on input element and form control\n   * @param value value to write\n   * @param target input element\n   */\n  private writeValue(value: string | null, target: any): void {\n    target.value = value;\n    this.renderer.setProperty(target, 'value', value);\n    if (this.ngControl && this.ngControl.control) {\n      this.ngControl.control.setValue(value);\n      this.ngControl.control.markAsDirty();\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Checks if the value matches with the mask and is completed\n   * @param value value to check\n   * @returns true if match, false if not match\n   */\n  private matchMask(value: string): boolean {\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    return value.length === size ? true : false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SimpleMask } from '../simple-mask';\n\n@Pipe({\n  name: 'simpleMask'\n})\nexport class SimpleMaskPipe extends SimpleMask implements PipeTransform {\n  constructor() {\n    super();\n  }\n\n  transform(value: string, mask: string, patterns?: any, clear: boolean = false): string {\n    if (mask) {\n      this.mask = mask;\n    } else {\n      throw new Error('A mask is required on simpleMask pipe');\n    }\n\n    if (patterns) {\n      this.setPatterns(patterns, clear);\n    }\n    return this.fitToMask(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleMaskDirective } from './../directives/simple-mask.directive';\nimport { SimpleMaskPipe } from './../pipes/simple-mask.pipe';\n\n@NgModule({\n  declarations: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ],\n  exports: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ]\n})\n\nexport class SimpleMaskModule {}\n"]}