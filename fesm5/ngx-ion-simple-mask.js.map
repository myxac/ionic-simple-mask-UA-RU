{"version":3,"file":"ngx-ion-simple-mask.js","sources":["../package/src/simple-mask.ts","../package/src/directives/simple-mask.directive.ts","../package/src/pipes/simple-mask.pipe.ts","../package/src/modules/simple-mask.module.ts"],"sourcesContent":["export class SimpleMask {\n  protected patterns: any = {\n    '9': new RegExp('[0-9]'),\n    'a': new RegExp('[a-z]'),\n    'A': new RegExp('[a-zA-Zа-яА-ЯёЁЇїІіЄєҐґ]'),\n    'x': new RegExp('[a-zA-Z]'),\n    '*': new RegExp('[a-zA-Z0-9]'),\n    '~': new RegExp('[-\\+]')\n  };\n  mask: string;\n\n  /**\n   * set new patterns\n   * @param patterns new patterns\n   * @param clear true if to clear old patterns\n   */\n  protected setPatterns(patterns: any, clear: boolean = false): void {\n    if (!patterns) {\n      return;\n    }\n    try {\n      JSON.parse(JSON.stringify(patterns));\n    } catch {\n      throw new Error('Invalid patterns object');\n    }\n    if (clear) {\n      this.patterns = {};\n    }\n    for (const key in patterns) {\n      if (patterns.hasOwnProperty(key)) {\n        this.patterns[key] = new RegExp(patterns[key]);\n      }\n    }\n  }\n\n  /**\n   * checks if the char is a pattern, that is, if is a pattern\n   * @param char value to check\n   * @returns true is a pattern, false if is not\n   */\n  protected isPattern(char: string): boolean {\n    for (const key in this.patterns) {\n      if (this.patterns.hasOwnProperty(key) && key === char) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fits the value with the mask and return a formatted value\n   * @param value value to fit\n   * @returns formatted value\n   */\n  protected fitToMask(value: string): string {\n    let newValue = '';\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    for (let i = 0, j = 0; j < this.mask.length && i < value.length; i++ , j++) {\n      // ignore next special char\n      if (this.mask[j] === '\\\\') {\n        newValue += this.mask[j + 1];\n        j++;\n        continue;\n      }\n      // test special char\n      if (this.isPattern(this.mask[j])) {\n        if (this.patterns[this.mask[j]].test(value[i])) {\n          newValue += value[i];\n        } else {\n          return newValue;\n        }\n      } else {\n        newValue += this.mask[j];\n        if (this.mask[j] !== value[i]) {\n          i--;\n        }\n      }\n    }\n    return newValue;\n  }\n}","import { Directive, HostListener, Input, Injectable, Self, Renderer2 } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SimpleMask } from './../simple-mask';\n\n@Directive({\n  selector: '[simpleMask]'\n})\n\n/** Mask used on answer component */\n@Injectable()\nexport class SimpleMaskDirective extends SimpleMask {\n  @Input('simpleMask') mask: string;\n  @Input() clearIfNotMatch: boolean;\n\n  constructor(\n    private renderer: Renderer2,\n    @Self() public ngControl?: NgControl\n  ) { \n    super();\n  }\n\n  @HostListener('input', ['$event'])\n  onInput(event: KeyboardEvent): void {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    const value = this.fitToMask(el.value);\n    this.writeValue(value, event.target);\n  }\n\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event) {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    if (el.value && !this.matchMask(el.value) && this.clearIfNotMatch) {\n      this.writeValue(null, event.target);\n    }\n  }\n\n  @HostListener('ionBlur', ['$event'])\n  inputOnblur(event: Event): void {\n    this.onBlur(event);\n  }\n\n  @Input('addPatterns')\n  set addPatterns(values: any) {\n    this.setPatterns(values);\n  }\n\n  @Input('newPatterns')\n  set newPatterns(values: any) {\n    this.setPatterns(values, true);\n  }\n\n  /**\n   * write the new value on input element and form control\n   * @param value value to write\n   * @param target input element\n   */\n  private writeValue(value: string | null, target: any): void {\n    target.value = value;\n    this.renderer.setProperty(target, 'value', value);\n    if (this.ngControl && this.ngControl.control) {\n      this.ngControl.control.setValue(value);\n      this.ngControl.control.markAsDirty();\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Checks if the value matches with the mask and is completed\n   * @param value value to check\n   * @returns true if match, false if not match\n   */\n  private matchMask(value: string): boolean {\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    return value.length === size ? true : false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SimpleMask } from '../simple-mask';\n\n@Pipe({\n  name: 'simpleMask'\n})\nexport class SimpleMaskPipe extends SimpleMask implements PipeTransform {\n  constructor() {\n    super();\n  }\n\n  transform(value: string, mask: string, patterns?: any, clear: boolean = false): string {\n    if (mask) {\n      this.mask = mask;\n    } else {\n      throw new Error('A mask is required on simpleMask pipe');\n    }\n\n    if (patterns) {\n      this.setPatterns(patterns, clear);\n    }\n    return this.fitToMask(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleMaskDirective } from './../directives/simple-mask.directive';\nimport { SimpleMaskPipe } from './../pipes/simple-mask.pipe';\n\n@NgModule({\n  declarations: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ],\n  exports: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ]\n})\n\nexport class SimpleMaskModule {}\n"],"names":["tslib_1.__extends"],"mappings":"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"}